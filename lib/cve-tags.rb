# encoding: utf-8
require 'rss'
require 'nokogiri'

class CVETags
  attr_reader :stacks_dir

  def initialize(stacks_dir)
    @stacks_dir = stacks_dir
  end

  def related_cves(system_name)
    raise "cflinuxfs2/cflinuxfs2_receipt not found in '#{@stacks_dir}'" unless receipt_found
    return [] unless rss

    @related_cves ||= rss.items.select do |item|
      description = Nokogiri::HTML(item.description) { |c| c.options = Nokogiri::XML::ParseOptions::NOBLANKS }
      header      = description.css('dt').find { |dt| dt.text.include?(system_name) }

      next unless header
      sibling     = header.css('+ dd')
      libs        = []

      while sibling
        libs << [
          sibling.css('> a').text,
          sibling.css('> span a').text
        ]
        sibling = sibling.css('+ dd').first
      end

      libs.any? do |name, _version|
        find_vulnerability_in_receipt(name.to_s)
      end
    end.map do |item|
      {
        title: item.title.chomp,
        description: Nokogiri::HTML(item.description).text.chomp,
        raw_description: Nokogiri::HTML(item.description).search('body').first.inner_html
      }
    end
  end

  def unrelated_cves(system_name)
    all_cves(system_name) - related_cves(system_name)
  end

  private

  def all_cves(system_name)
    raise "cflinuxfs2/cflinuxfs2_receipt not found in '#{@stacks_dir}'" unless receipt_found
    return [] unless rss

    rss.items.select do |item|
      description = Nokogiri::HTML(item.description) { |c| c.options = Nokogiri::XML::ParseOptions::NOBLANKS }
      description.css('dt').find { |dt| dt.text.include?(system_name) }
    end.map do |item|
      {
        title: item.title.chomp,
        description: Nokogiri::HTML(item.description).text.chomp,
        raw_description: Nokogiri::HTML(item.description).search('body').first.inner_html
      }
    end
  end

  def feed_uri
    'https://www.ubuntu.com/usn/rss.xml'
  end

  def rss
    @rss ||= RSS::Parser.parse(feed_uri, false)
  end

  def receipt_found
    File.exist? "#{@stacks_dir}/cflinuxfs2/cflinuxfs2_receipt"
  end

  def find_vulnerability_in_receipt(regex)
    Dir.chdir(@stacks_dir) do
      !open('cflinuxfs2/cflinuxfs2_receipt', 'r').grep(/#{regex}/).empty?
    end
  end
end
