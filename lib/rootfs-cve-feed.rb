require 'rss'
require 'json'
require 'open-uri'

class RootFSCVEFeed
  attr_reader :stack, :stacks_dir

  def initialize(stack, stacks_dir)
    @stack = stack
    @stacks_dir = stacks_dir
    @version_to_codename_cache = {}
  end

  def related_cves(system_name)
    raise "#{@stack} receipt not found in '#{@stacks_dir}'" unless receipt_found
    return [] unless rss

    @related_cves ||= rss.items.select do |item|
      usn_id = extract_usn_id(item.link)
      next unless usn_id

      json_data = fetch_usn_json(usn_id)
      next unless json_data

      codename = build_version_mapping(json_data, system_name)
      next unless codename

      packages = extract_packages_for_release(json_data, codename)
      next if packages.empty?

      packages.any? do |package_name|
        find_vulnerability_in_receipt(package_name)
      end
    end.map(&:title)
  end

  def unrelated_cves(system_name)
    all_cves(system_name) - related_cves(system_name)
  end

  private

  def system_name_to_codename(system_name)
    @version_to_codename_cache[system_name]
  end

  def build_version_mapping(json_data, system_name)
    json_data['releases']&.each do |release|
      version = release['version']
      codename = release['codename']
      next unless version && codename

      key = "Ubuntu #{version}"
      @version_to_codename_cache[key] ||= codename
    end

    @version_to_codename_cache[system_name]
  end

  def extract_usn_id(url)
    match = url.match(%r{/notices/(USN-\d+-\d+)/?})
    match ? match[1] : nil
  end

  def fetch_usn_json(usn_id)
    json_url = "https://ubuntu.com/security/notices/#{usn_id}.json"
    response = URI.open(
      json_url,
      open_timeout: 5,
      read_timeout: 10,
      'User-Agent' => 'RootFSCVEFeed/1.0'
    ).read
    JSON.parse(response)
  rescue StandardError => e
    warn "Failed to fetch or parse JSON for #{usn_id}: #{e.message}"
    nil
  end

  def extract_packages_for_release(json_data, codename)
    return [] unless json_data['release_packages']
    return [] unless json_data['release_packages'][codename]

    json_data['release_packages'][codename].map { |pkg| pkg['name'] }.uniq
  end

  def all_cves(_system_name)
    raise "#{@stack} receipt not found in '#{@stacks_dir}'" unless receipt_found

    rss.items.map(&:title)
  end

  def feed_uri
    'https://ubuntu.com/security/notices/rss.xml'
  end

  def rss
    @rss ||= RSS::Parser.parse(URI.open(feed_uri, open_timeout: 5, read_timeout: 10), false)
  end

  def receipt_found
    case @stack
    when 'cflinuxfs3', 'cflinuxfs4'
      File.exist? "#{@stacks_dir}/receipt.#{@stack}.x86_64"
    else
      raise "Unsupported stack #{@stack}"
    end
  end

  def find_vulnerability_in_receipt(name)
    return if name == ''

    regex = "\\s#{name}(:amd64)*\\s"
    Dir.chdir(@stacks_dir) do
      case @stack
      when 'cflinuxfs3', 'cflinuxfs4'
        !File.open("receipt.#{@stack}.x86_64", 'r').grep(/#{regex}/).empty?
      else
        raise "Unsupported stack #{@stack}"
      end
    end
  end
end
