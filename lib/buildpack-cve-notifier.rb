# encoding: utf-8
require_relative "cve-history"
require_relative "slack-client"
require_relative "git-client"

class BuildpackCVENotifier
  attr_accessor :language
  attr_accessor :rss_cves

  def self.run(language, rss_cves)
    new(language, rss_cves).execute!
  end

  def initialize(language, rss_cves)
    @language = language
    @rss_cves = rss_cves
  end

  def execute!
    buildpacks_ci_dir = File.expand_path(File.join(File.dirname(__FILE__), '..'))
    buildpack_cves_dir = File.expand_path(File.join(buildpacks_ci_dir, '..', 'output-new-buildpack-cves'))
    buildpack_cve_history = CVEHistory.new(buildpack_cves_dir)

    rss_cve_titles = rss_cves.map { |cve| cve[:title] }
    yaml_cve_titles = buildpack_cve_history.read_yaml_cves("#{language}.yml")

    new_cve_titles = rss_cve_titles - yaml_cve_titles
    new_cves = rss_cves.select { |cve| new_cve_titles.include? cve[:title] }

    unless new_cves.empty?
      notify_on_slack(new_cves)

      cve_titles_to_write = rss_cve_titles | yaml_cve_titles
      write_cves_to_yaml(cve_titles_to_write, buildpack_cves_dir)

      # post story to tracker
    end
  end

  private

  def notify_on_slack(new_cves)
    slack_output = "There are *#{new_cves.length}* new #{language} CVEs:\n"

    new_cves.each do |cve|
      slack_output << "- #{cve[:title]} (#{cve[:description]})*\n"
    end

    slack_client = SlackClient.new(
      ENV['SLACK_WEBHOOK'],
      '#buildpacks',
      'dependency-notifier'
    )
    slack_client.post_to_slack slack_output
  end

  def write_cves_to_yaml(cve_titles_to_write, buildpack_cves_dir)
    buildpack_cve_history.write_yaml_cves(
      cve_titles_to_write,
      File.join(buildpack_cves_dir, "#{language}.yml")
    )

    Dir.chdir(buildpack_cves_dir) do
      GitClient.add_everything
      raise 'command failed' unless system("git commit -m 'CVE update for #{language}'")
    end
  end
end
