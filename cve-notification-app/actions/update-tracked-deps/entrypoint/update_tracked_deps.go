package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/jessevdk/go-flags"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type AllUtils struct {
	MongoUtils   utils.MongoUtilsInterface
	CSVUtils     utils.CSVUtilsInterface
	NVDNistUtils utils.NVDNistUtilsInterface
}

func main() {
	var opts struct {
		DBUri         string `long:"db-uri" description:"Database URI" required:"true"`
		DepList       string `long:"dep-list" description:"Path to dependencies.csv file" required:"true"`
		NVDNistApiKey string `long:"nvd-nist-api-key" description:"NVD Nist API Key" required:"true"`
	}

	_, err := flags.Parse(&opts)
	if err != nil {
		os.Exit(1)
	}

	allUtils := AllUtils{
		MongoUtils:   utils.NewMongoUtils(opts.DBUri),
		CSVUtils:     utils.NewCSVUtils(opts.DepList),
		NVDNistUtils: utils.NewNVDNistUtils(opts.NVDNistApiKey),
	}

	addedDeps, removedDeps, err := UpdateTrackedDependencies(allUtils)
	if err != nil {
		log.Fatal(err)
	}

	result := ""

	if len(addedDeps) == 0 {
		result += "****Added dependencies:**** \nNone\n"
	} else {
		result += fmt.Sprintf("****Added dependencies:****\n%s\n", strings.Join(addedDeps, "\n"))
	}

	if len(removedDeps) == 0 {
		result += "****Removed dependencies:**** \nNone\n"
	} else {
		result += fmt.Sprintf("****Removed dependencies:****\n%s\n", strings.Join(removedDeps, "\n"))
	}

	fmt.Println(result)
}

func UpdateTrackedDependencies(allUtils AllUtils) ([]string, []string, error) {
	mongoClient, ctx, err := allUtils.MongoUtils.GetMongoClient()
	if err != nil {
		return nil, nil, err
	}

	collection := allUtils.MongoUtils.GetMongoCollection(*mongoClient, "buildpacks", "cves")

	dependenciesInFile, err := allUtils.CSVUtils.GetDependenciesList()
	if err != nil {
		return nil, nil, err
	}

	trackedDependencies, err := allUtils.MongoUtils.GetUniqueDependencies(ctx, collection)
	if err != nil {
		return nil, nil, err
	}

	addedDependencies := getAddedDependencies(trackedDependencies, dependenciesInFile)
	removedDependencies := getRemovedDependencies(trackedDependencies, dependenciesInFile)

	err = addDependencyCVEs(allUtils, addedDependencies, ctx, collection)
	if err != nil {
		return nil, nil, err
	}

	err = removeDependencyCVEs(allUtils, removedDependencies, ctx, collection)
	if err != nil {
		return nil, nil, err
	}

	var (
		addedDeps   []string
		removedDeps []string
	)

	for _, dependency := range addedDependencies {
		addedDeps = append(addedDeps, dependency.Product)
	}

	for _, dependency := range removedDependencies {
		removedDeps = append(removedDeps, dependency.Product)
	}

	return addedDeps, removedDeps, nil
}

func removeDependencyCVEs(allUtils AllUtils, removedDependencies []utils.CVE, ctx context.Context, collection *mongo.Collection) error {
	for _, dependency := range removedDependencies {
		err := allUtils.MongoUtils.RemoveAllCVEs(dependency.Product, ctx, collection)
		if err != nil {
			return err
		}
	}

	return nil
}

func addDependencyCVEs(allUtils AllUtils, addedDependencies []utils.DepList, ctx context.Context, collection *mongo.Collection) error {
	for _, dependency := range addedDependencies {
		cves, err := allUtils.NVDNistUtils.GetCVEs(dependency.Vendor, dependency.Product)
		if err != nil {
			return err
		}

		for _, result := range cves.Vulnerabilities {

			// Get Severity
			cveSeverity, cveScore := getCVESeverity(result.CVE)

			// Get Description
			cveDescription := getCVEDescription(result.CVE)

			cve := utils.CVE{
				ID:          primitive.NewObjectID(),
				CreatedAt:   time.Now(),
				UpdatedAt:   time.Now(),
				Vendor:      dependency.Vendor,
				Product:     dependency.Product,
				Severity:    cveSeverity,
				Score:       cveScore,
				CVEId:       result.CVE.Id,
				Description: cveDescription,
			}

			err := allUtils.MongoUtils.CreateCVE(&cve, ctx, collection)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

func getCVEDescription(cve utils.NVDNistResponseCVE) string {
	description := "No description available"
	for _, desc := range cve.Descriptions {
		if desc.Lang == "en" {
			description = desc.Value
		}
	}

	return description
}

func getCVESeverity(cve utils.NVDNistResponseCVE) (string, float64) {
	cveSeverity := "Unknown"
	cveScore := 0.0
	if cve.Metrics.CvssMetricV3 != nil {
		cveSeverity = cve.Metrics.CvssMetricV3[0].CvssData.BaseSeverity
		cveScore = cve.Metrics.CvssMetricV3[0].CvssData.BaseScore
	} else if cve.Metrics.CvssMetricV2 != nil {
		cveSeverity = cve.Metrics.CvssMetricV2[0].CvssData.BaseSeverity
		cveScore = cve.Metrics.CvssMetricV2[0].CvssData.BaseScore
	}

	return cveSeverity, cveScore
}

func getAddedDependencies(trackedDependencies []utils.CVE, dependenciesInFile []utils.DepList) []utils.DepList {

	var addedDeps []utils.DepList

	for _, depInFile := range dependenciesInFile {
		tracked := false

		for _, trackedDep := range trackedDependencies {
			if depInFile.Vendor == trackedDep.Vendor {
				tracked = true
			}
		}

		if !tracked {
			addedDeps = append(addedDeps, depInFile)
		}

	}

	return addedDeps
}

func getRemovedDependencies(trackedDependencies []utils.CVE, dependenciesInFile []utils.DepList) []utils.CVE {
	var removedDeps []utils.CVE

	for _, trackedDep := range trackedDependencies {
		tracked := false

		for _, depInFile := range dependenciesInFile {
			if trackedDep.Vendor == depInFile.Vendor {
				tracked = true
			}
		}

		if !tracked {
			removedDeps = append(removedDeps, trackedDep)
		}
	}

	return removedDeps
}
