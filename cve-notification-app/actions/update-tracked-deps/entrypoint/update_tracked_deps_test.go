package main_test

import (
	contextPkg "context"
	"fmt"
	main "github.com/cloudfoundry/buildpacks-ci/cve-notification-app/actions/update-tracked-deps/entrypoint"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils/utilsfakes"
	"github.com/sclevine/spec"
	"go.mongodb.org/mongo-driver/mongo"
	"testing"

	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
)

func TestEntrypoint(t *testing.T) {
	spec.Run(t, "Entrypoint", testEntrypoint, spec.Report(report.Terminal{}))
}

func testEntrypoint(t *testing.T, context spec.G, it spec.S) {
	var (
		assert         = assertpkg.New(t)
		require        = requirepkg.New(t)
		allUtils       main.AllUtils
		fakeMongoUtils *utilsfakes.FakeMongoUtilsInterface
		fakeCSVUtils   *utilsfakes.FakeCSVUtilsInterface
		fakeNVDUtils   *utilsfakes.FakeNVDNistUtilsInterface
	)

	it.Before(func() {
		fakeMongoUtils = &utilsfakes.FakeMongoUtilsInterface{}
		fakeCSVUtils = &utilsfakes.FakeCSVUtilsInterface{}
		fakeNVDUtils = &utilsfakes.FakeNVDNistUtilsInterface{}

		allUtils = main.AllUtils{
			MongoUtils:   fakeMongoUtils,
			CSVUtils:     fakeCSVUtils,
			NVDNistUtils: fakeNVDUtils,
		}
	})

	context("Calls the UpdateTrackedDependencies method", func() {
		context("succeed", func() {
			it.Before(func() {
				fakeClient := &mongo.Client{}
				fakeCtx := contextPkg.TODO()
				fakeCollection := &mongo.Collection{}

				fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
				fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

				fileDeps := []utils.DepList{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
					{
						Vendor:  "golang",
						Product: "go",
					},
				}

				trackedDeps := []utils.CVE{
					{
						Vendor:  "haxx",
						Product: "curl",
					},
					{
						Vendor:  "golang",
						Product: "go",
					},
				}

				fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)

				fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

				cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
					{
						Id:          "CVE-1",
						Description: "Testing CVE1",
						Severity:    "HIGH",
					},
					{
						Id:          "CVE-2",
						Description: "Testing CVE2",
						Severity:    "LOW",
					},
				})

				fakeNVDUtils.GetCVEsReturns(cves, nil)

				fakeMongoUtils.RemoveAllCVEsReturns(nil)
				fakeMongoUtils.CreateCVEReturns(nil)
				fakeMongoUtils.DisconnectMongoClientReturns(nil)
			})

			it("Updates the tracked dependencies", func() {
				addedDependencies, removedDependencies, err := main.UpdateTrackedDependencies(allUtils)
				require.NoError(err)

				assert.Equal(1, len(addedDependencies))
				assert.Equal(1, len(removedDependencies))

				assert.Equal("appdynamics_iq", addedDependencies[0])
				assert.Equal("curl", removedDependencies[0])
			})
		})

		context("fails", func() {
			context("getting mongo client", func() {
				it.Before(func() {
					fakeMongoUtils.GetMongoClientReturns(nil, nil, fmt.Errorf("client"))
				})

				it("return an error", func() {
					_, _, err := main.UpdateTrackedDependencies(allUtils)
					require.Error(err)

					assert.Error(err, "client")
				})
			})

			context("getting dependencies list", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)
					fakeCSVUtils.GetDependenciesListReturns(nil, fmt.Errorf("dependencies"))
				})

				it("return an error", func() {
					_, _, err := main.UpdateTrackedDependencies(allUtils)
					require.Error(err)

					assert.Error(err, "dependencies")
				})
			})

			context("getting unique dependencies", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					deps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(deps, nil)

					fakeMongoUtils.GetUniqueDependenciesReturns(nil, fmt.Errorf("unique-dependencies"))
				})

				it("return an error", func() {
					_, _, err := main.UpdateTrackedDependencies(allUtils)
					require.Error(err)

					assert.Error(err, "unique-dependencies")
				})
			})

			context("adding new dependencies to track", func() {
				context("getting cves", func() {
					it.Before(func() {
						fakeClient := &mongo.Client{}
						fakeCtx := contextPkg.TODO()
						fakeCollection := &mongo.Collection{}

						fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
						fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

						fileDeps := []utils.DepList{
							{
								Vendor:  "cisco",
								Product: "appdynamics_iq",
							},
							{
								Vendor:  "haxx",
								Product: "curl",
							},
						}

						trackedDeps := []utils.CVE{
							{
								Vendor:  "cisco",
								Product: "appdynamics_iq",
							},
						}

						fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)

						fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

						fakeNVDUtils.GetCVEsReturns(utils.NVDNistResponse{}, fmt.Errorf("add-dependency-get-cve"))
					})

					it("return an error", func() {
						_, _, err := main.UpdateTrackedDependencies(allUtils)
						require.Error(err)

						assert.Error(err, "add-dependency-get-cve")
					})
				})

				context("creating cves", func() {
					it.Before(func() {
						fakeClient := &mongo.Client{}
						fakeCtx := contextPkg.TODO()
						fakeCollection := &mongo.Collection{}

						fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
						fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

						fileDeps := []utils.DepList{
							{
								Vendor:  "cisco",
								Product: "appdynamics_iq",
							},
							{
								Vendor:  "haxx",
								Product: "curl",
							},
						}

						trackedDeps := []utils.CVE{
							{
								Vendor:  "cisco",
								Product: "appdynamics_iq",
							},
						}

						fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)

						fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

						cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
							{
								Id:          "CVE-1",
								Description: "Testing CVE1",
								Severity:    "HIGH",
							},
							{
								Id:          "CVE-2",
								Description: "Testing CVE2",
								Severity:    "LOW",
							},
						})

						fakeNVDUtils.GetCVEsReturns(cves, nil)

						fakeMongoUtils.CreateCVEReturns(fmt.Errorf("add-dependency-create-cve"))
					})

					it("return an error", func() {
						_, _, err := main.UpdateTrackedDependencies(allUtils)
						require.Error(err)

						assert.Error(err, "add-dependency-create-cve")
					})
				})
			})

			context("deleting dependencies from track", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					fileDeps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
					}

					trackedDeps := []utils.CVE{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(fileDeps, nil)

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)
					fakeMongoUtils.RemoveAllCVEsReturns(fmt.Errorf("remove-all-cves"))
				})

				it("return an error", func() {
					_, _, err := main.UpdateTrackedDependencies(allUtils)
					require.Error(err)

					assert.Error(err, "remove-all-cves")
				})
			})
		})
	})
}
