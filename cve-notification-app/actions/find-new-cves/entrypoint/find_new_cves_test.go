package main_test

import (
	contextPkg "context"
	"fmt"
	"github.com/rs/zerolog"
	"github.com/rzajac/zltest"
	"testing"
	"time"

	main "github.com/cloudfoundry/buildpacks-ci/cve-notification-app/actions/find-new-cves/entrypoint"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils/utilsfakes"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	"github.com/spf13/afero"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

func TestEntrypoint(t *testing.T) {
	spec.Run(t, "Entrypoint", testEntrypoint, spec.Report(report.Terminal{}))
}

func testEntrypoint(t *testing.T, context spec.G, it spec.S) {
	var (
		assert         = assertpkg.New(t)
		require        = requirepkg.New(t)
		allUtils       main.AllUtils
		fakeMongoUtils *utilsfakes.FakeMongoUtilsInterface
		fakeNVDUtils   *utilsfakes.FakeNVDNistUtilsInterface
		fakeSlackUtils *utilsfakes.FakeSlackUtilsInterface
		loggerMock     = zltest.New(t)
		logger         zerolog.Logger
	)

	it.Before(func() {
		fakeMongoUtils = &utilsfakes.FakeMongoUtilsInterface{}
		fakeNVDUtils = &utilsfakes.FakeNVDNistUtilsInterface{}
		fakeSlackUtils = &utilsfakes.FakeSlackUtilsInterface{}

		allUtils = main.AllUtils{
			MongoUtils:   fakeMongoUtils,
			NVDNistUtils: fakeNVDUtils,
			SlackUtils:   fakeSlackUtils,
			FileSystem:   afero.NewMemMapFs(),
		}

		logger = zerolog.New(loggerMock).With().Timestamp().Logger()
	})

	context("Calls the FindNewCVEs method", func() {
		context("succeed", func() {
			context("with new CVEs", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
							Score:       7.0,
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
							Score:       3.0,
						},
					})

					cves2 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-3",
							Description: "Testing CVE3",
							Severity:    "CRITICAL",
							Score:       10.0,
						},
						{
							Id:          "CVE-4",
							Description: "Testing CVE4",
							Severity:    "CRITICAL",
							Score:       10.0,
						},
					})

					fakeNVDUtils.GetCVEsReturnsOnCall(0, cves, nil)
					fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)

					fakeMongoUtils.CVEExistsReturnsOnCall(0, true, nil)
					fakeMongoUtils.CVEExistsReturnsOnCall(1, false, nil)
					fakeMongoUtils.CVEExistsReturnsOnCall(2, true, nil)
					fakeMongoUtils.CVEExistsReturnsOnCall(3, false, nil)

					fakeMongoUtils.CreateCVEReturns(nil)
					fakeMongoUtils.DisconnectMongoClientReturns(nil)

					fakeSlackUtils.SendNewCVENotificationReturns(nil)

					fakeMongoUtils.GetAllCVEsReturns([]utils.CVE{
						{
							ID:          primitive.NewObjectID(),
							CreatedAt:   time.Now(),
							UpdatedAt:   time.Now(),
							Vendor:      "haxx",
							Product:     "curl",
							Severity:    "",
							CVEId:       "",
							Description: "",
						},
						{
							ID:          primitive.NewObjectID(),
							CreatedAt:   time.Now(),
							UpdatedAt:   time.Now(),
							Vendor:      "haxx",
							Product:     "curl",
							Severity:    "",
							CVEId:       "",
							Description: "",
						},
						{
							ID:          primitive.NewObjectID(),
							CreatedAt:   time.Now(),
							UpdatedAt:   time.Now(),
							Vendor:      "golang",
							Product:     "go",
							Severity:    "",
							CVEId:       "",
							Description: "",
						},
						{
							ID:          primitive.NewObjectID(),
							CreatedAt:   time.Now(),
							UpdatedAt:   time.Now(),
							Vendor:      "golang",
							Product:     "go",
							Severity:    "",
							CVEId:       "",
							Description: "",
						},
					}, nil)
				})

				it("Finds new cves for the tracked dependencies", func() {

					newCve, err := main.FindNewCVEs(allUtils, "test.json", logger)
					require.NoError(err)

					assert.Equal(2, fakeMongoUtils.CreateCVECallCount())

					createdCve1, _, _ := fakeMongoUtils.CreateCVEArgsForCall(0)
					assert.Equal("haxx", createdCve1.Vendor)
					assert.Equal("curl", createdCve1.Product)
					assert.Equal("LOW", createdCve1.Severity)
					assert.Equal("CVE-2", createdCve1.CVEId)
					assert.Equal("Testing CVE2", createdCve1.Description)

					createdCve2, _, _ := fakeMongoUtils.CreateCVEArgsForCall(1)
					assert.Equal("golang", createdCve2.Vendor)
					assert.Equal("go", createdCve2.Product)
					assert.Equal("CRITICAL", createdCve2.Severity)
					assert.Equal("CVE-4", createdCve2.CVEId)
					assert.Equal("Testing CVE4", createdCve2.Description)

					assert.Equal(2, fakeSlackUtils.SendNewCVENotificationCallCount())

					product, id, description, severity, score := fakeSlackUtils.SendNewCVENotificationArgsForCall(0)
					assert.Equal("curl", product)
					assert.Equal("CVE-2", id)
					assert.Equal("Testing CVE2", description)
					assert.Equal("LOW", severity)
					assert.Equal(3.0, score)

					product2, id2, description2, severity2, score := fakeSlackUtils.SendNewCVENotificationArgsForCall(1)
					assert.Equal("go", product2)
					assert.Equal("CVE-4", id2)
					assert.Equal("Testing CVE4", description2)
					assert.Equal("CRITICAL", severity2)
					assert.Equal(10.0, score)

					assert.Equal(true, newCve)

					exists, err := afero.Exists(allUtils.FileSystem, "test.json")
					assert.NoError(err)

					assert.Equal(true, exists)
				})
			})

			context("without new CVEs", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					cves2 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-3",
							Description: "Testing CVE3",
							Severity:    "CRITICAL",
						},
						{
							Id:          "CVE-4",
							Description: "Testing CVE4",
							Severity:    "CRITICAL",
						},
					})

					fakeNVDUtils.GetCVEsReturnsOnCall(0, cves, nil)
					fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)

					fakeMongoUtils.CVEExistsReturnsOnCall(0, true, nil)
					fakeMongoUtils.CVEExistsReturnsOnCall(1, true, nil)
					fakeMongoUtils.CVEExistsReturnsOnCall(2, true, nil)
					fakeMongoUtils.CVEExistsReturnsOnCall(3, true, nil)

					fakeMongoUtils.CreateCVEReturns(nil)
					fakeMongoUtils.DisconnectMongoClientReturns(nil)

					fakeSlackUtils.SendNewCVENotificationReturns(nil)
				})

				it("Did not find new cves for the tracked dependencies", func() {

					newCve, err := main.FindNewCVEs(allUtils, "test.json", logger)
					require.NoError(err)

					assert.Equal(0, fakeMongoUtils.CreateCVECallCount())
					assert.Equal(0, fakeSlackUtils.SendNewCVENotificationCallCount())
					assert.Equal(false, newCve)
				})
			})
		})

		context("fails", func() {
			context("getting mongo client", func() {
				it.Before(func() {
					fakeMongoUtils.GetMongoClientReturns(nil, nil, fmt.Errorf("client"))
				})

				it("return an error", func() {
					_, err := main.FindNewCVEs(allUtils, "test.json", logger)
					require.Error(err)

					assert.Error(err, "client")
				})
			})

			context("getting unique dependencies", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)
					fakeMongoUtils.GetUniqueDependenciesReturns(nil, fmt.Errorf("unique-dependencies"))
				})

				it("return an error", func() {
					_, err := main.FindNewCVEs(allUtils, "test.json", logger)
					require.Error(err)

					assert.Error(err, "unique-dependencies")
				})
			})

			context("getting CVEs", func() {
				it.Before(func() {
					loggerMock.Reset()
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					fakeNVDUtils.GetCVEsReturns(utils.NVDNistResponse{}, fmt.Errorf("cves"))
				})

				it("logs warnings", func() {
					newCves, err := main.FindNewCVEs(allUtils, "test.json", logger)
					assert.False(newCves)
					assert.NoError(err)

					logEntries := loggerMock.Filter(zerolog.WarnLevel)

					logEntries.ExpLen(2)
					logEntries.ExpError("cves")
					logEntries.ExpMsg("Error getting CVEs for golang/go")
					logEntries.ExpMsg("Error getting CVEs for haxx/curl")
				})
			})

			context("finding CVE in database", func() {
				it.Before(func() {
					loggerMock.Reset()
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CVEExistsReturnsOnCall(1, false, fmt.Errorf("create-cve"))
				})

				it("logs warnings", func() {
					newCves, err := main.FindNewCVEs(allUtils, "test.json", logger)
					assert.True(newCves)
					assert.NoError(err)

					logEntries := loggerMock.Filter(zerolog.WarnLevel)

					logEntries.ExpLen(1)
					logEntries.ExpError("create-cve")
					logEntries.NotExpMsg("Error checking if CVE CVE-1 exists")
					logEntries.ExpMsg("Error checking if CVE CVE-2 exists")
				})
			})

			context("creating CVE in database", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CreateCVEReturnsOnCall(1, fmt.Errorf("create-cve"))
				})

				it("logs warnings", func() {
					newCves, err := main.FindNewCVEs(allUtils, "test.json", logger)
					assert.True(newCves)
					require.NoError(err)

					logEntries := loggerMock.Filter(zerolog.WarnLevel)

					logEntries.ExpLen(1)
					logEntries.ExpError("create-cve")
					logEntries.NotExpMsg("Error creating CVE CVE-1")
					logEntries.ExpMsg("Error creating CVE CVE-2")
				})
			})

			context("sending slack message", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CVEExistsReturns(false, nil)
					fakeMongoUtils.CreateCVEReturns(nil)

					fakeSlackUtils.SendNewCVENotificationReturnsOnCall(1, fmt.Errorf("slack-notification"))
				})

				it("return an error", func() {
					newCves, err := main.FindNewCVEs(allUtils, "test.json", logger)
					assert.True(newCves)
					require.NoError(err)

					logEntries := loggerMock.Filter(zerolog.WarnLevel)

					logEntries.ExpLen(1)
					logEntries.ExpError("slack-notification")
					logEntries.NotExpMsg("Error sending Slack notification for CVE CVE-1")
					logEntries.ExpMsg("Error sending Slack notification for CVE CVE-2")
				})
			})

			context("disconnecting mongo client", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					trackedDeps := []utils.CVE{
						{
							Vendor:  "haxx",
							Product: "curl",
						},
						{
							Vendor:  "golang",
							Product: "go",
						},
					}

					fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CVEExistsReturns(false, nil)
					fakeMongoUtils.CreateCVEReturns(nil)

					fakeSlackUtils.SendNewCVENotificationReturns(nil)

					fakeMongoUtils.DisconnectMongoClientReturns(fmt.Errorf("disconnect"))
				})

				it("return an error", func() {
					_, err := main.FindNewCVEs(allUtils, "test.json", logger)
					require.Error(err)

					assert.Error(err, "disconnect")
				})
			})

			context("generating CVEs json", func() {
				context("getting mongo client", func() {
					it.Before(func() {
						fakeClient := &mongo.Client{}
						fakeCtx := contextPkg.TODO()
						fakeCollection := &mongo.Collection{}

						fakeMongoUtils.GetMongoClientReturnsOnCall(0, fakeClient, fakeCtx, nil)
						fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

						trackedDeps := []utils.CVE{
							{
								Vendor:  "haxx",
								Product: "curl",
							},
							{
								Vendor:  "golang",
								Product: "go",
							},
						}

						fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

						cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
							{
								Id:          "CVE-1",
								Description: "Testing CVE1",
								Severity:    "HIGH",
							},
							{
								Id:          "CVE-2",
								Description: "Testing CVE2",
								Severity:    "LOW",
							},
						})

						fakeNVDUtils.GetCVEsReturns(cves, nil)

						fakeMongoUtils.CVEExistsReturns(false, nil)
						fakeMongoUtils.CreateCVEReturns(nil)

						fakeSlackUtils.SendNewCVENotificationReturns(nil)

						fakeMongoUtils.DisconnectMongoClientReturns(nil)
						fakeMongoUtils.GetMongoClientReturnsOnCall(1, nil, nil, fmt.Errorf("generate-json client"))
					})

					it("return an error", func() {
						_, err := main.FindNewCVEs(allUtils, "test.json", logger)
						require.Error(err)

						assert.Error(err, "generate-json client")
					})
				})

				context("getting all CVEs from database", func() {
					it.Before(func() {
						fakeClient := &mongo.Client{}
						fakeCtx := contextPkg.TODO()
						fakeCollection := &mongo.Collection{}

						fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
						fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

						trackedDeps := []utils.CVE{
							{
								Vendor:  "haxx",
								Product: "curl",
							},
							{
								Vendor:  "golang",
								Product: "go",
							},
						}

						fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

						cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
							{
								Id:          "CVE-1",
								Description: "Testing CVE1",
								Severity:    "HIGH",
							},
							{
								Id:          "CVE-2",
								Description: "Testing CVE2",
								Severity:    "LOW",
							},
						})

						fakeNVDUtils.GetCVEsReturns(cves, nil)

						fakeMongoUtils.CVEExistsReturns(false, nil)
						fakeMongoUtils.CreateCVEReturns(nil)

						fakeSlackUtils.SendNewCVENotificationReturns(nil)

						fakeMongoUtils.DisconnectMongoClientReturns(nil)

						fakeMongoUtils.GetAllCVEsReturns(nil, fmt.Errorf("generate-json all-deps"))

					})

					it("return an error", func() {
						_, err := main.FindNewCVEs(allUtils, "test.json", logger)
						require.Error(err)

						assert.Error(err, "generate-json client")
					})
				})

				context("disconnecting mongo client", func() {
					it.Before(func() {
						fakeClient := &mongo.Client{}
						fakeCtx := contextPkg.TODO()
						fakeCollection := &mongo.Collection{}

						fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
						fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

						trackedDeps := []utils.CVE{
							{
								Vendor:  "haxx",
								Product: "curl",
							},
							{
								Vendor:  "golang",
								Product: "go",
							},
						}

						fakeMongoUtils.GetUniqueDependenciesReturns(trackedDeps, nil)

						cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
							{
								Id:          "CVE-1",
								Description: "Testing CVE1",
								Severity:    "HIGH",
							},
							{
								Id:          "CVE-2",
								Description: "Testing CVE2",
								Severity:    "LOW",
							},
						})

						fakeNVDUtils.GetCVEsReturns(cves, nil)

						fakeMongoUtils.CVEExistsReturns(false, nil)
						fakeMongoUtils.CreateCVEReturns(nil)

						fakeSlackUtils.SendNewCVENotificationReturns(nil)

						fakeMongoUtils.DisconnectMongoClientReturnsOnCall(0, nil)

						fakeMongoUtils.GetAllCVEsReturns([]utils.CVE{}, nil)

						fakeMongoUtils.DisconnectMongoClientReturnsOnCall(1, fmt.Errorf("generate-json disconnect"))
					})

					it("return an error", func() {
						_, err := main.FindNewCVEs(allUtils, "test.json", logger)
						require.Error(err)

						assert.Error(err, "generate-json disconnect")
					})
				})
			})
		})
	})
}
