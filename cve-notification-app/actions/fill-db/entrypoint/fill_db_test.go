package main_test

import (
	"fmt"
	main "github.com/cloudfoundry/buildpacks-ci/cve-notification-app/actions/fill-db/entrypoint"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils/utilsfakes"
	"github.com/rs/zerolog"
	"github.com/rzajac/zltest"
	"github.com/sclevine/spec"
	"go.mongodb.org/mongo-driver/mongo"
	"testing"

	contextPkg "context"
	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
)

func TestEntrypoint(t *testing.T) {
	spec.Run(t, "Entrypoint", testEntrypoint, spec.Report(report.Terminal{}))
}

func testEntrypoint(t *testing.T, context spec.G, it spec.S) {
	var (
		assert         = assertpkg.New(t)
		require        = requirepkg.New(t)
		allUtils       main.AllUtils
		fakeMongoUtils *utilsfakes.FakeMongoUtilsInterface
		fakeCSVUtils   *utilsfakes.FakeCSVUtilsInterface
		fakeNVDUtils   *utilsfakes.FakeNVDNistUtilsInterface
		loggerMock     = zltest.New(t)
		logger         zerolog.Logger
	)

	it.Before(func() {
		fakeMongoUtils = &utilsfakes.FakeMongoUtilsInterface{}
		fakeCSVUtils = &utilsfakes.FakeCSVUtilsInterface{}
		fakeNVDUtils = &utilsfakes.FakeNVDNistUtilsInterface{}

		allUtils = main.AllUtils{
			MongoUtils:   fakeMongoUtils,
			CSVUtils:     fakeCSVUtils,
			NVDNistUtils: fakeNVDUtils,
		}

		logger = zerolog.New(loggerMock).With().Timestamp().Logger()
	})

	context("Calls the FillDatabase method", func() {
		context("succeed", func() {
			it.Before(func() {

				fakeClient := &mongo.Client{}
				fakeCtx := contextPkg.TODO()
				fakeCollection := &mongo.Collection{}

				fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
				fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

				deps := []utils.DepList{
					{
						Vendor:  "cisco",
						Product: "appdynamics_iq",
					},
					{
						Vendor:  "haxx",
						Product: "curl",
					},
				}

				fakeCSVUtils.GetDependenciesListReturns(deps, nil)

				cves1 := utils.GenerateFakeCVE([]utils.FakeCVEParam{
					{
						Id:          "CVE-1",
						Description: "Testing CVE1",
						Severity:    "HIGH",
					},
					{
						Id:          "CVE-2",
						Description: "Testing CVE2",
						Severity:    "LOW",
					},
				})

				var cves2 []utils.NVDNistResponseCVEItem

				fakeNVDUtils.GetCVEsReturnsOnCall(0, cves1, nil)
				fakeNVDUtils.GetCVEsReturnsOnCall(1, cves2, nil)

				fakeMongoUtils.CreateCVEReturns(nil)
				fakeMongoUtils.DisconnectMongoClientReturns(nil)
			})

			it("Fills the database with all de dependencies CVEs", func() {

				err := main.FillDatabase(allUtils, logger)
				require.NoError(err)

				cve, _, _ := fakeMongoUtils.CreateCVEArgsForCall(0)
				assert.Equal("cisco", cve.Vendor)
				assert.Equal("appdynamics_iq", cve.Product)
				assert.Equal("HIGH", cve.Severity)
				assert.Equal("CVE-1", cve.CVEId)
				assert.Equal("Testing CVE1", cve.Description)

				cve2, _, _ := fakeMongoUtils.CreateCVEArgsForCall(1)
				assert.Equal("cisco", cve2.Vendor)
				assert.Equal("appdynamics_iq", cve2.Product)
				assert.Equal("LOW", cve2.Severity)
				assert.Equal("CVE-2", cve2.CVEId)
				assert.Equal("Testing CVE2", cve2.Description)

				assert.Equal(2, fakeMongoUtils.CreateCVECallCount())
			})
		})

		context("fails", func() {
			context("getting mongo client", func() {
				it.Before(func() {
					fakeMongoUtils.GetMongoClientReturns(nil, nil, fmt.Errorf("client"))
				})

				it("return an error", func() {
					err := main.FillDatabase(allUtils, logger)
					require.Error(err)

					assert.Error(err, "client")
				})
			})

			context("getting dependencies list", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)
					fakeCSVUtils.GetDependenciesListReturns(nil, fmt.Errorf("dependencies"))
				})

				it("return an error", func() {
					err := main.FillDatabase(allUtils, logger)
					require.Error(err)

					assert.Error(err, "dependencies")
				})
			})

			context("getting CVEs", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					deps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(deps, nil)

					fakeNVDUtils.GetCVEsReturns([]utils.NVDNistResponseCVEItem{}, fmt.Errorf("cves"))

				})

				it("return an error", func() {
					err := main.FillDatabase(allUtils, logger)
					require.Error(err)

					assert.Error(err, "cves")
				})
			})

			context("creating CVE in database", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					deps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(deps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CreateCVEReturns(fmt.Errorf("create-cve"))
				})

				it("return an error", func() {
					err := main.FillDatabase(allUtils, logger)
					require.Error(err)

					assert.Error(err, "create-cve")
				})
			})

			context("disconnecting mongo client", func() {
				it.Before(func() {
					fakeClient := &mongo.Client{}
					fakeCtx := contextPkg.TODO()
					fakeCollection := &mongo.Collection{}

					fakeMongoUtils.GetMongoClientReturns(fakeClient, fakeCtx, nil)
					fakeMongoUtils.GetMongoCollectionReturns(fakeCollection)

					deps := []utils.DepList{
						{
							Vendor:  "cisco",
							Product: "appdynamics_iq",
						},
						{
							Vendor:  "haxx",
							Product: "curl",
						},
					}

					fakeCSVUtils.GetDependenciesListReturns(deps, nil)

					cves := utils.GenerateFakeCVE([]utils.FakeCVEParam{
						{
							Id:          "CVE-1",
							Description: "Testing CVE1",
							Severity:    "HIGH",
						},
						{
							Id:          "CVE-2",
							Description: "Testing CVE2",
							Severity:    "LOW",
						},
					})

					fakeNVDUtils.GetCVEsReturns(cves, nil)

					fakeMongoUtils.CreateCVEReturns(nil)
					fakeMongoUtils.DisconnectMongoClientReturns(fmt.Errorf("disconnect"))
				})

				it("return an error", func() {
					err := main.FillDatabase(allUtils, logger)
					require.Error(err)

					assert.Error(err, "disconnect")
				})
			})
		})
	})

}
