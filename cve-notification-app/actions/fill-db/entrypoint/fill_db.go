package main

import (
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/jessevdk/go-flags"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"log"
	"time"
)

type AllUtils struct {
	MongoUtils   utils.MongoUtilsInterface
	CSVUtils     utils.CSVUtilsInterface
	NVDNistUtils utils.NVDNistUtilsInterface
}

func main() {
	var opts struct {
		DBUri   string `long:"db-uri" description:"Database URI" required:"true"`
		DepList string `long:"dep-list" description:"Path to dependencies.csv file" required:"true"`
	}

	_, err := flags.Parse(&opts)
	if err != nil {
		log.Fatal(err)
	}

	allUtils := AllUtils{
		utils.NewMongoUtils(opts.DBUri),
		utils.NewCSVUtils(opts.DepList),
		utils.NewNVDNistUtils(),
	}

	err = FillDatabase(allUtils)
	if err != nil {
		log.Fatal(err)
	}
}

func FillDatabase(allUtils AllUtils) error {
	mongoClient, ctx, err := allUtils.MongoUtils.GetMongoClient()
	if err != nil {
		return err
	}

	cveCollection := allUtils.MongoUtils.GetMongoCollection(*mongoClient, "buildpacks", "cves")

	dependencies, err := allUtils.CSVUtils.GetDependenciesList()
	if err != nil {
		return err
	}

	for _, dependency := range dependencies {
		cves, err := allUtils.NVDNistUtils.GetCVEs(dependency.Vendor, dependency.Product)
		if err != nil {
			return err
		}

		for _, result := range cves.Result.CVEItems {
			cve := utils.CVE{
				ID:          primitive.NewObjectID(),
				CreatedAt:   time.Now(),
				UpdatedAt:   time.Now(),
				Vendor:      dependency.Vendor,
				Product:     dependency.Product,
				Severity:    result.Impact.BaseMetricV3.CvssV3.BaseSeverity,
				CVEId:       result.Cve.CVEDataMeta.ID,
				Description: result.Cve.Description.DescriptionData[0].Value,
			}

			err := allUtils.MongoUtils.CreateCVE(&cve, ctx, cveCollection)
			if err != nil {
				return err
			}
		}
	}

	err = allUtils.MongoUtils.DisconnectMongoClient(mongoClient, ctx)
	if err != nil {
		return err
	}

	return nil
}
