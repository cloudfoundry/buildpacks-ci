package utils_test

import (
	context2 "context"
	"fmt"
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
	"github.com/tryvium-travels/memongo"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"testing"
	"time"
)

func TestMongoUtils(t *testing.T) {
	spec.Run(t, "Mongo Utils", testMongoUtils, spec.Report(report.Terminal{}))
}

func testMongoUtils(t *testing.T, context spec.G, it spec.S) {
	var (
		assert          = assertpkg.New(t)
		require         = requirepkg.New(t)
		mongoUtils      utils.MongoUtils
		mongoServer     *memongo.Server
		mClient         *mongo.Client
		ctx             context2.Context
		mongoCollection *mongo.Collection
		err             error
	)

	it.Before(func() {
		mongoServer, err = memongo.Start("4.0.5")
		require.NoError(err)
	})

	it.After(func() {
		mongoServer.Stop()
	})
	context("Calls the GetMongoClient method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils(mongoServer.URI())
			})

			it("gets the mongo.Client object and it's ready to perform any operation", func() {
				mClient, ctx, err = mongoUtils.GetMongoClient()
				require.NoError(err)

				err = mClient.Ping(ctx, nil)
				require.NoError(err)
			})
		})

		context("fails", func() {
			context("creating mongo client", func() {
				it.Before(func() {
					mongoUtils = utils.MongoUtils{
						DbUri: "wrong-uri",
					}
				})

				it("returns an error", func() {
					_, _, err = mongoUtils.GetMongoClient()
					require.Error(err)

					assert.EqualError(err, "error creating new mongo client\nerror parsing uri: scheme must be \"mongodb\" or \"mongodb+srv\"")
				})
			})
		})
	})

	context("Calls the GetMongoCollection method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils(mongoServer.URI())

				mClient, _, err = mongoUtils.GetMongoClient()
				require.NoError(err)
			})

			it("gets the mongo.collection object", func() {
				mongoCollection = mongoUtils.GetMongoCollection(*mClient, "testDb", "test_collection")
				assert.Equal("testDb", mongoCollection.Database().Name())
			})
		})
	})

	context("Calls the DisconnectMongoClient method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils(mongoServer.URI())

				mClient, ctx, err = mongoUtils.GetMongoClient()
				require.NoError(err)
			})

			it("disconnects the mongo client", func() {
				err = mongoUtils.DisconnectMongoClient(mClient, ctx)
				require.NoError(err)

				err = mClient.Ping(ctx, nil)
				require.Error(err)

				assert.EqualError(err, "client is disconnected")
			})
		})
	})

	context("Calls the CreateCVE method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils(mongoServer.URI())

				mClient, ctx, err = mongoUtils.GetMongoClient()
				require.NoError(err)

				mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-create-cve", "test_collection")
			})

			it("creates a new CVE in the database", func() {
				cve := utils.CVE{
					ID:          primitive.NewObjectID(),
					CreatedAt:   time.Now(),
					UpdatedAt:   time.Now(),
					Vendor:      "TEST",
					Product:     "TEST",
					Severity:    "TEST",
					CVEId:       "TEST",
					Description: "TEST",
				}

				err = mongoUtils.CreateCVE(&cve, ctx, mongoCollection)
				require.NoError(err)
			})
		})

		context("fails", func() {
			context("creating CVE", func() {
				it.Before(func() {
					mongoUtils = utils.MongoUtils{
						DbUri:       mongoServer.URI(),
						CtxDuration: 1 * time.Microsecond,
					}

					mClient, ctx, err = mongoUtils.GetMongoClient()
					require.NoError(err)

					mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-create-cve", "test_collection")
				})

				it("return an error when the ctx timeout is exceeded", func() {
					cve := utils.CVE{
						ID:          primitive.NewObjectID(),
						CreatedAt:   time.Now(),
						UpdatedAt:   time.Now(),
						Vendor:      "TEST",
						Product:     "TEST",
						Severity:    "TEST",
						CVEId:       "TEST",
						Description: "TEST",
					}

					err = mongoUtils.CreateCVE(&cve, ctx, mongoCollection)
					require.Error(err)

					assert.Contains(err.Error(), fmt.Sprintf("error creating a CVE\nserver selection error: context deadline exceeded"))
				})
			})
		})
	})

	context("Calls the GetUniqueDependencies method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils(mongoServer.URI())

				mClient, ctx, err = mongoUtils.GetMongoClient()
				require.NoError(err)

				mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-create-cve", "test_collection")
				cves := []utils.CVE{
					{
						ID:          primitive.NewObjectID(),
						CreatedAt:   time.Now(),
						UpdatedAt:   time.Now(),
						Vendor:      "haxx",
						Product:     "curl",
						Severity:    "CRITICAL",
						CVEId:       "TEST",
						Description: "TEST",
					},
					{
						ID:          primitive.NewObjectID(),
						CreatedAt:   time.Now(),
						UpdatedAt:   time.Now(),
						Vendor:      "golang",
						Product:     "go",
						Severity:    "HIGH",
						CVEId:       "TEST2",
						Description: "TEST2",
					},
					{
						ID:          primitive.NewObjectID(),
						CreatedAt:   time.Now(),
						UpdatedAt:   time.Now(),
						Vendor:      "haxx",
						Product:     "curl",
						Severity:    "LOW",
						CVEId:       "TEST3",
						Description: "TEST3",
					},
				}

				for _, cve := range cves {
					err = mongoUtils.CreateCVE(&cve, ctx, mongoCollection)
					require.NoError(err)
				}
			})

			it("gets the unique dependencies (product) stored in the database", func() {
				uniqueDeps, err := mongoUtils.GetUniqueDependencies(ctx, mongoCollection)
				assert.NoError(err)

				assert.Equal(2, len(uniqueDeps))
				assert.Equal("curl", uniqueDeps[0].Product)
				assert.Equal("go", uniqueDeps[1].Product)
			})
		})

		context("fails", func() {
			context("getting unique dependencies with ctx timeout is exceeded", func() {
				it.Before(func() {
					mongoUtils = utils.MongoUtils{
						DbUri:       mongoServer.URI(),
						CtxDuration: 1 * time.Nanosecond,
					}

					mClient, ctx, err = mongoUtils.GetMongoClient()
					require.NoError(err)

					mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-create-cve", "test_collection_fail")
				})

				it("return an error", func() {
					_, err = mongoUtils.GetUniqueDependencies(ctx, mongoCollection)
					assert.Error(err)

					assert.Contains(err.Error(), fmt.Sprintf("error getting unique CVEs query result\nserver selection error: context deadline exceeded"))
				})
			})
		})
	})

	context("Calls the FindCVE method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils(mongoServer.URI())

				mClient, ctx, err = mongoUtils.GetMongoClient()
				require.NoError(err)

				mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-find-cve", "test_collection")

				cve := utils.CVE{
					ID:          primitive.NewObjectID(),
					CreatedAt:   time.Now(),
					UpdatedAt:   time.Now(),
					Vendor:      "golang",
					Product:     "go",
					Severity:    "LOW",
					CVEId:       "TEST",
					Description: "TEST",
				}

				err = mongoUtils.CreateCVE(&cve, ctx, mongoCollection)
				require.NoError(err)
			})

			it("find and return the CVE from the database", func() {
				cve, err := mongoUtils.FindCVE("go", ctx, mongoCollection)
				require.NoError(err)

				assert.Equal("golang", cve.Vendor)
				assert.Equal("go", cve.Product)
			})
		})

		context("fails", func() {
			context("decoding the CVE from the database", func() {
				it.Before(func() {
					mongoUtils = utils.NewMongoUtils(mongoServer.URI())

					mClient, ctx, err = mongoUtils.GetMongoClient()
					require.NoError(err)

					mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-find-cve", "test_collection_fails")
				})

				it("return an error", func() {
					_, err := mongoUtils.FindCVE("missing-product", ctx, mongoCollection)
					require.Error(err)

					assert.EqualError(err, "mongo: no documents in result")
				})
			})
		})
	})

	context("Calls the RemoveAllCVEs method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils(mongoServer.URI())

				mClient, ctx, err = mongoUtils.GetMongoClient()
				require.NoError(err)

				mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-remove-cves", "test_collection")
				cves := []utils.CVE{
					{
						ID:          primitive.NewObjectID(),
						CreatedAt:   time.Now(),
						UpdatedAt:   time.Now(),
						Vendor:      "haxx",
						Product:     "curl",
						Severity:    "CRITICAL",
						CVEId:       "TEST",
						Description: "TEST",
					},
					{
						ID:          primitive.NewObjectID(),
						CreatedAt:   time.Now(),
						UpdatedAt:   time.Now(),
						Vendor:      "golang",
						Product:     "go",
						Severity:    "HIGH",
						CVEId:       "TEST2",
						Description: "TEST2",
					},
					{
						ID:          primitive.NewObjectID(),
						CreatedAt:   time.Now(),
						UpdatedAt:   time.Now(),
						Vendor:      "haxx",
						Product:     "curl",
						Severity:    "LOW",
						CVEId:       "TEST3",
						Description: "TEST3",
					},
				}

				for _, cve := range cves {
					err = mongoUtils.CreateCVE(&cve, ctx, mongoCollection)
					require.NoError(err)
				}
			})

			it("removes all CVEs of the given product", func() {
				err = mongoUtils.RemoveAllCVEs("curl", ctx, mongoCollection)
				require.NoError(err)

				_, err := mongoUtils.FindCVE("curl", ctx, mongoCollection)
				require.Error(err)

				assert.EqualError(err, "mongo: no documents in result")
			})
		})

		context("fails", func() {
			context("removing all CVEs of the given product when the context is exceeded", func() {
				it.Before(func() {
					mongoUtils = utils.MongoUtils{
						DbUri:       mongoServer.URI(),
						CtxDuration: 1 * time.Nanosecond,
					}

					mClient, ctx, err = mongoUtils.GetMongoClient()
					require.NoError(err)

					mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-remove-cves", "test_collection_fails")
				})

				it("return an error", func() {
					err = mongoUtils.RemoveAllCVEs("curl", ctx, mongoCollection)
					require.Error(err)

					assert.Contains(err.Error(), "server selection error: context deadline exceeded")
				})
			})
		})
	})

	context("Calls the CVEExists method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils(mongoServer.URI())

				mClient, ctx, err = mongoUtils.GetMongoClient()
				require.NoError(err)

				mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-find-cve", "test_collection")

				cve := utils.CVE{
					ID:          primitive.NewObjectID(),
					CreatedAt:   time.Now(),
					UpdatedAt:   time.Now(),
					Vendor:      "golang",
					Product:     "go",
					Severity:    "LOW",
					CVEId:       "CVE-1",
					Description: "Test Description",
				}

				err = mongoUtils.CreateCVE(&cve, ctx, mongoCollection)
				require.NoError(err)
			})

			it("checks if the CVE with the given ID exists", func() {
				exists, err := mongoUtils.CVEExists("CVE-1", ctx, mongoCollection)
				require.NoError(err)

				assert.Equal(true, exists)

				exists, err = mongoUtils.CVEExists("CVE-2", ctx, mongoCollection)
				require.NoError(err)

				assert.Equal(false, exists)
			})
		})

		context("fails", func() {
			context("checking if the CVE with the given ID exists when the context is exceeded", func() {
				it.Before(func() {
					mongoUtils = utils.MongoUtils{
						DbUri:       mongoServer.URI(),
						CtxDuration: 1 * time.Nanosecond,
					}

					mClient, ctx, err = mongoUtils.GetMongoClient()
					require.NoError(err)

					mongoCollection = mongoUtils.GetMongoCollection(*mClient, "test-remove-cves", "test_collection_fails")
				})

				it("", func() {
					_, err := mongoUtils.CVEExists("CVE-1", ctx, mongoCollection)
					require.Error(err)

					assert.Contains(err.Error(), "server selection error: context deadline exceeded")
				})
			})
		})
	})

	context("Calls the NewMongoUtils method", func() {
		context("succeed", func() {
			it.Before(func() {
				mongoUtils = utils.NewMongoUtils("some-uri")
			})

			it("returns a new MongoUtils object with provided database URI", func() {
				assert.Equal(mongoUtils.DbUri, "some-uri")
			})
		})
	})

}
