// Code generated by counterfeiter. DO NOT EDIT.
package utilsfakes

import (
	"sync"

	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
)

type FakeCSVUtilsInterface struct {
	GetDependenciesListStub        func() ([]utils.DepList, error)
	getDependenciesListMutex       sync.RWMutex
	getDependenciesListArgsForCall []struct {
	}
	getDependenciesListReturns struct {
		result1 []utils.DepList
		result2 error
	}
	getDependenciesListReturnsOnCall map[int]struct {
		result1 []utils.DepList
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCSVUtilsInterface) GetDependenciesList() ([]utils.DepList, error) {
	fake.getDependenciesListMutex.Lock()
	ret, specificReturn := fake.getDependenciesListReturnsOnCall[len(fake.getDependenciesListArgsForCall)]
	fake.getDependenciesListArgsForCall = append(fake.getDependenciesListArgsForCall, struct {
	}{})
	stub := fake.GetDependenciesListStub
	fakeReturns := fake.getDependenciesListReturns
	fake.recordInvocation("GetDependenciesList", []interface{}{})
	fake.getDependenciesListMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCSVUtilsInterface) GetDependenciesListCallCount() int {
	fake.getDependenciesListMutex.RLock()
	defer fake.getDependenciesListMutex.RUnlock()
	return len(fake.getDependenciesListArgsForCall)
}

func (fake *FakeCSVUtilsInterface) GetDependenciesListCalls(stub func() ([]utils.DepList, error)) {
	fake.getDependenciesListMutex.Lock()
	defer fake.getDependenciesListMutex.Unlock()
	fake.GetDependenciesListStub = stub
}

func (fake *FakeCSVUtilsInterface) GetDependenciesListReturns(result1 []utils.DepList, result2 error) {
	fake.getDependenciesListMutex.Lock()
	defer fake.getDependenciesListMutex.Unlock()
	fake.GetDependenciesListStub = nil
	fake.getDependenciesListReturns = struct {
		result1 []utils.DepList
		result2 error
	}{result1, result2}
}

func (fake *FakeCSVUtilsInterface) GetDependenciesListReturnsOnCall(i int, result1 []utils.DepList, result2 error) {
	fake.getDependenciesListMutex.Lock()
	defer fake.getDependenciesListMutex.Unlock()
	fake.GetDependenciesListStub = nil
	if fake.getDependenciesListReturnsOnCall == nil {
		fake.getDependenciesListReturnsOnCall = make(map[int]struct {
			result1 []utils.DepList
			result2 error
		})
	}
	fake.getDependenciesListReturnsOnCall[i] = struct {
		result1 []utils.DepList
		result2 error
	}{result1, result2}
}

func (fake *FakeCSVUtilsInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDependenciesListMutex.RLock()
	defer fake.getDependenciesListMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCSVUtilsInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.CSVUtilsInterface = new(FakeCSVUtilsInterface)
