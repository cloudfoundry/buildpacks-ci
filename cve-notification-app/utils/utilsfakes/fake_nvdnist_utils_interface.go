// Code generated by counterfeiter. DO NOT EDIT.
package utilsfakes

import (
	"sync"

	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
)

type FakeNVDNistUtilsInterface struct {
	GetCVEsStub        func(string, string) (utils.NVDNistResponse, error)
	getCVEsMutex       sync.RWMutex
	getCVEsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getCVEsReturns struct {
		result1 utils.NVDNistResponse
		result2 error
	}
	getCVEsReturnsOnCall map[int]struct {
		result1 utils.NVDNistResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNVDNistUtilsInterface) GetCVEs(arg1 string, arg2 string) (utils.NVDNistResponse, error) {
	fake.getCVEsMutex.Lock()
	ret, specificReturn := fake.getCVEsReturnsOnCall[len(fake.getCVEsArgsForCall)]
	fake.getCVEsArgsForCall = append(fake.getCVEsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetCVEsStub
	fakeReturns := fake.getCVEsReturns
	fake.recordInvocation("GetCVEs", []interface{}{arg1, arg2})
	fake.getCVEsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNVDNistUtilsInterface) GetCVEsCallCount() int {
	fake.getCVEsMutex.RLock()
	defer fake.getCVEsMutex.RUnlock()
	return len(fake.getCVEsArgsForCall)
}

func (fake *FakeNVDNistUtilsInterface) GetCVEsCalls(stub func(string, string) (utils.NVDNistResponse, error)) {
	fake.getCVEsMutex.Lock()
	defer fake.getCVEsMutex.Unlock()
	fake.GetCVEsStub = stub
}

func (fake *FakeNVDNistUtilsInterface) GetCVEsArgsForCall(i int) (string, string) {
	fake.getCVEsMutex.RLock()
	defer fake.getCVEsMutex.RUnlock()
	argsForCall := fake.getCVEsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNVDNistUtilsInterface) GetCVEsReturns(result1 utils.NVDNistResponse, result2 error) {
	fake.getCVEsMutex.Lock()
	defer fake.getCVEsMutex.Unlock()
	fake.GetCVEsStub = nil
	fake.getCVEsReturns = struct {
		result1 utils.NVDNistResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNVDNistUtilsInterface) GetCVEsReturnsOnCall(i int, result1 utils.NVDNistResponse, result2 error) {
	fake.getCVEsMutex.Lock()
	defer fake.getCVEsMutex.Unlock()
	fake.GetCVEsStub = nil
	if fake.getCVEsReturnsOnCall == nil {
		fake.getCVEsReturnsOnCall = make(map[int]struct {
			result1 utils.NVDNistResponse
			result2 error
		})
	}
	fake.getCVEsReturnsOnCall[i] = struct {
		result1 utils.NVDNistResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeNVDNistUtilsInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCVEsMutex.RLock()
	defer fake.getCVEsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNVDNistUtilsInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.NVDNistUtilsInterface = new(FakeNVDNistUtilsInterface)
