package utils

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

type NVDNistResponseResult struct {
	CVEItems []NVDNistResponseCVEItem `json:"CVE_Items"`
}

type NVDNistResponseCve struct {
	CVEDataMeta struct {
		ID string `json:"ID"`
	} `json:"CVE_data_meta"`
	Description struct {
		DescriptionData []struct {
			Value string `json:"value"`
		} `json:"description_data"`
	} `json:"description"`
}

type NVDNistResponseImpact struct {
	BaseMetricV3 struct {
		CvssV3 struct {
			BaseSeverity string `json:"baseSeverity"`
		} `json:"cvssV3"`
	} `json:"baseMetricV3"`
}

type NVDNistResponseCVEItem struct {
	Cve    NVDNistResponseCve    `json:"cve"`
	Impact NVDNistResponseImpact `json:"impact"`
}

type NVDNistResponse struct {
	Result NVDNistResponseResult `json:"result"`
}

type FakeCVEParam struct {
	Id          string
	Description string
	Severity    string
}

//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 . NVDNistUtilsInterface
type NVDNistUtilsInterface interface {
	GetCVEs(vendor, product string) (NVDNistResponse, error)
}

type NVDNistUtils struct {
	BaseUrl string
	Client  http.Client
}

func NewNVDNistUtils() NVDNistUtils {
	return NVDNistUtils{
		BaseUrl: "https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString=cpe:2.3:a",
		Client: http.Client{
			Timeout: time.Second * 15,
		},
	}
}

func (nvd NVDNistUtils) GetCVEs(vendor, product string) (NVDNistResponse, error) {
	url := fmt.Sprintf("%s:%s:%s", nvd.BaseUrl, vendor, product)

	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return NVDNistResponse{}, fmt.Errorf("error creating NVD Nist API request\n%w", err)
	}

	req.Header.Set("User-Agent", "cve-notification-app")
	res, err := nvd.Client.Do(req)
	if err != nil {
		//It is assumed that a timeout greater than 15 seconds is generated by a 503 Service Unavailable from the NVD Nist API.
		if strings.Contains(err.Error(), "Client.Timeout exceeded") {
			return NVDNistResponse{
				Result: NVDNistResponseResult{CVEItems: []NVDNistResponseCVEItem{}},
			}, nil
		}
	}

	if res.StatusCode == http.StatusServiceUnavailable {
		return NVDNistResponse{
			Result: NVDNistResponseResult{CVEItems: []NVDNistResponseCVEItem{}},
		}, nil
	}

	if res.Body != nil {
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				return
			}
		}(res.Body)
	}

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return NVDNistResponse{}, fmt.Errorf("error reading NVD Nist API request\n%w", err)
	}

	nvdNistCVEResponse := NVDNistResponse{}
	err = json.Unmarshal(body, &nvdNistCVEResponse)
	if err != nil {
		return NVDNistResponse{}, fmt.Errorf("error unmarshaling %s NVD Nist API request\n%w", product, err)
	}

	return nvdNistCVEResponse, nil
}

func GenerateFakeCVE(params []FakeCVEParam) NVDNistResponse {

	var cveItems []NVDNistResponseCVEItem

	for _, elem := range params {

		item := NVDNistResponseCVEItem{
			Cve: NVDNistResponseCve{
				CVEDataMeta: struct {
					ID string `json:"ID"`
				}{
					ID: elem.Id,
				},
				Description: struct {
					DescriptionData []struct {
						Value string `json:"value"`
					} `json:"description_data"`
				}{
					DescriptionData: []struct {
						Value string `json:"value"`
					}{
						{
							Value: elem.Description,
						},
					},
				},
			},
			Impact: NVDNistResponseImpact{
				BaseMetricV3: struct {
					CvssV3 struct {
						BaseSeverity string `json:"baseSeverity"`
					} `json:"cvssV3"`
				}{
					CvssV3: struct {
						BaseSeverity string `json:"baseSeverity"`
					}{
						BaseSeverity: elem.Severity,
					},
				},
			},
		}

		cveItems = append(cveItems, item)
	}

	cves := NVDNistResponse{
		Result: NVDNistResponseResult{
			CVEItems: cveItems,
		},
	}

	return cves
}
