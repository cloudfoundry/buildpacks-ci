package utils

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

type NVDNistResponse struct {
	ResultsPerPage  int                      `json:"resultsPerPage"`
	StartIndex      int                      `json:"startIndex"`
	TotalResults    int                      `json:"totalResults"`
	Format          string                   `json:"format"`
	Version         string                   `json:"version"`
	Timestamp       string                   `json:"timestamp"`
	Vulnerabilities []NVDNistResponseCVEItem `json:"vulnerabilities"`
}

type NVDNistResponseCVEItem struct {
	CVE NVDNistResponseCVE `json:"cve"`
}

type NVDNistResponseCVE struct {
	Id               string `json:"id"`
	SourceIdentifier string `json:"sourceIdentifier"`
	Published        string `json:"published"`
	LastModified     string `json:"lastModified"`
	VulnStatus       string `json:"vulnStatus"`
	Descriptions     []struct {
		Lang  string `json:"lang"`
		Value string `json:"value"`
	} `json:"descriptions"`

	Metrics struct {
		CvssMetricV2 []NVDNistResponseCVEMetrics `json:"cvssMetricV2,omitempty"`
		CvssMetricV3 []NVDNistResponseCVEMetrics `json:"cvssMetricV31,omitempty"`
	} `json:"metrics"`
}

type NVDNistResponseCVEMetrics struct {
	CvssData struct {
		BaseScore    float64 `json:"baseScore"`
		BaseSeverity string  `json:"baseSeverity"`
	} `json:"cvssData"`
}

type FakeCVEParam struct {
	Id          string
	Description string
	Severity    string
	Score       float64
}

//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 . NVDNistUtilsInterface
type NVDNistUtilsInterface interface {
	GetCVEs(vendor, product string) (NVDNistResponse, error)
}

type NVDNistUtils struct {
	ResultsPerPage int
	BaseUrl        string
	Client         http.Client
	ApiKey         string
}

func NewNVDNistUtils(nvdNistApiKey string) NVDNistUtils {
	return NVDNistUtils{
		ResultsPerPage: 2000,
		BaseUrl:        "https://services.nvd.nist.gov/rest/json/cves/2.0?virtualMatchString=cpe:2.3:a",
		Client: http.Client{
			Timeout: time.Minute * 1,
		},
		ApiKey: nvdNistApiKey,
	}
}

func (nvd NVDNistUtils) GetCVEs(vendor, product string) (NVDNistResponse, error) {
	url := fmt.Sprintf("%s:%s:%s&resultsPerPage=%d", nvd.BaseUrl, vendor, product, nvd.ResultsPerPage)

	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		return NVDNistResponse{}, fmt.Errorf("error creating NVD Nist API request\n%w", err)
	}
	req.Header.Set("User-Agent", "cve-notification-app")
	req.Header.Add("apiKey", nvd.ApiKey)

	retries := 5
	var resp *http.Response
	var errResp error
	for retries > 0 {
		resp, errResp = nvd.Client.Do(req)
		if errResp != nil || resp.StatusCode != http.StatusOK {
			retries--
			continue
		}
		break
	}

	if errResp != nil {
		//It is assumed that a timeout greater than 15 seconds is generated by a 503 Service Unavailable from the NVD Nist API.
		if strings.Contains(errResp.Error(), "Client.Timeout exceeded") {
			return NVDNistResponse{}, fmt.Errorf("NVD Nist API request timeout exceeded\n%w", errResp)
		}
	}

	if resp.StatusCode != http.StatusOK {
		return NVDNistResponse{}, fmt.Errorf("NVD Nist API request failed with status code %d", resp.StatusCode)
	}

	if resp.Body != nil {
		defer func(Body io.ReadCloser) {
			err := Body.Close()
			if err != nil {
				return
			}
		}(resp.Body)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return NVDNistResponse{}, fmt.Errorf("error reading NVD Nist API request\n%w", err)
	}

	nvdNistCVEResponse := NVDNistResponse{}
	err = json.Unmarshal(body, &nvdNistCVEResponse)
	if err != nil {
		return NVDNistResponse{}, fmt.Errorf("error unmarshaling %s NVD Nist API request\n%w", product, err)
	}

	return nvdNistCVEResponse, nil
}

func GenerateFakeCVE(params []FakeCVEParam) NVDNistResponse {

	var cveItems []NVDNistResponseCVEItem

	for _, elem := range params {

		item := NVDNistResponseCVEItem{
			CVE: NVDNistResponseCVE{
				Id:               elem.Id,
				SourceIdentifier: "",
				Published:        "",
				LastModified:     "",
				VulnStatus:       "",
				Descriptions: []struct {
					Lang  string `json:"lang"`
					Value string `json:"value"`
				}{
					{
						Lang:  "en",
						Value: elem.Description,
					},
				},
				Metrics: struct {
					CvssMetricV2 []NVDNistResponseCVEMetrics `json:"cvssMetricV2,omitempty"`
					CvssMetricV3 []NVDNistResponseCVEMetrics `json:"cvssMetricV31,omitempty"`
				}{
					CvssMetricV2: []NVDNistResponseCVEMetrics{
						{
							CvssData: struct {
								BaseScore    float64 `json:"baseScore"`
								BaseSeverity string  `json:"baseSeverity"`
							}{
								BaseScore:    elem.Score,
								BaseSeverity: elem.Severity,
							},
						},
					},
				},
			},
		}

		cveItems = append(cveItems, item)
	}

	cves := NVDNistResponse{
		ResultsPerPage:  0,
		StartIndex:      0,
		TotalResults:    0,
		Format:          "",
		Version:         "",
		Timestamp:       "",
		Vulnerabilities: cveItems,
	}

	return cves
}
