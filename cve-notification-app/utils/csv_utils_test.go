package utils_test

import (
	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	"github.com/spf13/afero"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
	"testing"
)

func TestCSVUtils(t *testing.T) {
	spec.Run(t, "CSV Utils", testCSVUtils, spec.Report(report.Terminal{}))
}

func testCSVUtils(t *testing.T, context spec.G, it spec.S) {
	var (
		assert   = assertpkg.New(t)
		require  = requirepkg.New(t)
		csvUtils utils.CSVUtils
	)

	context("Calls the GetDependenciesList method", func() {
		context("succeed", func() {
			it.Before(func() {
				csvUtils = utils.CSVUtils{
					FilePath:   "some-filepath.csv",
					FileSystem: afero.NewMemMapFs(),
				}

				afero.WriteFile(csvUtils.FileSystem, csvUtils.FilePath, []byte(`Dependency,Source,Example URI,Generation,Vendor,Product
test1,source1,uri1,3,haxx,curl
test2,source2,uri2,"2,3",golang,go`), 0755)
			})

			it("read the CSV file and returns a list of dependencies", func() {
				depList, err := csvUtils.GetDependenciesList()
				require.NoError(err)

				assert.Equal(2, len(depList))

				firstDep := depList[0]
				assert.Equal("curl", firstDep.Product)
				assert.Equal("haxx", firstDep.Vendor)

				secondDep := depList[1]
				assert.Equal("go", secondDep.Product)
				assert.Equal("golang", secondDep.Vendor)
			})
		})

		context("fails", func() {
			context("opening the csv file", func() {
				it.Before(func() {
					csvUtils = utils.CSVUtils{
						FilePath:   "some-filepath.csv",
						FileSystem: afero.NewMemMapFs(),
					}
				})

				it("returns a file doesn't exist error", func() {
					_, err := csvUtils.GetDependenciesList()
					require.Error(err)

					assert.EqualError(err, "open some-filepath.csv: file does not exist")
				})
			})

			context("reading the csv headers line", func() {
				it.Before(func() {
					csvUtils = utils.CSVUtils{
						FilePath:   "some-filepath.csv",
						FileSystem: afero.NewMemMapFs(),
					}

					afero.WriteFile(csvUtils.FileSystem, csvUtils.FilePath, []byte(`a,b"`), 0755)
				})

				it("returns a parse error", func() {
					_, err := csvUtils.GetDependenciesList()
					require.Error(err)

					assert.EqualError(err, "parse error on line 1, column 3: bare \" in non-quoted-field")
				})
			})

			context("reading the csv lines", func() {
				it.Before(func() {
					csvUtils = utils.CSVUtils{
						FilePath:   "some-filepath.csv",
						FileSystem: afero.NewMemMapFs(),
					}

					afero.WriteFile(csvUtils.FileSystem, csvUtils.FilePath, []byte(`Dependency,Source,Example URI,Generation,Vendor,Product
test1,source1,uri1,3,haxx,curl
test2,source2,uri2,"2,3,golang,go`), 0755)
				})

				it("returns a parse error", func() {
					_, err := csvUtils.GetDependenciesList()
					require.Error(err)

					assert.EqualError(err, "record on line 3; parse error on line 4, column 0: extraneous or missing \" in quoted-field")
				})
			})
		})
	})

	context("Calls the NewCSVUtils method", func() {
		context("succeed", func() {
			it.Before(func() {
				csvUtils = utils.NewCSVUtils("provided-filepath")
			})

			it("returns a new CSVUtils object with provided filepath and default filesystem", func() {
				assert.Equal(csvUtils.FilePath, "provided-filepath")
				assert.Equal(csvUtils.FileSystem, afero.NewOsFs())
			})
		})
	})

}
