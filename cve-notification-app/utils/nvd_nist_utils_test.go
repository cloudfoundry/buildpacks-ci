package utils_test

import (
	"fmt"
	"github.com/rs/zerolog"
	"github.com/rzajac/zltest"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"

	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
)

func TestNvdNistUtils(t *testing.T) {
	spec.Run(t, "NVD Nist Utils", testNvdNistUtils, spec.Report(report.Terminal{}))
}

func testNvdNistUtils(t *testing.T, context spec.G, it spec.S) {
	var (
		assert     = assertpkg.New(t)
		require    = requirepkg.New(t)
		nvdUtils   utils.NVDNistUtils
		mockServer *httptest.Server
		loggerMock = zltest.New(t)
		logger     zerolog.Logger
	)

	logger = zerolog.New(loggerMock).With().Timestamp().Logger()

	context("Calls the GetCVEs method", func() {
		context("succeed", func() {
			it.Before(func() {
				mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					if strings.Contains(req.URL.RawQuery, "virtualMatchString=cpe:2.3:a:haxx:curl") {
						fmt.Fprint(w, `{
  "resultsPerPage": 1,
  "startIndex": 0,
  "totalResults": 5,
  "format": "NVD_CVE",
  "version": "2.0",
  "timestamp": "2022-10-27T20:12:34.217",
  "vulnerabilities": [
    {
      "cve": {
        "id": "TEST-CVE-1",
        "sourceIdentifier": "secalert@redhat.com",
        "published": "2014-10-31T14:55:02.687",
        "lastModified": "2019-07-16T12:21:06.373",
        "vulnStatus": "Analyzed",
        "descriptions": [
          {
            "lang": "en",
            "value": "Testing CVE1"
          }
        ],
        "metrics": {
          "cvssMetricV2": [
            {
              "cvssData": {
                "baseScore": 2.0,
                "baseSeverity": "LOW"
              }
            }
          ]
        }
      }
    },
	{
      "cve": {
        "id": "TEST-CVE-2",
        "sourceIdentifier": "secalert@redhat.com",
        "published": "2014-10-31T14:55:02.687",
        "lastModified": "2019-07-16T12:21:06.373",
        "vulnStatus": "Analyzed",
        "descriptions": [
          {
            "lang": "en",
            "value": "Testing CVE2"
          }
        ],
        "metrics": {
          "cvssMetricV2": [
            {
              "cvssData": {
                "baseScore": 5.0,
                "baseSeverity": "MEDIUM"
              }
            }
          ]
        }
      }
    }
  ]
}`)
					}
				}))

				nvdUtils = utils.NVDNistUtils{
					ResultsPerPage: 100,
					BaseUrl:        fmt.Sprintf("%s/rest/json/cves/2.0?virtualMatchString=cpe:2.3:a", mockServer.URL),
					Client: http.Client{
						Timeout: time.Second * 5,
					},
				}
			})

			it("calls the NVD Nist API and retrieves the CVEs for the vendor/product", func() {
				cves, err := nvdUtils.GetCVEs("haxx", "curl", logger)
				require.NoError(err)

				assert.Equal(len(cves), 2)
			})
		})

		context("fails", func() {
			context("with timeout", func() {
				it.Before(func() {
					mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
						time.Sleep(time.Second * 2)
					}))

					nvdUtils = utils.NVDNistUtils{
						BaseUrl: fmt.Sprintf("%s/rest/json/cves/2.0?virtualMatchString=cpe:2.3:a", mockServer.URL),
						Client: http.Client{
							Timeout: time.Second * 1,
						},
					}
				})

				it("return an error", func() {
					cves, err := nvdUtils.GetCVEs("haxx", "curl", logger)
					require.Error(err)

					assert.Equal(len(cves), 0)
					assert.Contains(err.Error(), "NVD Nist API request timeout exceeded")
				})
			})

			context("with 503 response", func() {
				it.Before(func() {
					mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
						w.WriteHeader(503)
					}))

					nvdUtils = utils.NVDNistUtils{
						BaseUrl: fmt.Sprintf("%s/rest/json/cves/1.0?cpeMatchString=cpe:2.3:a", mockServer.URL),
						Client: http.Client{
							Timeout: time.Second * 5,
						},
					}
				})

				it("return an error", func() {
					cves, err := nvdUtils.GetCVEs("haxx", "curl", logger)
					require.Error(err)

					assert.Equal(len(cves), 0)
					assert.Contains(err.Error(), "NVD Nist API request failed with status code")
				})
			})

			context("creating http request", func() {
				it.Before(func() {
					nvdUtils = utils.NVDNistUtils{
						BaseUrl: "bad://url",
						Client: http.Client{
							Timeout: time.Second * 5,
						},
					}
				})

				it("return an invalid URL error", func() {
					_, err := nvdUtils.GetCVEs("haxx", "curl", logger)
					require.Error(err)

					assert.Contains(err.Error(), "error creating NVD Nist API request")
				})
			})

			context("reading http response body", func() {

				it.Before(func() {
					mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
						w.Header().Set("Content-Length", "1")
					}))

					nvdUtils = utils.NVDNistUtils{
						BaseUrl: fmt.Sprintf("%s/rest/json/cves/1.0?cpeMatchString=cpe:2.3:a", mockServer.URL),
						Client: http.Client{
							Timeout: time.Second * 5,
						},
					}
				})

				it("return an invalid response body error", func() {
					_, err := nvdUtils.GetCVEs("haxx", "curl", logger)
					require.Error(err)

					assert.EqualError(err, "error decoding initial NVD Nist API response\nunexpected EOF")
				})
			})

			context("unmarshalling http response body", func() {

				it.Before(func() {
					mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
						fmt.Fprint(w, `{"result":{"CVE_Items":[{}`)
					}))

					nvdUtils = utils.NVDNistUtils{
						BaseUrl: fmt.Sprintf("%s/rest/json/cves/1.0?cpeMatchString=cpe:2.3:a", mockServer.URL),
						Client: http.Client{
							Timeout: time.Second * 5,
						},
					}
				})

				it("return an unmarshal error", func() {
					_, err := nvdUtils.GetCVEs("haxx", "curl", logger)
					require.Error(err)

					assert.EqualError(err, "error decoding initial NVD Nist API response\nunexpected EOF")
				})
			})
		})
	})

	context("Calls the NewNVDNistUtils method", func() {
		context("succeed", func() {
			it("returns a new NVDUtils object with default url and default client", func() {
				nvdNistUtils := utils.NewNVDNistUtils("test")

				assert.Equal(nvdNistUtils.BaseUrl, "https://services.nvd.nist.gov/rest/json/cves/2.0?virtualMatchString=cpe:2.3:a")
			})
		})
	})

	context("Calls the GenerateFakeCVE method", func() {
		context("succeed", func() {
			it("returns a fake NVDNistResponse object filled with the given params", func() {
				params := []utils.FakeCVEParam{
					{
						Id:          "CVE-ID",
						Description: "Test Description",
						Severity:    "LOW",
					},
					{
						Id:          "CVE-ID-2",
						Description: "Test Description 2",
						Severity:    "HIGH",
					},
					{
						Id:          "CVE-ID-3",
						Description: "Test Description 3",
						Severity:    "CRITICAL",
					},
				}
				fakeCVE := utils.GenerateFakeCVE(params)

				assert.Equal(3, len(fakeCVE))

				firstCveItem := fakeCVE[0]
				assert.Equal("CVE-ID", firstCveItem.CVE.Id)
				assert.Equal("Test Description", firstCveItem.CVE.Descriptions[0].Value)
				assert.Equal("LOW", firstCveItem.CVE.Metrics.CvssMetricV2[0].CvssData.BaseSeverity)

				secondCveItem := fakeCVE[1]
				assert.Equal("CVE-ID-2", secondCveItem.CVE.Id)
				assert.Equal("Test Description 2", secondCveItem.CVE.Descriptions[0].Value)
				assert.Equal("HIGH", secondCveItem.CVE.Metrics.CvssMetricV2[0].CvssData.BaseSeverity)

				thirdCveItem := fakeCVE[2]
				assert.Equal("CVE-ID-3", thirdCveItem.CVE.Id)
				assert.Equal("Test Description 3", thirdCveItem.CVE.Descriptions[0].Value)
				assert.Equal("CRITICAL", thirdCveItem.CVE.Metrics.CvssMetricV2[0].CvssData.BaseSeverity)
			})
		})
	})
}
