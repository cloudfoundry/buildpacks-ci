package utils_test

import (
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/cloudfoundry/buildpacks-ci/cve-notification-app/utils"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
	assertpkg "github.com/stretchr/testify/assert"
	requirepkg "github.com/stretchr/testify/require"
)

func TestSlackUtils(t *testing.T) {
	spec.Run(t, "Slack Utils", tesSlackUtils, spec.Report(report.Terminal{}))
}

func tesSlackUtils(t *testing.T, context spec.G, it spec.S) {
	var (
		assert     = assertpkg.New(t)
		require    = requirepkg.New(t)
		slackUtils utils.SlackUtils
		mockServer *httptest.Server
	)

	context("Calls the SendNewCVENotification method", func() {
		context("succeed", func() {

			var actualRequestBody string

			it.Before(func() {
				mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					if req.URL.Path == "/webhook" {
						w.Write([]byte("ok"))
						w.WriteHeader(200)

						byteRequestBody, err := io.ReadAll(req.Body)
						require.NoError(err)

						actualRequestBody = string(byteRequestBody)

					}
				}))

				slackUtils = utils.NewSlackUtils(fmt.Sprintf("%s/webhook", mockServer.URL))
			})

			it("sends a none severity CVE slack message using the webhook", func() {
				err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "NONE", 0.0)
				require.NoError(err)

				assert.Equal("{\"blocks\":[{\"type\":\"header\",\"text\":{\"type\":\"plain_text\",\"text\":\":bell: New CVE in curl :bell:\",\"emoji\":true}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Hey @buildpacks there is a new CVE affecting *curl*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*ID*: CVE-ID-1\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SCORE*: 0.000000\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SEVERITY*: :large_green_circle: NONE :large_green_circle:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*DESCRIPTION*: Test CVE\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*\\u003chttps://nvd.nist.gov/vuln/detail/CVE-ID-1|LINK\\u003e*\"}}],\"text\":\"New :large_green_circle: NONE :large_green_circle: vulnerability found in curl\"}", actualRequestBody)
			})

			it("sends a low severity CVE slack message using the webhook", func() {
				err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "LOW", 1.5)
				require.NoError(err)

				assert.Equal("{\"blocks\":[{\"type\":\"header\",\"text\":{\"type\":\"plain_text\",\"text\":\":bell: New CVE in curl :bell:\",\"emoji\":true}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Hey @buildpacks there is a new CVE affecting *curl*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*ID*: CVE-ID-1\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SCORE*: 1.500000\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SEVERITY*: :large_yellow_circle: LOW :large_yellow_circle:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*DESCRIPTION*: Test CVE\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*\\u003chttps://nvd.nist.gov/vuln/detail/CVE-ID-1|LINK\\u003e*\"}}],\"text\":\"New :large_yellow_circle: LOW :large_yellow_circle: vulnerability found in curl\"}", actualRequestBody)
			})

			it("sends a medium severity CVE slack message using the webhook", func() {
				err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "MEDIUM", 4.5)
				require.NoError(err)

				assert.Equal("{\"blocks\":[{\"type\":\"header\",\"text\":{\"type\":\"plain_text\",\"text\":\":bell: New CVE in curl :bell:\",\"emoji\":true}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Hey @buildpacks there is a new CVE affecting *curl*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*ID*: CVE-ID-1\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SCORE*: 4.500000\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SEVERITY*: :large_orange_circle: MEDIUM :large_orange_circle:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*DESCRIPTION*: Test CVE\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*\\u003chttps://nvd.nist.gov/vuln/detail/CVE-ID-1|LINK\\u003e*\"}}],\"text\":\"New :large_orange_circle: MEDIUM :large_orange_circle: vulnerability found in curl\"}", actualRequestBody)
			})

			it("sends a high severity CVE slack message using the webhook", func() {
				err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "HIGH", 7.5)
				require.NoError(err)

				assert.Equal("{\"blocks\":[{\"type\":\"header\",\"text\":{\"type\":\"plain_text\",\"text\":\":bell: New CVE in curl :bell:\",\"emoji\":true}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Hey @buildpacks there is a new CVE affecting *curl*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*ID*: CVE-ID-1\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SCORE*: 7.500000\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SEVERITY*: :red_circle: HIGH :red_circle:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*DESCRIPTION*: Test CVE\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*\\u003chttps://nvd.nist.gov/vuln/detail/CVE-ID-1|LINK\\u003e*\"}}],\"text\":\"New :red_circle: HIGH :red_circle: vulnerability found in curl\"}", actualRequestBody)
			})

			it("sends a critical severity CVE slack message using the webhook", func() {
				err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "CRITICAL", 10.0)
				require.NoError(err)

				assert.Equal("{\"blocks\":[{\"type\":\"header\",\"text\":{\"type\":\"plain_text\",\"text\":\":bell: New CVE in curl :bell:\",\"emoji\":true}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Hey @buildpacks there is a new CVE affecting *curl*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*ID*: CVE-ID-1\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SCORE*: 10.000000\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SEVERITY*: :warning: CRITICAL :warning:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*DESCRIPTION*: Test CVE\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*\\u003chttps://nvd.nist.gov/vuln/detail/CVE-ID-1|LINK\\u003e*\"}}],\"text\":\"New :warning: CRITICAL :warning: vulnerability found in curl\"}", actualRequestBody)
			})

			it("sends an empty severity CVE slack message using the webhook", func() {
				err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "", 0.0)
				require.NoError(err)

				assert.Equal("{\"blocks\":[{\"type\":\"header\",\"text\":{\"type\":\"plain_text\",\"text\":\":bell: New CVE in curl :bell:\",\"emoji\":true}},{\"type\":\"divider\"},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Hey @buildpacks there is a new CVE affecting *curl*\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*ID*: CVE-ID-1\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SCORE*: 0.000000\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*SEVERITY*: NOT-FOUND\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*DESCRIPTION*: Test CVE\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*\\u003chttps://nvd.nist.gov/vuln/detail/CVE-ID-1|LINK\\u003e*\"}}],\"text\":\"New vulnerability found in curl\"}", actualRequestBody)
			})
		})

		context("fails", func() {
			context("creating http request", func() {
				it.Before(func() {
					slackUtils = utils.NewSlackUtils("bad url:1")
				})

				it("return an invalid URL error", func() {
					err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "LOW", 4.0)
					require.Error(err)

					assert.EqualError(err, "error creating slack webhook request\nparse \"bad url:1\": first path segment in URL cannot contain colon")
				})
			})

			context("sending http request", func() {

				it.Before(func() {
					mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
						time.Sleep(time.Second * 2)
						w.WriteHeader(404)
					}))

					slackUtils = utils.SlackUtils{
						WebhookUrl: fmt.Sprintf("%s/webhook", mockServer.URL),
						Client: http.Client{
							Timeout: time.Second * 1,
						},
					}
				})

				it("return an invalid response error", func() {
					err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "LOW", 4.0)
					require.Error(err)

					assert.EqualError(err, fmt.Sprintf("error sending slack webhook request\nPost \"%s/webhook\": context deadline exceeded (Client.Timeout exceeded while awaiting headers)", mockServer.URL))
				})
			})

			context("reading http response body", func() {

				it.Before(func() {
					mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
						w.Header().Set("Content-Length", "1")
					}))

					slackUtils = utils.NewSlackUtils(fmt.Sprintf("%s/webhook", mockServer.URL))
				})

				it("return an invalid response body error", func() {
					err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "LOW", 4.0)
					require.Error(err)

					assert.EqualError(err, "error reading slack webhook response\nunexpected EOF")
				})
			})

			context("reading slack webhook response", func() {

				it.Before(func() {
					mockServer = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
						if req.URL.Path == "/webhook" {
							_, err := w.Write([]byte("error"))
							require.NoError(err)
							w.WriteHeader(400)
						}
					}))

					slackUtils = utils.NewSlackUtils(fmt.Sprintf("%s/webhook", mockServer.URL))
				})

				it("return a non-ok response", func() {
					err := slackUtils.SendNewCVENotification("curl", "CVE-ID-1", "Test CVE", "LOW", 4.0)
					require.Error(err)

					assert.EqualError(err, "non-ok response returned from Slack")
				})
			})
		})
	})
}
