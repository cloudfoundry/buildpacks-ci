# encoding: utf-8
require 'spec_helper'
require 'webmock/rspec'
require_relative '../../lib/rootfs-cve-feed'

describe RootFSCVEFeed do
  let(:target_dir) {
    File.expand_path(File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'stacks'))
  }
  let(:some_package_vulnerability) { 'USN-9999-9: some-package vulnerability' }
  let(:rss_url) { 'https://ubuntu.com/security/notices/rss.xml' }
  let(:cve_url) { 'https://ubuntu.com/security/notices/USN-9999-9' }
  let(:sample_usn_feed_xml) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'sample_usn_feed.xml') }
  let(:sample_cve_html) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'sample_cve.html') }

  before do
    stub_request(:get, rss_url).to_return(status: 200, body: File.open(sample_usn_feed_xml, 'r').read)
    stub_request(:get, cve_url).to_return(status: 200, body: File.open(sample_cve_html, 'r').read)
    %w[4659-1 4657-1 4658-1 4656-1 4655-1 4654-1 4653-1 4652-1 4651-1].each do |usn_number|
      url = "https://ubuntu.com/security/notices/USN-#{usn_number}"
      stub_request(:get, url).to_return(status: 200, body: '<html />')
    end
  end

  [
      ['cflinuxfs2', 'Ubuntu 14.04', 'cflinuxfs2/cflinuxfs2_receipt'],
      ['cflinuxfs3', 'Ubuntu 18.04', 'receipt.cflinuxfs3.x86_64'],
      ['tiny', 'Ubuntu 18.04', 'packagelist'],
  ].each do |data|
    context "when the stack is #{data[0]}" do
      let(:system_name) { data[1] }
      let(:receipt_file) { data[2] }
      subject { described_class.new(data[0], target_dir) }

      context 'and there are CVEs in the given system' do
        context 'but the library was not found in the receipt' do
          before do
            Dir.chdir target_dir do
              File.rename("#{receipt_file}", 'cflinuxfs2/cflinuxfs2_receipt_backup')
              receipt = File.read('cflinuxfs2/cflinuxfs2_receipt_backup')
              receipt = receipt.lines.reject { |l| l.include?('some-package') }.join("\n")
              File.write("#{receipt_file}", receipt)
            end
          end

          after do
            Dir.chdir target_dir do
              File.rename('cflinuxfs2/cflinuxfs2_receipt_backup', "#{receipt_file}")
            end
          end

          describe 'with related cves' do
            it 'should not return some-package' do
              response = subject.related_cves(system_name)
              expect(a_request(:get, rss_url)).to have_been_made.once
              expect(response).not_to include(some_package_vulnerability)
            end
          end

          describe 'with unrelated cves' do
            it 'should return some-package' do
              response = subject.unrelated_cves(system_name)
              expect(a_request(:get, rss_url)).to have_been_made.once
              expect(response).to include(some_package_vulnerability)
            end
          end
        end
      end

      context 'and there are no CVEs' do
        let(:sample_usn_feed_xml) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'sample_usn_feed_empty.xml') }

        describe 'with related cves' do
          it 'should return an empty list of CVEs' do
            response = subject.related_cves(system_name)
            expect(a_request(:get, rss_url)).to have_been_made.once
            expect(response).to eq []
          end
        end

        describe 'with unrelated cves' do
          it 'should return an empty list of CVEs' do
            response = subject.unrelated_cves(system_name)
            expect(a_request(:get, rss_url)).to have_been_made.once
            expect(response).to eq []
          end
        end
      end

      describe 'with related cves' do
        context 'and there are CVEs' do
          it 'should return a list of CVEs related to repo' do
            response = subject.related_cves(system_name)
            expect(a_request(:get, rss_url)).to have_been_made.once
            expect(response.first).to eq some_package_vulnerability
          end
        end

        context 'when there is a CVE with multiple dependencies but only one matches' do
          it 'should return that CVE in the list' do
            cves = subject.related_cves(system_name)
            expect(a_request(:get, rss_url)).to have_been_made.once
            found_cve = cves.find { |cve| cve == some_package_vulnerability }
            expect(found_cve).to_not be_nil
          end
        end

        context 'when no receipt is found' do
          before do
            Dir.chdir target_dir do
              File.rename("#{receipt_file}", 'cflinuxfs2/cflinuxfs2_receipt_backup')
            end
          end

          after do
            Dir.chdir target_dir do
              File.rename('cflinuxfs2/cflinuxfs2_receipt_backup', "#{receipt_file}")
            end
          end

          it 'should raise an error without contacting the RSS feed' do
            expect { subject.related_cves(system_name) }.to raise_error(RuntimeError)
            expect(a_request(:get, rss_url)).not_to have_been_made
          end
        end

        context 'with an HTTP error' do
          before do
            stub_request(:get, rss_url).to_return(status: [404, 'Page Not Found'])
          end

          it 'should raise an HTTP error' do
            expect { subject.related_cves(system_name) }.to raise_error(OpenURI::HTTPError)
          end
        end
      end
    end
  end
end
