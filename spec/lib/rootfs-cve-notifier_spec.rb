# encoding: utf-8
require 'fileutils'
require 'spec_helper'
require_relative '../../lib/rootfs-cve-notifier.rb'
require_relative '../../lib/cve-history.rb'
require_relative '../../lib/rootfs-cve-feed.rb'

describe RootFSCVENotifier do
  let(:cves_dir) { Dir.mktmpdir }
  let(:notifier1) { double(:notifier1) }
  let(:notifiers) { [notifier1] }
  let(:stacks_dir) { Dir.mktmpdir }
  let(:new_cve_rss) { { 'title' => 'USN-9999-1: LibXML Security', 'description' => 'Parses bits improperly' } }
  let(:old_cve_rss) { { 'title' => 'USN-0000-1: linux vulnerability', 'description' => 'kernel crash' } }
  let(:old_cve) { [{ 'title' => 'USN-0000-1: linux vulnerability', 'stack_release' => '0.9.34' }] }
  let(:contents) { { :category => 'cflinuxfs2-related', :labels => [] } }

  subject { described_class.new(cves_dir, stacks_dir).run!('cflinuxfs2', 'fake os', 'fakeos', notifiers) }

  before do
    allow(CVEHistory).to receive(:read_yaml_cves).and_return(old_cve)
    allow(CVEHistory).to receive(:write_yaml_cves)
    notifiers.each { |n| allow(n).to receive(:notify!) }
  end

  context 'there are no new cves' do
    before do
      allow_any_instance_of(RootFSCVEFeed).to receive(:related_cves).and_return([old_cve_rss])
      allow_any_instance_of(RootFSCVEFeed).to receive(:unrelated_cves).and_return([])
    end

    it 'invokes notifiers no matter what' do
      expect(notifier1).to receive(:notify!).with([], contents)
      subject
    end
  end

  context 'there are new related cves' do
    before do
      allow_any_instance_of(RootFSCVEFeed).to receive(:related_cves).and_return([new_cve_rss, old_cve_rss])
      allow_any_instance_of(RootFSCVEFeed).to receive(:unrelated_cves).and_return([])
    end

    it 'calls a method to write cves to related cve history yaml file' do
      subject
      expect(CVEHistory).to have_received(:write_yaml_cves).with([{ "title" => "USN-9999-1: LibXML Security", "stack_release" => "unreleased" },
                                                                  { "title" => "USN-0000-1: linux vulnerability", "stack_release" => "0.9.34" }], cves_dir, 'fakeos.yml')
    end
  end

  context 'there are new unrelated cves' do
    before do
      allow_any_instance_of(RootFSCVEFeed).to receive(:related_cves).and_return([])
      allow_any_instance_of(RootFSCVEFeed).to receive(:unrelated_cves).and_return([new_cve_rss, old_cve_rss])
    end

    it 'calls a method to write cves to unrelated cve history yaml file' do
      subject
      expect(CVEHistory).to have_received(:write_yaml_cves).with(anything, cves_dir, 'fakeos-unrelated.yml')
    end
  end
end
