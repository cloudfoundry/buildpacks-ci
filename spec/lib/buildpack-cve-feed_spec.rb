# encoding: utf-8
require 'spec_helper'
require 'webmock/rspec'
require_relative '../../lib/buildpack-cve-feed'

describe BuildpackCVEFeed do
  describe '#run' do
    let(:cve_title) { 'CVE-2015-7551: Unsafe tainted string usage in Fiddle and DL' }
    let(:cve_description) { 'http://www.ruby-lang.org/en/news/2015/12/16/unsafe-tainted-string-usage-in-fiddle-and-dl-cve-2015-7551/' }
    let(:rss_url) { 'http://www.ruby-lang.org/en/security' }
    let(:sample_html) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'buildpack-cve-notifications', 'ruby', 'ruby-security-page.html') }

    before do
      sample_feed = File.open(sample_html, 'r').read
      stub_request(:get, rss_url).to_return(status: 200, body: sample_feed)
    end

    context 'language has a CVE feed' do
      it 'returns a list of CVEs related to repo' do
        response = described_class.run 'ruby'
        expect(a_request(:get, rss_url))
          .to have_been_made.once

        expect(response.first['title']).to include cve_title
        expect(response.first['description']).to include cve_description
      end
    end

    context 'language does not have a CVE feed' do
      it 'returns an empty list' do
        response = described_class.run 'nofeedlang'
        expect(a_request(:get, rss_url))
          .not_to have_been_made

        expect(response).to eq []
      end
    end

    context 'HTML error' do
      before do
        stub_request(:get, rss_url).to_return(status: [404, 'Page Not Found'])
      end

      subject { described_class.run 'ruby' }

      it 'raises an HTTP error' do
        expect { subject }.to raise_error(OpenURI::HTTPError)
      end
    end
  end
end
