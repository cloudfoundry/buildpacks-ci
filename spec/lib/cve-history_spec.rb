# encoding: utf-8
require 'spec_helper'
require 'yaml'
require_relative '../../lib/cve-tags'
require_relative '../../lib/cve-history'

describe CVEHistory do
  let(:buildpacks_ci_dir) { File.expand_path(File.join(File.dirname(__FILE__), '..', '..')) }
  let(:libpng_vulnerability) { 'USN-2815-1: libpng vulnerabilities' }
  let(:cves_dir) { File.expand_path(File.join('..', 'new-cves')) }

  around do |example|
    Dir.mktmpdir do |tmpdir|
      `cp -r #{buildpacks_ci_dir}/spec/fixtures/cve-notifications/*  #{tmpdir}`
      Dir.chdir("#{tmpdir}/buildpacks_ci") do
        example.run
      end
    end
  end

  describe '#read_yaml_cves' do
    subject { described_class.new(cves_dir) }

    context 'CVE list exists' do
      before do
        allow(YAML).to receive(:load_file).and_call_original
      end

      context 'and is empty' do
        it 'loads the file and prints an empty hash' do
          old_cves = subject.read_yaml_cves 'ubuntu14.04_empty.yml'
          expect(YAML).to have_received(:load_file)
          expect(old_cves).to eq []
        end
      end

      context 'and is not empty' do
        it 'retrieves the contents of the file as a hash' do
          old_cves = subject.read_yaml_cves 'ubuntu14.04.yml'
          expect(YAML).to have_received(:load_file)
          expect(old_cves).to eq [libpng_vulnerability]
        end
      end
    end

    context 'CVE list does not exist' do
      before do
        FileUtils.mv "#{cves_dir}/ubuntu14.04.yml", "#{cves_dir}/ubuntu14.04.backup.yml"
      end

      after do
        FileUtils.mv "#{cves_dir}/ubuntu14.04.backup.yml", "#{cves_dir}/ubuntu14.04.yml"
      end

      it 'creates an empty YAML file' do
        old_cves = subject.read_yaml_cves 'ubuntu14.04.yml'
        expect(File.exist? "#{cves_dir}/ubuntu14.04.yml").to eq true
        expect(old_cves).to eq []
      end
    end
  end

  describe '#write_yaml_cves' do
    let(:cve_list) { [libpng_vulnerability, 'quack'] }
    let(:yaml_path) { "#{cves_dir}/ubuntu14.04.yml" }

    subject { described_class.new(cves_dir) }

    context 'when the CVE list is an array' do
      it 'writes the contents to the correct YAML file' do
        subject.write_yaml_cves cve_list, yaml_path
        expect(YAML.load_file(yaml_path)).to eq cve_list
      end
    end

    context 'when cve_list is not an array' do
      it 'raises an error without attempting to write to the file' do
        expect { subject.write_yaml_cves 'sandwich', yaml_path }.to raise_error(RuntimeError)
        expect_any_instance_of(File).not_to receive(:write)
      end
    end

    context 'when the YAML file is not found' do
      let(:yaml_path) { "#{cves_dir}/ubuntu19.04.yml" }

      it 'raises an error without attempting to write to the file' do
        expect { subject.write_yaml_cves [], yaml_path }.to raise_error(RuntimeError)
        expect_any_instance_of(File).not_to receive(:write)
      end
    end
  end
end
