# encoding: utf-8
require 'spec_helper'
require 'yaml'
require_relative '../../lib/cve-history'

describe CVEHistory do
  let(:buildpack_cve) { { 'title' => 'some-title',
      'description' => 'some-description',
      'raw_description' => '' } }
  let(:cves_dir) { Dir.mktmpdir }
  let(:yaml_path) { 'ruby.yml' }

  before do
    allow(GitClient).to receive(:add_everything)
    allow(GitClient).to receive(:safe_commit)
  end

  describe '#read_yaml_cves' do
    subject { described_class }

    context 'CVE list exists' do
      context 'and is empty' do
        before do
          File.write(File.join(cves_dir, yaml_path), '')
          allow(YAML).to receive(:load_file).and_call_original
        end

        it 'loads the file and prints an empty array' do
          old_cves = subject.read_yaml_cves(cves_dir, yaml_path)
          expect(YAML).to have_received(:load_file)
          expect(old_cves).to eq []
        end
      end

      context 'and is not empty' do
        let(:cve_list) { [buildpack_cve] }

        before do
          File.write(File.join(cves_dir, yaml_path), cve_list.to_yaml)
          allow(YAML).to receive(:load_file).and_call_original
        end

        it 'retrieves the contents of the file as a array' do
          old_cves = subject.read_yaml_cves(cves_dir, yaml_path)
          expect(YAML).to have_received(:load_file)
          expect(old_cves).to eq [buildpack_cve]
        end
      end
    end

    context 'CVE list does not exist' do
      it 'creates an empty YAML file' do
        old_cves = subject.read_yaml_cves(cves_dir, yaml_path)
        expect(File.exist? File.join(cves_dir, yaml_path)).to eq true
        expect(old_cves).to eq []
      end
    end
  end

  describe '#write_yaml_cves' do
    let(:cve_list) { [buildpack_cve, 'quack'] }

    subject { described_class }

    context 'when the CVE list is an array' do
      before do
        File.write(File.join(cves_dir, yaml_path), cve_list.to_yaml)
      end

      it 'writes the contents to the correct YAML file' do
        subject.write_yaml_cves(cve_list, cves_dir, yaml_path)
        expect(YAML.load_file(File.join(cves_dir, yaml_path))).to eq cve_list
      end
    end

    context 'when cve_list is not an array' do
      it 'raises an error without attempting to write to the file' do
        expect { subject.write_yaml_cves('sandwich', cves_dir, yaml_path) }.to raise_error(RuntimeError)
        expect_any_instance_of(File).not_to receive(:write)
      end
    end

    context 'when the YAML file is not found' do
      it 'raises an error without attempting to write to the file' do
        expect { subject.write_yaml_cves([], cves_dir, yaml_path) }.to raise_error(RuntimeError)
        expect_any_instance_of(File).not_to receive(:write)
      end
    end
  end
end
