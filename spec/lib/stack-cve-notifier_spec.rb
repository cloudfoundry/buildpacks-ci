# encoding: utf-8
require 'fileutils'
require 'spec_helper'
require_relative '../../lib/stack-cve-notifier.rb'
require_relative '../../lib/cve-history.rb'

describe StackCVENotifier do
  let(:cves_dir) { Dir.mktmpdir }
  let(:notifier1) { double(:notifier1) }
  let(:notifiers) { [notifier1] }
  let(:history) { CVEHistory.new(cves_dir) }
  let(:cve_history_file) { File.join(cves_dir, 'fakeos.yaml') }

  let(:cves) { [{ title: 'LibXML Security', description: 'Parses bits improperly' }] }

  let(:related_to_stacks) { true }

  subject { described_class.new(history, cves_dir).run!('fake os', 'fakeos', notifiers) }

  before do
    allow_any_instance_of(CVETags).to receive(:related_cves).and_return(cves)
    allow_any_instance_of(CVETags).to receive(:unrelated_cves).and_return([])

    notifiers.each { |n| allow(n).to receive(:notify!) }

    allow(GitClient).to receive(:add_everything)
    allow(GitClient).to receive(:safe_commit)

  end

  shared_examples_for 'uses notifiers and syncs cve yaml' do
    it 'writes the cves to the yaml file' do
      subject

      cves = YAML.load File.read(cve_history_file)
      expect(cves).to eq(['LibXML Security'])
    end

    it 'commits the results' do
      subject
      expect(GitClient).to have_received(:add_everything)
      expect(GitClient).to have_received(:safe_commit).with('CVE update')
    end
  end

  context 'no cves' do
    it 'useStackCVENotifiers the notifiers that require cves' do
      expect(notifier1).to receive(:notify!).with(cves, related_to_stacks)
      subject
    end
  end

  context 'related cves' do
    it_behaves_like 'uses notifiers and syncs cve yaml'
  end

  context 'unrelated cves' do
    let(:related_to_stacks) { false }
    let(:cve_history_file) { File.join(cves_dir, 'fakeos-unrelated.yaml') }

    before do
      allow_any_instance_of(CVETags).to receive(:related_cves).and_return([])
      allow_any_instance_of(CVETags).to receive(:unrelated_cves).and_return(cves)
    end

    it_behaves_like 'uses notifiers and syncs cve yaml'
  end
end
