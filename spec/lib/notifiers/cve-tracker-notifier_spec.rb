# encoding: utf-8
require 'fileutils'
require 'spec_helper'
require_relative '../../../lib/notifiers/cve-tracker-notifier'

describe CVETrackerNotifier do
  let(:cves) do
    [{ 'title' => 'LibXML Security', 'description' => 'Parses bits improperly' },
     { 'title' => 'OpenSSL Error', 'description' => 'Realistic error' }]
  end
  let(:contents) { { :category => 'cflinuxfs2-related' } }
  let(:tracker_client) { double(:tracker_client) }

  subject { described_class.notify! cves, contents }

  before(:each) do
    @old_tracker_api_token = ENV.fetch('TRACKER_API_TOKEN', nil)
    @old_tracker_project_id = ENV.fetch('TRACKER_PROJECT_ID', nil)
    @old_tracker_requester_id = ENV.fetch('TRACKER_REQUESTER_ID', nil)

    ENV.store('TRACKER_API_TOKEN', 'does not matter')
    ENV.store('TRACKER_PROJECT_ID', 'does not matter')
    ENV.store('TRACKER_REQUESTER_ID', 'does not matter')

    allow(TrackerClient).to receive(:new).and_return(tracker_client)
  end

  after(:each) do
    ENV.store('TRACKER_API_TOKEN', @old_tracker_api_token)
    ENV.store('TRACKER_PROJECT_ID', @old_tracker_project_id)
    ENV.store('TRACKER_REQUESTER_ID', @old_tracker_requester_id)
  end

  describe '#notify!' do
    context 'no cves' do
      let(:cves) { [] }

      it 'does not post to tracker' do
        expect(tracker_client).to_not receive(:post_to_tracker)
        subject
      end
    end

    context 'cves are related to stacks' do
      it 'posts to tracker' do
        expect(tracker_client).to receive(:post_to_tracker)
                                      .with(
                                          name: 'address: LibXML Security, OpenSSL Error',
                                          description: "Parses bits improperly\n\n--------\n\nRealistic error",
                                          labels: ['pm-only']
                                      )
        subject
      end
    end

    context 'when cves are related to another stack' do
      let(:contents) { { :category => 'cflinuxfs3-related' } }

      it 'posts to tracker' do
        expect(tracker_client).to receive(:post_to_tracker)
                                      .with(
                                          name: 'address: LibXML Security, OpenSSL Error',
                                          description: "Parses bits improperly\n\n--------\n\nRealistic error",
                                          labels: ['pm-only']
                                      )
        subject
      end
    end

    context 'cves are not related to stacks' do
      let(:contents) { { :category => 'cflinuxfs2-unrelated' } }

      it 'does not post to tracker' do
        expect(tracker_client).to_not receive(:post_to_tracker)
        subject
      end
    end
  end
end
