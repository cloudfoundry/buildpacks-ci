# encoding: utf-8
require 'fileutils'
require 'spec_helper'
require_relative '../../../lib/notifiers/cve-slack-notifier'

describe CVESlackNotifier do
  let(:cves) do
    [{ 'title' => 'LibXML Security', 'description' => 'Parses bits improperly' },
     { 'title' => 'OpenSSL Error', 'description' => 'Realistic error' }]
  end
  let(:contents) { { :category => 'cflinuxfs2-related' } }
  let(:slack_client) { double(:slack_client) }

  subject { described_class.notify! cves, contents }

  before(:each) do
    @old_slack_webhook = ENV.fetch('SLACK_WEBHOOK', nil)
    @old_slack_channel = ENV.fetch('SLACK_CHANNEL', nil)

    ENV.store('SLACK_WEBHOOK', 'does not matter')
    ENV.store('SLACK_CHANNEL', 'does not matter')
    allow(SlackClient).to receive(:new).and_return(slack_client)
  end

  after(:each) do
    ENV.store('SLACK_WEBHOOK', @old_slack_webhook)
    ENV.store('SLACK_CHANNEL', @old_slack_channel)
  end

  describe '#notify!' do
    context 'no cves' do
      let(:cves) { [] }

      it 'does not post to slack' do
        expect(slack_client).to_not receive(:post_to_slack)
        subject
      end
    end

    context 'cves are not related to stacks' do
      let(:contents) { { :category => 'cflinuxfs2-unrelated' } }

      it 'does not post to slack' do
        expect(slack_client).to_not receive(:post_to_slack)
        subject
      end
    end

    context 'cves are related to stacks or to buildpack languages' do
      it 'posts to slack' do
        expect(slack_client).to receive(:post_to_slack)
                                    .with("There are *2* new CVEs:\n- LibXML Security*\n- OpenSSL Error*\n")
        subject
      end
    end

    context 'when cves are related to another stack' do
      let(:contents) { { :category => 'cflinuxfs3-related' } }

      it 'posts to slack' do
        expect(slack_client).to receive(:post_to_slack)
                                    .with("There are *2* new CVEs:\n- LibXML Security*\n- OpenSSL Error*\n")
        subject
      end
    end
  end
end
