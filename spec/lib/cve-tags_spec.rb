# encoding: utf-8
require 'spec_helper'
require 'webmock/rspec'
require_relative '../../lib/cve-tags'

describe CVETags do
  let(:target_dir) { File.expand_path(File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'stacks')) }
  let(:libpng_vulnerability) { 'USN-2815-1: libpng vulnerabilities' }
  let(:libpng_description_fragment) { 'libpng could be made to crash or run programs' }
  let(:libpng_description_html_fragment) { '<p>libpng could be made to crash or run programs' }
  let(:rss_url) { 'https://www.ubuntu.com/usn/rss.xml' }
  let(:sample_xml) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'sample_cve.xml') }
  let(:system_name) { 'Ubuntu 14.04' }

  before do
    sample_feed = File.open(sample_xml, 'r').read
    stub_request(:get, rss_url).to_return(status: 200, body: sample_feed)
  end

  subject { described_class.new target_dir }

  context 'has CVEs in the given system' do
    context "but library wasn't found in receipt" do
      before do
        Dir.chdir target_dir do
          File.rename('cflinuxfs2/cflinuxfs2_receipt', 'cflinuxfs2/cflinuxfs2_receipt_backup')
          receipt = File.read('cflinuxfs2/cflinuxfs2_receipt_backup')
          receipt = receipt.lines.reject { |l| l.include?('libpng') }.join("\n")
          File.write('cflinuxfs2/cflinuxfs2_receipt', receipt)
        end
      end

      after do
        Dir.chdir target_dir do
          File.rename('cflinuxfs2/cflinuxfs2_receipt_backup', 'cflinuxfs2/cflinuxfs2_receipt')
        end
      end

      describe '#related_cves' do
        it 'does not return libpng' do
          response = subject.related_cves(system_name)

          expect(a_request(:get, 'https://www.ubuntu.com/usn/rss.xml'))
            .to have_been_made.once

          expect(response.map { |h| h[:title] }).not_to include(libpng_vulnerability)
        end
      end

      describe '#unrelated_cves' do
        it 'returns libpng' do
          response = subject.unrelated_cves(system_name)

          expect(a_request(:get, 'https://www.ubuntu.com/usn/rss.xml'))
            .to have_been_made.once

          puts "################: #{response.map { |h| h[:title] }}"

          expect(response.map { |h| h[:title] }).to include(libpng_vulnerability)
        end
      end
    end
  end

  context 'has no CVEs' do
    let(:sample_xml) { File.join(File.dirname(__FILE__), '..', 'fixtures', 'cve-notifications', 'no_ubuntu1404_cve.xml') }

    describe '#related_cves' do
      it 'returns an empty list of CVEs' do
        response = subject.related_cves(system_name)

        expect(a_request(:get, 'https://www.ubuntu.com/usn/rss.xml'))
          .to have_been_made.once

        expect(response).to eq []
      end
    end

    describe '#unrelated_cves' do
      it 'returns an empty list of CVEs' do
        response = subject.unrelated_cves(system_name)

        expect(a_request(:get, 'https://www.ubuntu.com/usn/rss.xml'))
          .to have_been_made.once

        expect(response).to eq []
      end
    end
  end

  describe '#related_cves' do
    context 'has CVEs' do
      it 'returns a list of CVEs related to repo' do
        response = subject.related_cves(system_name)

        expect(a_request(:get, 'https://www.ubuntu.com/usn/rss.xml'))
          .to have_been_made.once

        expect(response.first[:title]).to include libpng_vulnerability
        expect(response.first[:description]).to include libpng_description_fragment
        expect(response.first[:raw_description]).to include libpng_description_html_fragment
      end
    end

    context 'has a CVE with multiple dependencies but only one matches' do
      it 'returns that CVE in the list' do
        cves = subject.related_cves(system_name)

        expect(a_request(:get, 'https://www.ubuntu.com/usn/rss.xml'))
          .to have_been_made.once

        found_cve = cves.find { |cve| cve[:title] == 'USN-2810-1: Kerberos vulnerabilities' }
        expect(found_cve).to_not be_nil
      end
    end

    context 'no cflinuxfs2_receipt found' do
      before do
        Dir.chdir target_dir do
          File.rename('cflinuxfs2/cflinuxfs2_receipt', 'cflinuxfs2/cflinuxfs2_receipt_backup')
        end
      end

      after do
        Dir.chdir target_dir do
          File.rename('cflinuxfs2/cflinuxfs2_receipt_backup', 'cflinuxfs2/cflinuxfs2_receipt')
        end
      end

      it 'raises an error without contacting the RSS feed' do
        message = "ERROR: cflinuxfs2/cflinuxfs2_receipt not found in '#{target_dir}'\n"
        expect { subject.related_cves(system_name) }.to raise_error(RuntimeError)

        expect(a_request(:get, 'https://www.ubuntu.com/usn/rss.xml'))
          .not_to have_been_made
      end
    end

    context 'HTTP error' do
      before do
        stub_request(:get, rss_url).to_return(status: [404, 'Page Not Found'])
      end

      it 'raises an HTTP error' do
        expect { subject.related_cves(system_name) }.to raise_error(OpenURI::HTTPError)
      end
    end
  end
end
