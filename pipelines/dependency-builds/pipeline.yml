#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")

#! Helper functions (converted from Ruby ERB)

#@ def get_version_lines(bp_lines, default_return=[]):
#@   if bp_lines == None:
#@     return default_return
#@   end
#@   return [ln["line"] for ln in bp_lines]
#@ end

#@ def is_multiline(dep):
#@   for bp_name in dep["buildpacks"]:
#@     bp = dep["buildpacks"][bp_name]
#@     lines = get_version_lines(getattr(bp, "lines", None))
#@     non_latest = [ver for ver in lines if ver != "latest"]
#@     if len(non_latest) > 0:
#@       return True
#@     end
#@   end
#@   return False
#@ end

#@ def get_version_line_type(lines):
#@   if lines == None or len(lines) == 0:
#@     return None
#@   end
#@   line = lines[0]["line"]
#@   x_idx = line.lower().find('x')
#@   if x_idx == -1:
#@     return None
#@   end
#@   dot_count = line[0:x_idx].count('.')
#@   if dot_count == 1:
#@     return "major"
#@   elif dot_count == 2:
#@     return "minor"
#@   else:
#@     return None
#@   end
#@ end

#@ def bp_uses_line(bp_data, line):
#@   lines = get_version_lines(getattr(bp_data, "lines", None))
#@   if lines == None:
#@     return False
#@   end
#@   return line in lines
#@ end

#@ def get_all_version_lines(dep):
#@   lines = []
#@   for bp_name in dep["buildpacks"]:
#@     bp = dep["buildpacks"][bp_name]
#@     for line in get_version_lines(getattr(bp, "lines", None), ["latest"]):
#@       if line not in lines:
#@         lines.append(line)
#@       end
#@     end
#@   end
#@   if "latest" not in lines:
#@     lines.append("latest")
#@   end
#@   return lines
#@ end

#@ def get_unique_buildpacks():
#@   buildpacks = []
#@   for dep_name in data.values.dependencies:
#@     dep = data.values.dependencies[dep_name]
#@     for bp in dep["buildpacks"]:
#@       if bp not in buildpacks:
#@         buildpacks.append(bp)
#@       end
#@     end
#@   end
#@   return buildpacks
#@ end

#@ def get_s3_regexp(dep_name):
#@   if dep_name == "pip" or dep_name == "go" or dep_name == "libgdiplus":
#@     version_pattern = '(\\d+\\.\\d+(?:\\.\\d+)?)'
#@   else:
#@     version_pattern = '(\\d+\\.\\d+\\.\\d+)'
#@   end
#@   file_prefix = "nginx" if dep_name == "nginx-static" else dep_name
#@   return "dependencies/{}/{}.*?{}(.*)".format(dep_name, file_prefix, version_pattern)
#@ end

#@ def parse_source_params(params):
#@   result = {}
#@   for param in params:
#@     parts = param.split(":", 1)
#@     if len(parts) == 2:
#@       key = parts[0].strip()
#@       value = parts[1].strip()
#@       # Try to convert to appropriate type
#@       if value == "true":
#@         value = True
#@       elif value == "false":
#@         value = False
#@       elif value.replace(".", "").replace("-", "").isdigit():
#@         # Try to parse as number
#@         if "." in value:
#@           value = float(value)
#@         else:
#@           value = int(value)
#@         end
#@       end
#@       result[key] = value
#@     end
#@   end
#@   return result
#@ end

---
resource_types:
- name: depwatcher
  type: docker-image
  source:
    repository: coredeps/depwatcher
- name: create-pull-request-resource
  type: docker-image
  source:
    repository: cfbuildpacks/create-pull-request-resource

resources:
- name: binary-builder
  type: git
  source:
    uri: https://github.com/cloudfoundry/binary-builder
- name: buildpacks-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry/buildpacks-ci
    branch: master
- name: builds
  type: git
  source:
    uri: git@github.com:cloudfoundry/public-buildpacks-ci-robots
    branch: main
    paths: [ binary-builds-new/ ]
    private_key: ((cf-buildpacks-eng-github-ssh-key.private_key))

#@ for stack in data.values.build_stacks:
- name: #@ "{}-image".format(stack)
  type: docker-image
  source:
    repository: #@ "cloudfoundry/{}".format(stack)
#@ end

#@ for buildpack in get_unique_buildpacks():
- name: #@ "{}-buildpack".format(buildpack)
  type: git
  source:
    uri: #@ "git@github.com:cloudfoundry/{}-buildpack.git".format(buildpack)
    private_key: ((cf-buildpacks-eng-github-ssh-key.private_key))
    branch: master
- name: #@ "{}-buildpack-latest-released".format(buildpack)
  type: git
  source:
    uri: #@ "git@github.com:cloudfoundry/{}-buildpack.git".format(buildpack)
    private_key: ((cf-buildpacks-eng-github-ssh-key.private_key))
    branch: master
- name: #@ "{}-pull-request".format(buildpack)
  type: create-pull-request-resource
  source:
    remote_repository: #@ "cloudfoundry/{}-buildpack".format(buildpack)
    github_token: ((buildpacks-github-token))
#@ end

#@ for dep_name in data.values.dependencies:
#@   dep = data.values.dependencies[dep_name]
#@   lines = get_all_version_lines(dep)
#@   for line in lines:
#@     source_params = parse_source_params(getattr(dep, "source_params", []))
#@     source_dict = {"type": getattr(dep, "source_type", dep_name), "name": dep_name}
#@     if line != "latest":
#@       source_dict["version_filter"] = line
#@     end
#@     for key in source_params:
#@       source_dict[key] = source_params[key]
#@     end
- name: #@ "source-{}-{}".format(dep_name.lower(), line.lower())
  type: depwatcher
  check_every: 1h
  source: #@ source_dict
#@   end

#@   for monitored_dep_name in getattr(dep, "monitored_deps", []):
- name: #@ "source-{}-latest".format(monitored_dep_name.lower())
  type: depwatcher
  check_every: 1h
  source:
    type: #@ monitored_dep_name
    name: #@ monitored_dep_name
#@   end

#@   if not getattr(dep, "third_party_hosted", False):
- name: #@ "buildpacks-bucket-{}".format(dep_name)
  type: s3
  source:
    bucket: buildpacks.cloudfoundry.org
    access_key_id: ((buildpacks-cloudfoundry-org-aws-access-key-id))
    secret_access_key: ((buildpacks-cloudfoundry-org-aws-secret-access-key))
    regexp: #@ get_s3_regexp(dep_name)
#@   end
#@ end

jobs:
#@ for dep_name in data.values.dependencies:
#@   dep = data.values.dependencies[dep_name]
#@   skipped_version_lines_fs4 = getattr(dep, "skip_lines_cflinuxfs4", [])
#@   version_lines = []
#@   for bp_name in dep["buildpacks"]:
#@     bp = dep["buildpacks"][bp_name]
#@     for line in get_version_lines(getattr(bp, "lines", None), ["latest"]):
#@       if line not in version_lines:
#@         version_lines.append(line)
#@       end
#@     end
#@   end

#@   if is_multiline(dep):
- name: #@ "create-{}-new-line-story".format(dep_name.lower())
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: source
      resource: #@ "source-{}-latest".format(dep_name.lower())
      trigger: true
      version: every
  - do:
    - task: create-new-version-line-story
      file: buildpacks-ci/tasks/create-new-version-line-story/create-new-version-line-story.yml
      params:
        BUILDPACKS: #@ " ".join([bp for bp in dep["buildpacks"]])
        EXISTING_VERSION_LINES: #@ " ".join(version_lines)
        GITHUB_TOKEN: ((buildpacks-github-token))
#@   end

#@   for line in version_lines:
#@     if dep_name.lower() == "node" and line.lower() == "node-lts":
- name: create-node-node-lts-story
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: source
      resource: source-node-node-lts
      trigger: true
      version: every
    - get: builds
  - do:
    - task: create-new-version-line-story-node
      file: buildpacks-ci/tasks/create-new-version-line-story/create_node_lts.yml
      params:
        BUILDPACKS: #@ " ".join([bp_name for bp_name in dep["buildpacks"] if bp_uses_line(dep["buildpacks"][bp_name], line)])
        GITHUB_TOKEN: ((buildpacks-github-token))
#@     end

#@     for stack in getattr(dep, "copy-stacks", []):
- name: #@ "copy-{}-{}-{}".format(dep_name.lower(), line.lower(), stack.lower())
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: source
      resource: #@ "source-{}-{}".format(dep_name.lower(), line.lower())
      trigger: true
      version: every
      passed: 
      - #@ "build-{}-{}".format(dep_name.lower(), line.lower())
    - get: builds
  - task: repackage-dependency
    file: buildpacks-ci/tasks/repackage-dependency/task.yml
    params:
      STACK: #@ stack
      ANY_STACK: #@ getattr(dep, "any_stack", False)
  - put: bionic-builds-metadata
    resource: builds
    params:
      repository: builds
      rebase: true
#@     end

#@     specific_stack = data.values.build_stacks if dep_name.lower() in [d.lower() for d in data.values.cflinuxfs4_build_dependencies] else [data.values.build_stacks[-1]]
#@     build_stacks = ["any-stack"] if getattr(dep, "any_stack", False) else specific_stack
#@     if line.lower() in [sl.lower() for sl in skipped_version_lines_fs4]:
#@       build_stacks = [s for s in build_stacks if s != "cflinuxfs4"]
#@     end
- name: #@ "build-{}-{}".format(dep_name.lower(), line.lower())
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: binary-builder
    - get: source
      resource: #@ "source-{}-{}".format(dep_name.lower(), line.lower())
      trigger: true
      version: every
    #@ for monitored_dep_name in getattr(dep, "monitored_deps", []):
    - get: #@ "source-{}-latest".format(monitored_dep_name.lower())
      trigger: true
      version: every
    #@ end
    #@ for stack in specific_stack:
    - get: #@ "{}-image".format(stack)
    #@ end
    - get: builds
  #@ if len(build_stacks) > 0:
  - in_parallel:
    #@ for stack in build_stacks:
    - do:
      - task: #@ "build-binary-{}".format(stack)
        image: #@ "{}-image".format("cflinuxfs4" if stack == "any-stack" else stack)
        file: #@ "buildpacks-ci/tasks/build-binary-new{}/build.yml".format("-cflinuxfs4" if stack == "cflinuxfs4" or stack == "any-stack" else "")
        output_mapping:
          artifacts: #@ "{}-artifacts".format(stack)
          builds-artifacts: #@ "{}-builds-metadata".format(stack)
        params:
          STACK: #@ stack
      #@ if getattr(dep, "third_party_hosted", False):
      - put: #@ "builds-metadata-{}".format(stack)
        resource: builds
        params:
          repository: #@ "{}-builds-metadata".format(stack)
          rebase: true
      #@ else:
      - in_parallel:
        - put: #@ "buildpacks-bucket-{}-{}".format(dep_name, stack)
          resource: #@ "buildpacks-bucket-{}".format(dep_name)
          params:
            file: #@ "{}-artifacts/{}*".format(stack, "nginx" if dep_name == "nginx-static" else dep_name)
        - put: #@ "builds-metadata-{}".format(stack)
          resource: builds
          params:
            repository: #@ "{}-builds-metadata".format(stack)
            rebase: true
      #@ end
    #@ end
  #@ end
#@   end

#@   for bp_name in dep["buildpacks"]:
#@     bp = dep["buildpacks"][bp_name]
#@     for line_hash in getattr(bp, "lines", []):
- name: #@ "update-{}-{}-{}".format(dep_name.lower(), line_hash["line"].lower(), bp_name.lower())
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: buildpack
      resource: #@ "{}-buildpack".format(bp_name)
    - get: buildpack-latest-released
      resource: #@ "{}-buildpack-latest-released".format(bp_name)
    - get: buildpacks-ci
    - get: source
      resource: #@ "source-{}-{}".format(dep_name.lower(), line_hash["line"].lower())
      passed:
      #@ if getattr(dep, "copy-stacks", None):
      #@   for copy_stack in dep["copy-stacks"]:
      - #@ "copy-{}-{}-{}".format(dep_name.lower(), line_hash["line"].lower(), copy_stack.lower())
      #@   end
      #@ else:
      - #@ "build-{}-{}".format(dep_name.lower(), line_hash["line"].lower())
      #@ end
      version: every
      trigger: true
    #@ for monitored_dep_name in getattr(dep, "monitored_deps", []):
    - get: #@ "source-{}-latest".format(monitored_dep_name.lower())
      trigger: true
      version: every
      passed: 
      - #@ "build-{}-{}".format(dep_name.lower(), line_hash["line"].lower())
    #@ end
    - get: builds
  - task: update-buildpack-dependency
    file: buildpacks-ci/tasks/update-buildpack-dependency/task.yml
    params:
      GPG_SIGNING_KEY_ID: ((cf-buildpacks-eng-gpg-key-id))
      GPG_SIGNING_KEY: ((cf-buildpacks-eng-gpg-key.private_key))
      VERSION_LINE: #@ line_hash["line"]
      VERSION_LINE_TYPE: #@ "nginx" if dep_name == "nginx" and bp_name == "nginx" else get_version_line_type(getattr(bp, "lines", None))
      REMOVAL_STRATEGY: #@ getattr(bp, "removal_strategy", "remove_all")
      DEPRECATION_DATE: #@ getattr(line_hash, "deprecation_date", None)
      DEPRECATION_LINK: #@ getattr(line_hash, "link", None)
      DEPRECATION_MATCH: #@ getattr(line_hash, "match", None)
      GIT_USER_EMAIL: ((cf-buildpacks-app-runtime-interfaces-email))
      GIT_USER_NAME: ((cf-buildpacks-app-runtime-interfaces-name))
    output_mapping:
      artifacts: buildpack
  - put: #@ "{}-pull-request".format(bp_name)
    params:
      repo_location: buildpack
      title: #@ "Updating version for {} for {} ".format(dep_name, line_hash["line"])
      branch_prefix: "pr-by-releng-bot"
      auto_merge: false
      base: master
#@     end
#@   end
#@ end

groups:
- name: all
  jobs:
  #@ for dep_name in data.values.dependencies:
  #@   dep = data.values.dependencies[dep_name]
  #@   version_lines = []
  #@   for bp_name in dep["buildpacks"]:
  #@     bp = dep["buildpacks"][bp_name]
  #@     for line in get_version_lines(getattr(bp, "lines", None), ["latest"]):
  #@       if line not in version_lines:
  #@         version_lines.append(line)
  #@       end
  #@     end
  #@   end
  #@   if is_multiline(dep):
  - #@ "create-{}-new-line-story".format(dep_name.lower())
  #@   end
  #@   for line in version_lines:
  #@     if dep_name.lower() == "node" and line.lower() == "node-lts":
  - #@ "create-{}-{}-story".format(dep_name.lower(), line.lower())
  #@     end
  #@     for stack in getattr(dep, "copy-stacks", []):
  - #@ "copy-{}-{}-{}".format(dep_name.lower(), line.lower(), stack.lower())
  #@     end
  - #@ "build-{}-{}".format(dep_name.lower(), line.lower())
  #@   end
  #@   for bp_name in dep["buildpacks"]:
  #@     bp = dep["buildpacks"][bp_name]
  #@     for line in get_version_lines(getattr(bp, "lines", None), ["latest"]):
  - #@ "update-{}-{}-{}".format(dep_name.lower(), line.lower(), bp_name.lower())
  #@     end
  #@   end
  #@ end

#@ for dep_name in data.values.dependencies:
#@   dep = data.values.dependencies[dep_name]
#@   version_lines = []
  #@   for bp_name in dep["buildpacks"]:
  #@     bp = dep["buildpacks"][bp_name]
#@     for line in get_version_lines(getattr(bp, "lines", None), ["latest"]):
#@       if line not in version_lines:
#@         version_lines.append(line)
#@       end
#@     end
#@   end
- name: #@ dep_name.lower()
  jobs:
  #@   if is_multiline(dep):
  - #@ "create-{}-new-line-story".format(dep_name.lower())
  #@   end
  #@   for line in version_lines:
  #@     if dep_name.lower() == "node" and line.lower() == "node-lts":
  - #@ "create-{}-{}-story".format(dep_name.lower(), line.lower())
  #@     end
  #@     for stack in getattr(dep, "copy-stacks", []):
  - #@ "copy-{}-{}-{}".format(dep_name.lower(), line.lower(), stack.lower())
  #@     end
  - #@ "build-{}-{}".format(dep_name.lower(), line.lower())
  #@   end
  #@   for bp_name in dep["buildpacks"]:
  #@     bp = dep["buildpacks"][bp_name]
  #@     for line in get_version_lines(getattr(bp, "lines", None), ["latest"]):
  - #@ "update-{}-{}-{}".format(dep_name.lower(), line.lower(), bp_name.lower())
  #@     end
  #@   end
#@ end
