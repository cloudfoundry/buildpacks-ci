<% dependencies = {
  appdynamics:        { buildpacks: { php: {} },
                        third_party_hosted: true,
                        source_type: 'appd_agent',
                        any_stack: true },

  bower:              { buildpacks: { 'dotnet-core' => {} },
                        source_type: 'npm',
                        any_stack: true },

  bundler:            { buildpacks: { ruby: {} },
                        source_type: 'rubygems',
                        any_stack: true},

  CAAPM:              { buildpacks: { php: {} },
                        third_party_hosted: true,
                        source_type: 'ca_apm_agent',
                        any_stack: true },

  composer:           { buildpacks: { php: {} },
                        source_type: 'github_releases',
                        source_params: ['repo: composer/composer', 'extension: .phar'],
                        any_stack: true },

  dep:                { buildpacks: { go: {}},
                        source_type: 'github_releases',
                        source_params: ['repo: golang/dep', 'fetch_source: true']},

  'dotnet-sdk':       { buildpacks: {
                          'dotnet-core' => { lines: ["1.0.X", "1.1.X", "2.0.X", "2.1.3X", "2.1.4X"], removal_strategy: 'keep_all' } },
                        source_params: ['tag_regex: ^(v1\.\d+\.\d+|v2\.\d+\.\d+\+dependencies)$'] },

  'dotnet-runtime':   { buildpacks: {
                          'dotnet-core' => { lines: ["1.0.X", "1.1.X", "2.0.X", "2.1.X"], removal_strategy: 'keep_all' } } },

  'dotnet-aspnetcore':  { buildpacks: {
                          'dotnet-core' => { lines: ["2.1.X"], removal_strategy: 'keep_all' } } },

  glide:              { buildpacks: { go: {}},
                        source_type: 'github_releases',
                        source_params: ['repo: Masterminds/glide', 'fetch_source: true'] },

  go:                 { buildpacks: {
                          go: { lines: ["1.8.X", "1.9.X", "1.10.X", "1.11.X"], removal_strategy: 'keep_latest_released' } } },

  godep:              { buildpacks: { go: {}},
                        source_type: 'github_releases',
                        source_params: ['repo: tools/godep', 'fetch_source: true']},

  httpd:              { buildpacks: { php: {} } },

  hwc:                { buildpacks: {
                          hwc: {} },
                        source_type: 'github_releases',
                        source_params: ['repo: cloudfoundry/hwc', 'fetch_source: true'],
                        any_stack: true},

  jruby:              { buildpacks: {
                          ruby: { lines: ["9.1.X", "9.2.X"] }},
                        source_type: 'jruby'},

  libunwind:          { buildpacks: { 'dotnet-core' => {} },
                        source_type: 'github_releases',
                        source_params: ['repo: libunwind/libunwind', 'extension: .tar.gz']},

  miniconda2:         { buildpacks: { python: {} },
                        third_party_hosted: true,
                        source_type: 'miniconda',
                        source_params: ['generation: 2'],
                        any_stack: true },

  miniconda3:         { buildpacks: { python: {} },
                        third_party_hosted: true,
                        source_type: 'miniconda',
                        source_params: ['generation: 3'],
                        any_stack: true },

  nginx:              { buildpacks: {
                          nginx: { lines: ["1.14.X", "1.15.X"] }}},

  'nginx-static':     { buildpacks: {
                          php: { lines: ["1.14.X", "1.15.X"] },
                          staticfile: { lines: ["1.15.X"] } },
                        source_type: 'nginx' },

  node:               { buildpacks: {
                          nodejs: { lines: ["6.X.X", "8.X.X", "9.X.X", "10.X.X", "11.X.X"], removal_strategy: 'keep_latest_released'},
                          ruby: { lines: ["6.X.X"], removal_strategy: 'keep_latest_released'},
                          'dotnet-core' => { lines: ["6.X.X"], removal_strategy: 'keep_latest_released'},
                          'nodejs-cnb' => {lines: ["6.X.X", "8.X.X", "9.X.X", "10.X.X", "11.X.X"], removal_strategy: 'keep_latest_released'}},
                        source_type: 'node'},

  php:                { buildpacks: {
                          php: { lines: ["5.6.X", "7.0.X", "7.1.X", "7.2.X"], removal_strategy: 'keep_latest_released'} },
                        source_type: 'php'},

  pip:                { buildpacks: { python: {} },
                        source_type: 'pypi',
                        any_stack: true },

  pipenv:             { buildpacks: { python: {} },
                        source_type: 'pypi'},

  python:             { buildpacks: {
                          python: { lines: ["2.7.X", "3.4.X", "3.5.X", "3.6.X", "3.7.X"], removal_strategy: 'keep_latest_released' } } },

  r:                  { buildpacks: {
                          r: { lines: ["3.4.X", "3.5.X"], removal_strategy: 'keep_latest_released' } },

                        # We watch for updates to these libraries to trigger rebuilds of R
                        monitored_deps: ['rserve', 'forecast', 'shiny', 'plumber']
                      },

  ruby:               { buildpacks: {
                          ruby: { lines: ["2.2.X", "2.3.X", "2.4.X", "2.5.X"], removal_strategy: 'keep_latest_released' } } },

  rubygems:           { buildpacks: { ruby: {} },
                        source_type: 'rubygems_cli',
                        any_stack: true },

  setuptools:         { buildpacks: { python: {}},
                        source_type: 'pypi',
                        any_stack: true },

  yarn:               { buildpacks: {
                          nodejs: {},
                          ruby: {} },
                        source_type: 'github_releases',
                        source_params: ['repo: yarnpkg/yarn', 'extension: .tar.gz'],
                        any_stack: true }
}

stacks = ['cflinuxfs2', 'cflinuxfs3']
windows_stacks = ['windows2012R2', 'windows2016']
dotnet_sdk_lines_with_aspnetcore = ['2.1.3X', '2.1.4X']
deps_extracted_from_dotnet_sdk = ['dotnet-runtime', 'dotnet-aspnetcore']

skip_build = [
  { dep: 'python', line: '3.7.X', stack: 'cflinuxfs2' },
  { dep: 'php', line: '5.6.X', stack: 'cflinuxfs3'},
  { dep: 'dotnet-sdk', line: '1.0.X', stack: 'cflinuxfs3' },
  { dep: 'node', line: '11.X.X', stack: 'cflinuxfs2' }
]

def validate_dependencies(deps)
  deps.each do |dep_name, dep|
    if !(dep[:buildpacks].values.all? {|bp| bp[:lines].nil? } || dep[:buildpacks].values.all? {|bp| bp[:lines] })
      raise "For #{dep_name}, mixing buildpacks that specify version lines and ones that do not is NOT currently supported"
    end

    if dep[:buildpacks].values.flat_map { |bp| (bp[:lines] || []).map {|l| l.count('X') } }.uniq.length > 1
      raise "For #{dep_name}, overlapping version lines are not supported (e.g. 1.X.X and 1.2.X)"
    end
  end
end

validate_dependencies(dependencies)

def is_multiline?(dep)
  dep[:buildpacks].values.any? { |bp| bp[:lines] }
end

def get_version_line_type(lines)
  return nil if lines.nil?

  line = lines.first
  x_idx = line.index('X')
  case line[0, x_idx].count('.')
  when 1
    'major'
  when 2
    'minor'
  else
    nil
  end
end

def bp_uses_line?(bp_data, line)
  bp_data.dig(:lines).nil? || bp_data[:lines].include?(line)
end
%>

resource_types:
- name: depwatcher
  type: docker-image
  source:
    repository: cfbuildpacks/depwatcher
resources:
- name: binary-builder
  type: git
  source:
    uri: {{binary-builder-git-uri}}
- name: buildpacks-ci
  type: git
  source:
    uri: {{buildpacks-ci-git-uri-public}}
    branch: {{buildpacks-ci-git-uri-public-branch}}
- name: builds
  type: git
  source:
    uri: git@github.com:cloudfoundry/public-buildpacks-ci-robots
    branch: master
    paths: [ binary-builds-new/ ]
    private_key: {{public-buildpacks-ci-robots-private-key}}

<% stacks.each do |stack| %>
- name: <%= stack %>-image
  type: docker-image
  source: {repository: cloudfoundry/<%= stack %>}
<% end %>

<% dependencies.values.map{|dep| dep[:buildpacks].keys}.flatten.uniq.each do |buildpack| %>
<% if buildpack.to_s.include? '-cnb' %>
- name: <%= buildpack %>-buildpack
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>-buildpack.git
    private_key: {{<%= buildpack %>-private-key}}
    branch: master
- name: <%= buildpack %>-buildpack-latest-released
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>-buildpack.git
    private_key: {{<%= buildpack %>-private-key}}
    branch: master
    # TODO: UNCOMMENT LINE BELOW ONCE WE HAVE A RELEASE
    # tag_filter: v*
<% else %>
- name: <%= buildpack %>-buildpack
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>-buildpack.git
    private_key: {{<%= buildpack %>-buildpack-private-key}}
    branch: develop
- name: <%= buildpack %>-buildpack-latest-released
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>-buildpack.git
    private_key: {{<%= buildpack %>-buildpack-private-key}}
    branch: master
<% end %>
<% end %>

<% dependencies.each do |dep_name, dep| %>
<%
  lines = dep[:buildpacks].values.reduce([]) {|sum, bp| sum | (bp[:lines] || [])}
  lines.push('latest')
  lines.each do |line|
%>

- name: source-<%=dep_name%>-<%= line %>
  type: depwatcher
  check_every: 1h
  source:
    type: <%= dep[:source_type] || dep_name %>
    name: <%= dep_name %>
    <% if line != 'latest' %>
    version_filter: <%= line %>
    <% end %>
    <% (dep[:source_params] || []).each do |param| %>
    <%= param %>
    <% end %>
<% end %>

<% dep.fetch(:monitored_deps, []).each do |monitored_dep_name| %>
- name: source-<%= monitored_dep_name %>-latest
  type: depwatcher
  check_every: 1h
  source:
    type: <%= monitored_dep_name %>
    name: <%= monitored_dep_name %>
<% end %>

<% if !dep[:third_party_hosted] %>
- name: buildpacks-bucket-<%=dep_name%>
  type: s3
  source:
    bucket: {{buildpacks-binaries-s3-bucket}}
    access_key_id: {{pivotal-buildpacks-s3-access-key}}
    secret_access_key: {{pivotal-buildpacks-s3-secret-key}}
    # godep has versions of the form 'v80'; everyone else uses 'v1.2.3'
    regexp: dependencies/<%=dep_name%>/<%=dep_name.to_s == 'nginx-static' ? 'nginx' : dep_name %>.*<%= dep_name.to_s == 'godep' ? '(\d+)' : '(\d+.\d+.\d+)' %>(.*)
<% end %>
<% end %>

jobs:
<% dependencies.each do |dep_name, dep| %>
<%
  version_lines = dep[:buildpacks].values.reduce([]) {|sum, bp| sum | (bp[:lines] || [])}
  version_lines = ['latest'] if version_lines.empty?
%>
<% if is_multiline?(dep) %>
- name: create-<%= dep_name %>-new-line-story
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: source
      resource: source-<%= dep_name %>-latest
      trigger: true
      version: every
  - do:
    - task: create-new-version-line-story
      file: buildpacks-ci/tasks/build-binary-new/create-new-version-line-story.yml
      params:
        TRACKER_PROJECT_ID: {{cf-buildpacks-public-tracker-id}}
        TRACKER_REQUESTER_ID: {{cf-buildpacks-requester-id}}
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        BUILDPACKS: <%= dep[:buildpacks].keys.join(' ') %>
        EXISTING_VERSION_LINES: <%= version_lines.join(' ') %>
<% end %>

<% version_lines.each do |line| %>
<% unless deps_extracted_from_dotnet_sdk.include?(dep_name.to_s) %>
- name: create-<%=dep_name%>-<%= line %>-story
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
    <% dep.fetch(:monitored_deps, []).each_with_index do |monitored_dep_name, index| %>
    - get: monitored-dep-<%= index %>
      resource: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
    <% end %>
    - get: builds
  - do:
    <% if dep.key? :monitored_deps %>
    - task: collate-monitored-deps
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cfbuildpacks/ci
        run:
          path: bash
          args:
          - -cl
          - buildpacks-ci/tasks/build-binary-new/transform_monitored_deps.rb
        params:
          DEP_COUNT: <%= dep[:monitored_deps].size %>
        inputs:
          - name: buildpacks-ci
          <% dep[:monitored_deps].each_index do |index| %>
          - name: monitored-dep-<%= index %>
          <% end %>
        outputs:
          - name: all-monitored-deps
    <% end %>
    - task: create-tracker-story
      file: buildpacks-ci/tasks/build-binary-new/create.yml
      params:
        TRACKER_PROJECT_ID: {{cf-buildpacks-public-tracker-id}}
        TRACKER_REQUESTER_ID: {{cf-buildpacks-requester-id}}
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        BUILDPACKS: <%= dep[:buildpacks].select{ |_, bp_data| bp_uses_line?(bp_data,line) }.keys.join(' ') %>
    - put: builds
      params:
        repository: builds-artifacts
        rebase: true

- name: finish-<%=dep_name%>-<%= line %>-story
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed:
      <% dep[:buildpacks].each do |bp_name, bp_data| %>
        <% if bp_uses_line?(bp_data, line) %>
        - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
        <% end %>
      <% end %>
    <% dep.fetch(:monitored_deps, []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed:
      <% dep[:buildpacks].each do |bp_name, bp_data| %>
        <% if bp_uses_line?(bp_data, line) %>
        - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
        <% end %>
      <% end %>
    <% end %>
    - get: builds
  - do:
    - task: finish-<%=dep_name%>-<%= line %>-story
      file: buildpacks-ci/tasks/build-binary-new/finish.yml
      params:
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        TRACKER_PROJECT_ID: {{cf-buildpacks-public-tracker-id}}

<% if dep_name.to_s == 'node' %>
- name: copy-<%=dep_name%>-<%= line %>-bionic
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
    - get: builds
  - do:
    - task: write-bionic-metadata
      file: buildpacks-ci/tasks/write-bionic-metadata/task.yml
    - put: bionic-builds-metadata
      resource: builds
      params:
        repository: builds-artifacts
        rebase: true
<% end %>

- name: build-<%=dep_name%>-<%= line %>
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: binary-builder
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
    <% dep.fetch(:monitored_deps, []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
    <% end %>
    <% stacks.each do |stack| %>
    - get: <%= stack %>-image
    <% end %>
    - get: builds
  - aggregate:
    <% build_stacks = dep[:any_stack] ? ['any-stack'] : stacks %>
    <% build_stacks.each do |stack| %>
    <% unless skip_build.include?({ dep: dep_name.to_s, line: line, stack: stack}) %>
    - do:
      - task: build-binary-<%= stack %>
        image: <%= if dep_name.to_s == 'bundler' then 'cflinuxfs2' elsif stack == 'any-stack' then stacks.last else stack end%>-image
        file: buildpacks-ci/tasks/build-binary-new/build.yml
        output_mapping: {artifacts: <%= stack %>-artifacts, builds-artifacts: <%= stack %>-builds-metadata}
        params:
          STACK: <%= stack %>
      - aggregate:
        <% if !dep[:third_party_hosted] %>
        - put: buildpacks-bucket-<%= dep_name %>-<%= stack %>
          resource: buildpacks-bucket-<%= dep_name %>
          params:
            file: <%= stack %>-artifacts/<%= dep_name.to_s == "nginx-static" ? "nginx" : dep_name %>*
        <% if dep_name.to_s == 'dotnet-sdk' %>
        - put: buildpacks-bucket-dotnet-runtime-<%= stack %>
          resource: buildpacks-bucket-dotnet-runtime
          params:
            file: <%= stack %>-artifacts/dotnet-runtime*
        <% if dotnet_sdk_lines_with_aspnetcore.include?(line) %>
        - put: buildpacks-bucket-dotnet-aspnetcore-<%= stack %>
          resource: buildpacks-bucket-dotnet-aspnetcore
          params:
            file: <%= stack %>-artifacts/dotnet-aspnetcore*
        <% end %>
        <% end %>
        <% end %>
        - put: builds-metadata-<%= stack %>
          resource: builds
          params:
            repository: <%= stack %>-builds-metadata
            rebase: true
    <% end %>
    <% end %>
 <% end %>
 <% end %>

<% dep[:buildpacks].each do |bp_name, bp| %>
  <% (bp[:lines] || ['latest']).each do |line| %>
- name: update-<%=dep_name%>-<%= line %>-<%= bp_name %>
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpack
      resource: <%= bp_name %>-buildpack
    - get: buildpack-latest-released
      resource: <%= bp_name %>-buildpack-latest-released
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      <% unless deps_extracted_from_dotnet_sdk.include?(dep_name.to_s) %>
      <% must_pass = ["build-#{dep_name}-#{line}"] %>
      <% must_pass.push("copy-#{dep_name}-#{line}-bionic") if bp_name.to_s.include? '-cnb' %>
      passed: <%= must_pass %>
      <% end %>
      version: every
      trigger: true
    <% dep.fetch(:monitored_deps, []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed: [<%= "build-#{dep_name}-#{line}" %>]
    <% end %>
    - get: builds
  - do:
    - task: update-buildpack-dependency
      <% if bp_name.to_s.include? '-cnb' %>
      file: buildpacks-ci/tasks/update-cnb-dependency/task.yml
      <% else %>
      file: buildpacks-ci/tasks/update-buildpack-dependency/task.yml
      <% end %>
      params:
        VERSION_LINE: <%= if dep_name == :nginx && bp_name == :nginx then 'nginx' else get_version_line_type(bp[:lines]) end %>
        REMOVAL_STRATEGY: <%= bp.fetch(:removal_strategy, 'remove_all') %>
    - put: <%= bp_name %>-buildpack
      params:
        repository: artifacts
        rebase: true
  <% end %>
  <% end %>
<% end %>

groups:
  - name: all
    jobs:
<% dependencies.each do |dep_name, dep| %>
<%
  version_lines = dep[:buildpacks].values.reduce([]) {|sum, bp| sum | (bp[:lines] || [])}
  version_lines = ['latest'] if version_lines.empty?
%>
    <% if is_multiline?(dep) %>
    - create-<%= dep_name %>-new-line-story
    <% end %>
    <% version_lines.each do |line| %>
    <% unless deps_extracted_from_dotnet_sdk.include?(dep_name.to_s) %>
    - create-<%=dep_name%>-<%= line %>-story
    - finish-<%=dep_name%>-<%= line %>-story
    <% if dep_name.to_s == 'node' %>
    - copy-<%=dep_name%>-<%= line %>-bionic
    <% end %>
    - build-<%=dep_name%>-<%= line %>
    <% end %>
    <% end %>
    <% dep[:buildpacks].each do |bp_name, bp| %>
    <% (bp[:lines] || ['latest']).each do |line| %>
    - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
    <% end %>
<% end %>
<% end %>

<% dependencies.each do |dep_name, dep| %>
<%
  version_lines = dep[:buildpacks].values.reduce([]) {|sum, bp| sum | (bp[:lines] || [])}
  version_lines = ['latest'] if version_lines.empty?
%>
  - name: <%= dep_name %>
    jobs:
    <% if is_multiline?(dep) %>
    - create-<%= dep_name %>-new-line-story
    <% end %>
    <% version_lines.each do |line| %>
    <% unless deps_extracted_from_dotnet_sdk.include?(dep_name.to_s) %>
    - create-<%=dep_name%>-<%= line %>-story
    - finish-<%=dep_name%>-<%= line %>-story
    <% if dep_name.to_s == 'node' %>
    - copy-<%=dep_name%>-<%= line %>-bionic
    <% end %>
    - build-<%=dep_name%>-<%= line %>
    <% end %>
    <% end %>
    <% dep[:buildpacks].each do |bp_name, bp| %>
    <% (bp[:lines] || ['latest']).each do |line| %>
    - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
    <% end %>
    <% end %>
<% end %>
