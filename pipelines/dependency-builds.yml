<%
require 'yaml'
require 'set'
config = YAML.load_file(File.join(__dir__, 'config', 'dependency-builds.yml'))

dependencies = config['dependencies']
stacks = config['stacks']
dotnet_sdk_lines_with_aspnetcore = config['dotnet_sdk_lines_with_aspnetcore']
skip_deprecation_check = config['skip_deprecation_check']

def common_prefix(stringA, stringB)
  max_len = 0
  (0..[stringA.size, stringB.size].min).each do |idx|
    if stringA[idx] == stringB[idx]
      max_len = idx+1
    else
      break
    end
  end
  stringA.slice(0,max_len)
end

def check_for_lines_overlap(lines_array)
  partition_hash = {}
  lines_array.each do|i|
    x_count = i.count('X')
    if partition_hash[x_count]
      partition_hash[x_count] += [i]
    else
      partition_hash[x_count] = [i]
    end
  end
  pairs = partition_hash.keys.combination(2).to_a.each do |p1, p2|
    partition_hash[p1].product(partition_hash[p2]).each do |strA, strB|
      return true if common_prefix(strA,strB) != ''
    end
  end
  false
end


def validate_dependencies(deps, skip_deprecation_check)
  deps.each do |dep_name, dep|
    if !(dep['buildpacks'].values.all? {|bp| bp['lines'].nil? } || dep['buildpacks'].values.all? {|bp| bp['lines'] })
      raise "For #{dep_name}, mixing buildpacks that specify version lines and ones that do not is NOT currently supported"
    end

  if check_for_lines_overlap(dep['buildpacks'].values.flat_map { |bp| get_version_lines(bp['lines'])})
      raise "For #{dep_name}, overlapping version lines are not supported (e.g. 1.X.X and 1.2.X)"
    end

  # validate dep dates -  if dep is not in skip_deprecation it must have deprecation dates for all version lines
    if is_multiline?(dep) && !(skip_deprecation_check.include?(dep_name))
      lines_missing = get_all_lines_missing_deprecation_dates(dep)
      if lines_missing.any?
        raise "For #{dep_name}, there are missing deprecation dates for these version lines: #{lines_missing}"
      end
    end

  end
end

def get_all_lines_missing_deprecation_dates(dep)
  # return an array of hashes which are lines missing deprecation dates across all relevant buildpacks for given dep
  dep['buildpacks'].values.reduce([]) {|sum, bp| sum | get_lines_missing_deprecation_dates(bp['lines'])}
end

def get_lines_missing_deprecation_dates(bp_lines)
  # return only the hashes missing deprecation dates from an array of hashes
  bp_lines&.select{|line_hash| line_hash['deprecation_date'].nil?}.map{|line_hash| line_hash['line']}
end

def get_version_lines(bp_lines, default_return = [])
  bp_lines&.map { |ln| ln['line']} || default_return
end

def is_multiline?(dep)
  dep['buildpacks'].values.map{ |ln| get_version_lines(ln['lines']).select {|ver| ver != 'latest'} }.flatten.any?
end

validate_dependencies(dependencies, skip_deprecation_check)

def get_version_line_type(lines)
  return nil if lines.nil?

  line = lines.first['line']
  x_idx = line.to_s.downcase.index('x')
  return nil unless x_idx
  case line.to_s[0, x_idx].count('.')
  when 1
    'major'
  when 2
    'minor'
  else
    nil
  end
end

def bp_uses_line?(bp_data, line)
  lines_present = get_version_lines(bp_data['lines']).nil?
  !lines_present && get_version_lines(bp_data['lines']).include?(line)
end

def get_git_uri(buildpack)
  if buildpack.include? '-cnb'
    return "git@github.com:cloudfoundry/#{buildpack}.git"
  else
    bp_uri = "git@github.com:cloudfoundry/#{buildpack}-buildpack.git"
  end
end

def is_child_cnb(dep_name)
  dep_name.start_with?('org.cloudfoundry')
end
%>

resource_types:
- name: depwatcher
  type: docker-image
  source:
    repository: cfbuildpacks/depwatcher
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

resources:
- name: binary-builder
  type: git
  source:
    uri: {{binary-builder-git-uri}}
- name: buildpacks-ci
  type: git
  source:
    uri: {{buildpacks-ci-git-uri-public}}
    branch: {{buildpacks-ci-git-uri-public-branch}}
- name: builds
  type: git
  source:
    uri: git@github.com:cloudfoundry/public-buildpacks-ci-robots
    branch: master
    paths: [ binary-builds-new/ ]
    private_key: {{public-buildpacks-ci-robots-private-key}}

<% stacks.each do |stack| %>
- name: <%= stack %>-image
  type: docker-image
  source: {repository: cloudfoundry/<%= stack %>}
<% end %>

<% dependencies.values.select{|dep| dep.fetch('branch', 'develop') == 'v3' }.map{|dep| dep['buildpacks'].keys}.flatten.uniq.each do |buildpack| %>
- name: <%= buildpack %>-buildpack-v3
  type: git
  source:
    uri: <%= get_git_uri(buildpack) %>
    private_key: {{cf-buildpacks-eng-github-ssh-key}}
    branch: v3
<% end %>

<% dependencies.values.map{|dep| dep['buildpacks'].keys}.flatten.uniq.each do |buildpack|
branch = 'develop'
if buildpack.include? '-cnb'
  branch = 'master'
end
%>
- name: <%= buildpack %>-buildpack
  type: git
  source:
    uri: <%= get_git_uri(buildpack) %>
    private_key: {{cf-buildpacks-eng-github-ssh-key}}
    branch: <%= branch %>
- name: <%= buildpack %>-buildpack-latest-released
  type: git
  source:
    uri: <%= get_git_uri(buildpack) %>
    private_key: {{cf-buildpacks-eng-github-ssh-key}}
    branch: master
    <% if buildpack.include? '-cnb' %>
    tag_filter: v*
    <% end %>
<% end %>

<% dependencies.each do |dep_name, dep| %>
<%
  lines = dep['buildpacks'].values.reduce([]) {|sum, bp| sum | get_version_lines(bp['lines'])}
  lines.push('latest') unless lines.include?('latest')
  lines.each do |line|
%>

- name: source-<%=dep_name%>-<%= line %>
  type: depwatcher
  check_every: 1h
  source:
    type: <%= dep['source_type'] || dep_name %>
    name: <%= dep_name %>
    <% if line != 'latest' %>
    version_filter: <%= line %>
    <% end %>
    <% (dep['source_params'] || []).each do |param| %>
    <%= param %>
    <% end %>
<% end %>

<% dep.fetch('monitored_deps', []).each do |monitored_dep_name| %>
- name: source-<%= monitored_dep_name %>-latest
  type: depwatcher
  check_every: 1h
  source:
    type: <%= monitored_dep_name %>
    name: <%= monitored_dep_name %>
<% end %>

<% if !dep['third_party_hosted'] %>
- name: buildpacks-bucket-<%=dep_name%>
  type: s3
  source:
    bucket: {{buildpacks-binaries-s3-bucket}}
    access_key_id: {{pivotal-buildpacks-s3-access-key}}
    secret_access_key: {{pivotal-buildpacks-s3-secret-key}}
    # godep has versions of the form 'v80'; everyone else uses 'v1.2.3'
    regexp: dependencies/<%=dep_name%>/<%=dep_name == 'nginx-static' ? 'nginx' : dep_name %>.*<%= dep_name == 'godep' ? '(\d+)' : '(\d+.\d+.\d+)' %>(.*)
<% end %>
<% end %>
  ## Alerts ##

- name: failure-alert
  type: slack-notification
  source:
    url: {{dependency-notifier-slack-webhook}}

jobs:
<% dependencies.each do |dep_name, dep| %>
<% version_lines = dep['buildpacks'].values.reduce([]) {|sum, bp| sum | get_version_lines(bp['lines'], ['latest'])} %>
<% if is_multiline?(dep) %>
- name: create-<%= dep_name %>-new-line-story
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: source
      resource: source-<%= dep_name %>-latest
      trigger: true
      version: every
  - do:
    - task: create-new-version-line-story
      file: buildpacks-ci/tasks/build-binary-new/create-new-version-line-story.yml
      params:
        TRACKER_PROJECT_ID: '{{cf-buildpacks-rel-eng-tracker-id}}'
        TRACKER_REQUESTER_ID: '{{cf-buildpacks-requester-id}}'
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        BUILDPACKS: <%= dep['buildpacks'].keys.join(' ') %>
        EXISTING_VERSION_LINES: <%= version_lines.join(' ') %>
<% end %>

<% version_lines.each do |line| %>
- name: create-<%=dep_name%>-<%= line %>-story
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
  <% dep.fetch('monitored_deps', []).each_with_index do |monitored_dep_name, index| %>
    - get: monitored-dep-<%= index %>
      resource: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
  <% end %>
    - get: builds
  - do:
  <% if dep.key? 'monitored_deps' %>
    - task: collate-monitored-deps
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cfbuildpacks/ci
        run:
          path: bash
          args:
          - -cl
          - buildpacks-ci/tasks/build-binary-new/transform_monitored_deps.rb
        params:
          DEP_COUNT: <%= dep['monitored_deps'].size %>
        inputs:
          - name: buildpacks-ci
        <% dep['monitored_deps'].each_index do |index| %>
          - name: monitored-dep-<%= index %>
        <% end %>
        outputs:
          - name: all-monitored-deps
  <% end %>
    - task: create-tracker-story
      file: buildpacks-ci/tasks/build-binary-new/create.yml
      params:
        TRACKER_PROJECT_ID: '{{cf-buildpacks-rel-eng-tracker-id}}'
        TRACKER_REQUESTER_ID: '{{cf-buildpacks-requester-id}}'
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        BUILDPACKS: <%= dep['buildpacks'].select{ |_, bp_data| bp_uses_line?(bp_data,line) }.keys.join(' ') %>
        CHILD_CNB: <%= is_child_cnb(dep_name) %>
    - put: builds
      params:
        repository: builds-artifacts
        rebase: true
  on_failure:
    put: failure-alert
    params:
      channel: {{dependency-notifier-slack-channel}}
      text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
      username: concourse

  <% if !is_child_cnb(dep_name) %>
- name: finish-<%=dep_name%>-<%= line %>-story
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed:
    <% dep['buildpacks'].each do |bp_name, bp_data| %>
      <% if bp_uses_line?(bp_data, line) %>
        - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
      <% end %>
    <% end %>
    <% dep.fetch('monitored_deps', []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed:
      <% dep['buildpacks'].each do |bp_name, bp_data| %>
        <% if bp_uses_line?(bp_data, line) %>
        - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
        <% end %>
      <% end %>
    <% end %>
    - get: builds
  - do:
    - task: finish-<%=dep_name%>-<%= line %>-story
      file: buildpacks-ci/tasks/build-binary-new/finish.yml
      params:
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        TRACKER_PROJECT_ID: '{{cf-buildpacks-rel-eng-tracker-id}}'
  <% end %>


  <% if dep_name == 'node' || dep_name == 'go' %>
- name: copy-<%=dep_name%>-<%= line %>-bionic
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
    - get: builds
  - do:
    - task: write-bionic-metadata
      file: buildpacks-ci/tasks/write-bionic-metadata/task.yml
    - put: bionic-builds-metadata
      resource: builds
      params:
        repository: builds-artifacts
        rebase: true
  <% end %>

- name: build-<%=dep_name%>-<%= line %>
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: buildpacks-ci
    - get: binary-builder
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
  <% dep.fetch('monitored_deps', []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
  <% end %>
  <% stacks.each do |stack| %>
    - get: <%= stack %>-image
  <% end %>
    - get: builds
  - in_parallel:
  <% build_stacks = dep['any_stack'] ? ['any-stack'] : stacks %>
  <% build_stacks.each do |stack| %>
    - do:
      - task: build-binary-<%= stack %>
        image: <%= stack == 'any-stack' ? stacks.last : stack %>-image
        file: buildpacks-ci/tasks/build-binary-new/build.yml
        output_mapping: {artifacts: <%= stack %>-artifacts, builds-artifacts: <%= stack %>-builds-metadata}
        params:
          STACK: <%= stack %>
      - in_parallel:
    <% if !dep['third_party_hosted'] %>
        - put: buildpacks-bucket-<%= dep_name %>-<%= stack %>
          resource: buildpacks-bucket-<%= dep_name %>
          params:
            file: <%= stack %>-artifacts/<%= dep_name == "nginx-static" ? "nginx" : dep_name %>*
      <% if dep_name == 'dotnet-sdk' %>
        - put: buildpacks-bucket-dotnet-runtime-<%= stack %>
          resource: buildpacks-bucket-dotnet-runtime
          params:
            file: <%= stack %>-artifacts/dotnet-runtime*
        <% if dotnet_sdk_lines_with_aspnetcore.include?(line) %>
        - put: buildpacks-bucket-dotnet-aspnetcore-<%= stack %>
          resource: buildpacks-bucket-dotnet-aspnetcore
          params:
            file: <%= stack %>-artifacts/dotnet-aspnetcore*
        <% end %>
      <% end %>
    <% end %>
        - put: builds-metadata-<%= stack %>
          resource: builds
          params:
            repository: <%= stack %>-builds-metadata
            rebase: true
  <% end %>
<% end %>

<% dep['buildpacks'].each do |bp_name, bp| %>
  <% bp.fetch('lines', []).each do |line_hash| %>
- name: update-<%=dep_name%>-<%= line_hash['line'] %>-<%= bp_name %>
  serial: true
  public: true
  plan:
  - in_parallel:
    <% if dep['branch'] == 'v3' %>
    - get: buildpack
      resource: <%= bp_name %>-buildpack-v3
    - get: buildpack-latest-released
      resource: <%= bp_name %>-buildpack-v3
    <% else %>
    - get: buildpack
      resource: <%= bp_name %>-buildpack
    - get: buildpack-latest-released
      resource: <%= bp_name %>-buildpack-latest-released
    <% end %>
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line_hash['line'] %>
      <% must_pass = ["build-#{dep_name}-#{line_hash['line']}"] %>
      <% must_pass.push("copy-#{dep_name}-#{line_hash['line']}-bionic") if (bp_name.include? 'node-engine-cnb') || (bp_name.include? 'go-compiler-cnb')  %>
      passed: <%= must_pass %>
      version: every
      trigger: true
    <% dep.fetch('monitored_deps', []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed: [<%= "build-#{dep_name}-#{line_hash['line']}" %>]
    <% end %>
    - get: builds
  - do:
   <% [
      { 'name' => 'update-buildpack-dependency', 'path' => 'buildpacks-ci/tasks/update-buildpack-dependency/task.yml', 'type' => Set['buildpack', 'shim'] },
      { 'name' => 'update-cnb-dependency', 'path' => 'buildpacks-ci/tasks/update-cnb-dependency/task.yml', 'type' => Set['cnb'] }
    ].each do |task| %>
      <% is_v3 = bp_name.include?('cnb') %>
      <% should_do_shim = bp['shim'] && task['type'].include?('shim') %>
      <% should_do_cnb = is_v3 && task['type'].include?('cnb') && !dep_name.include?('compat') %>
      <% should_do_reg = !is_v3 && task['type'].include?('buildpack') %>
      <% if should_do_cnb || should_do_reg || should_do_shim  %>
    - task: <%= task['name'] %>
      file: <%= task['path'] %>
      params:
        VERSION_LINE_TYPE: <%= if dep_name == 'nginx' && bp_name == 'nginx' then 'nginx' else get_version_line_type(bp['lines']) end %>
        REMOVAL_STRATEGY: <%= bp.fetch('removal_strategy', 'remove_all') %>
        DEPRECATION_DATE: <%= line_hash['deprecation_date'] %>
        DEPRECATION_LINK: <%= line_hash['link'] %>
        DEPRECATION_MATCH: <%= line_hash['match'] %>
        VERSION_LINE: <%= line_hash['line'] %>
      output_mapping:
        artifacts: buildpack
      <% end %>
    <% end %>
    - put: <%= bp_name %>-buildpack<%= '-v3' if dep['branch'] == 'v3' %>
      params:
        repository: buildpack
        rebase: true
  <% end %>
  <% end %>
<% end %>

groups:
  - name: all
    jobs:
<% dependencies.each do |dep_name, dep| %>
<% version_lines = dep['buildpacks'].values.reduce([]) {|sum, bp| sum | get_version_lines(bp['lines'], ['latest'])} %>
    <% if is_multiline?(dep) %>
    - create-<%= dep_name %>-new-line-story
    <% end %>
    <% version_lines.each do |line| %>
    - create-<%=dep_name%>-<%= line %>-story
    <% if !is_child_cnb(dep_name) %>
    - finish-<%=dep_name%>-<%= line %>-story
    <% end %>
    <% if dep_name == 'node' || dep_name == 'go' %>
    - copy-<%=dep_name%>-<%= line %>-bionic
    <% end %>
    - build-<%=dep_name%>-<%= line %>
    <% end %>
    <% dep['buildpacks'].each do |bp_name, bp| %>
    <% get_version_lines(bp['lines'], ['latest']).each do |line| %>
    - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
    <% end %>
<% end %>
<% end %>

<% dependencies.each do |dep_name, dep| %>
<% version_lines = dep['buildpacks'].values.reduce([]) {|sum, bp| sum | get_version_lines(bp['lines'], ['latest'])} %>
  - name: <%= dep_name %>
    jobs:
    <% if is_multiline?(dep) %>
    - create-<%= dep_name %>-new-line-story
    <% end %>
    <% version_lines.each do |line| %>
    - create-<%=dep_name%>-<%= line %>-story
    <% if !is_child_cnb(dep_name) %>
    - finish-<%=dep_name%>-<%= line %>-story
    <% end %>
    <% if dep_name == 'node' || dep_name == 'go' %>
    - copy-<%=dep_name%>-<%= line %>-bionic
    <% end %>
    - build-<%=dep_name%>-<%= line %>
    <% end %>
    <% dep['buildpacks'].each do |bp_name, bp| %>
    <% get_version_lines(bp['lines'], ['latest']).each do |line| %>
    - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
    <% end %>
    <% end %>
<% end %>
