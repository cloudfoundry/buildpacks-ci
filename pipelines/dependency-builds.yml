<%
require 'yaml'
config = YAML.load_file(File.join(__dir__, 'config', 'dependency-builds.yml'))

dependencies = config['dependencies']
stacks = config['stacks']
windows_stacks = config['windows_stacks']
dotnet_sdk_lines_with_aspnetcore = config['dotnet_sdk_lines_with_aspnetcore']
deps_extracted_from_dotnet_sdk = config['deps_extracted_from_dotnet_sdk']
skip_build = config['skip_build']

def validate_dependencies(deps)
  deps.each do |dep_name, dep|
    if !(dep['buildpacks'].values.all? {|bp| bp['lines'].nil? } || dep['buildpacks'].values.all? {|bp| bp['lines'] })
      raise "For #{dep_name}, mixing buildpacks that specify version lines and ones that do not is NOT currently supported"
    end

    if dep['buildpacks'].values.flat_map { |bp| (bp['lines'] || []).map {|l| l.count('X') } }.uniq.length > 1
      raise "For #{dep_name}, overlapping version lines are not supported (e.g. 1.X.X and 1.2.X)"
    end
  end
end

validate_dependencies(dependencies)

def is_multiline?(dep)
  dep['buildpacks'].values.any? { |bp| bp['lines'] }
end

def get_version_line_type(lines)
  return nil if lines.nil?

  line = lines.first
  x_idx = line.index('X')
  case line[0, x_idx].count('.')
  when 1
    'major'
  when 2
    'minor'
  else
    nil
  end
end

def bp_uses_line?(bp_data, line)
  bp_data.dig('lines').nil? || bp_data['lines'].include?(line)
end
%>

resource_types:
- name: depwatcher
  type: docker-image
  source:
    repository: cfbuildpacks/depwatcher
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

resources:
- name: binary-builder
  type: git
  source:
    uri: {{binary-builder-git-uri}}
- name: buildpacks-ci
  type: git
  source:
    uri: {{buildpacks-ci-git-uri-public}}
    branch: {{buildpacks-ci-git-uri-public-branch}}
- name: builds
  type: git
  source:
    uri: git@github.com:cloudfoundry/public-buildpacks-ci-robots
    branch: master
    paths: [ binary-builds-new/ ]
    private_key: {{public-buildpacks-ci-robots-private-key}}

<% stacks.each do |stack| %>
- name: <%= stack %>-image
  type: docker-image
  source: {repository: cloudfoundry/<%= stack %>}
<% end %>

<% dependencies.values.select{|dep| dep.fetch('branch', 'develop') == 'v3' }.map{|dep| dep['buildpacks'].keys}.flatten.uniq.each do |buildpack| %>
- name: <%= buildpack %>-buildpack-v3
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>-buildpack.git
    private_key: {{cf-buildpacks-eng-github-ssh-key}}
    branch: v3
<% end %>

<% dependencies.values.map{|dep| dep['buildpacks'].keys}.flatten.uniq.each do |buildpack| %>
<% if buildpack.include? '-cnb' %>
- name: <%= buildpack %>-buildpack
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>.git
    private_key: {{cf-buildpacks-eng-github-ssh-key}}
    branch: master
- name: <%= buildpack %>-buildpack-latest-released
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>.git
    private_key: {{cf-buildpacks-eng-github-ssh-key}}
    branch: master
    tag_filter: v*
<% else %>
- name: <%= buildpack %>-buildpack
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>-buildpack.git
    private_key: {{cf-buildpacks-eng-github-ssh-key}}
    branch: develop
- name: <%= buildpack %>-buildpack-latest-released
  type: git
  source:
    uri: git@github.com:cloudfoundry/<%= buildpack %>-buildpack.git
    private_key: {{cf-buildpacks-eng-github-ssh-key}}
    branch: master
<% end %>
<% end %>

<% dependencies.each do |dep_name, dep| %>
<%
  lines = dep['buildpacks'].values.reduce([]) {|sum, bp| sum | (bp['lines'] || [])}
  lines.push('latest')
  lines.each do |line|
%>

- name: source-<%=dep_name%>-<%= line %>
  type: depwatcher
  check_every: 1h
  source:
    type: <%= dep['source_type'] || dep_name %>
    name: <%= dep_name %>
    <% if line != 'latest' %>
    version_filter: <%= line %>
    <% end %>
    <% (dep['source_params'] || []).each do |param| %>
    <%= param %>
    <% end %>
<% end %>

<% dep.fetch('monitored_deps', []).each do |monitored_dep_name| %>
- name: source-<%= monitored_dep_name %>-latest
  type: depwatcher
  check_every: 1h
  source:
    type: <%= monitored_dep_name %>
    name: <%= monitored_dep_name %>
<% end %>

<% if !dep['third_party_hosted'] %>
- name: buildpacks-bucket-<%=dep_name%>
  type: s3
  source:
    bucket: {{buildpacks-binaries-s3-bucket}}
    access_key_id: {{pivotal-buildpacks-s3-access-key}}
    secret_access_key: {{pivotal-buildpacks-s3-secret-key}}
    # godep has versions of the form 'v80'; everyone else uses 'v1.2.3'
    regexp: dependencies/<%=dep_name%>/<%=dep_name == 'nginx-static' ? 'nginx' : dep_name %>.*<%= dep_name == 'godep' ? '(\d+)' : '(\d+.\d+.\d+)' %>(.*)
<% end %>
<% end %>
  ## Alerts ##

- name: failure-alert
  type: slack-notification
  source:
    url: {{dependency-notifier-slack-webhook}}

jobs:
<% dependencies.each do |dep_name, dep| %>
<%
  version_lines = dep['buildpacks'].values.reduce([]) {|sum, bp| sum | (bp['lines'] || [])}
  version_lines = ['latest'] if version_lines.empty?
%>
<% if is_multiline?(dep) %>
- name: create-<%= dep_name %>-new-line-story
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: source
      resource: source-<%= dep_name %>-latest
      trigger: true
      version: every
  - do:
    - task: create-new-version-line-story
      file: buildpacks-ci/tasks/build-binary-new/create-new-version-line-story.yml
      params:
        TRACKER_PROJECT_ID: '{{cf-buildpacks-public-tracker-id}}'
        TRACKER_REQUESTER_ID: '{{cf-buildpacks-requester-id}}'
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        BUILDPACKS: <%= dep['buildpacks'].keys.join(' ') %>
        EXISTING_VERSION_LINES: <%= version_lines.join(' ') %>
<% end %>

<% version_lines.each do |line| %>
<% unless deps_extracted_from_dotnet_sdk.include?(dep_name) %>
- name: create-<%=dep_name%>-<%= line %>-story
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
    <% dep.fetch('monitored_deps', []).each_with_index do |monitored_dep_name, index| %>
    - get: monitored-dep-<%= index %>
      resource: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
    <% end %>
    - get: builds
  - do:
    <% if dep.key? 'monitored_deps' %>
    - task: collate-monitored-deps
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: cfbuildpacks/ci
        run:
          path: bash
          args:
          - -cl
          - buildpacks-ci/tasks/build-binary-new/transform_monitored_deps.rb
        params:
          DEP_COUNT: <%= dep['monitored_deps'].size %>
        inputs:
          - name: buildpacks-ci
          <% dep['monitored_deps'].each_index do |index| %>
          - name: monitored-dep-<%= index %>
          <% end %>
        outputs:
          - name: all-monitored-deps
    <% end %>
    - task: create-tracker-story
      file: buildpacks-ci/tasks/build-binary-new/create.yml
      params:
        TRACKER_PROJECT_ID: '{{cf-buildpacks-public-tracker-id}}'
        TRACKER_REQUESTER_ID: '{{cf-buildpacks-requester-id}}'
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        BUILDPACKS: <%= dep['buildpacks'].select{ |_, bp_data| bp_uses_line?(bp_data,line) }.keys.join(' ') %>
    - put: builds
      params:
        repository: builds-artifacts
        rebase: true
  on_failure:
    put: failure-alert
    params:
      channel: {{dependency-notifier-slack-channel}}
      text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
      username: concourse


- name: finish-<%=dep_name%>-<%= line %>-story
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed:
      <% dep['buildpacks'].each do |bp_name, bp_data| %>
        <% if bp_uses_line?(bp_data, line) %>
        - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
        <% end %>
      <% end %>
    <% dep.fetch('monitored_deps', []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed:
      <% dep['buildpacks'].each do |bp_name, bp_data| %>
        <% if bp_uses_line?(bp_data, line) %>
        - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
        <% end %>
      <% end %>
    <% end %>
    - get: builds
  - do:
    - task: finish-<%=dep_name%>-<%= line %>-story
      file: buildpacks-ci/tasks/build-binary-new/finish.yml
      params:
        TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
        TRACKER_PROJECT_ID: '{{cf-buildpacks-public-tracker-id}}'

<% if dep_name == 'node' %>
- name: copy-<%=dep_name%>-<%= line %>-bionic
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
    - get: builds
  - do:
    - task: write-bionic-metadata
      file: buildpacks-ci/tasks/write-bionic-metadata/task.yml
    - put: bionic-builds-metadata
      resource: builds
      params:
        repository: builds-artifacts
        rebase: true
<% end %>

- name: build-<%=dep_name%>-<%= line %>
  serial: true
  public: true
  plan:
  - aggregate:
    - get: buildpacks-ci
    - get: binary-builder
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
    <% dep.fetch('monitored_deps', []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed: [ create-<%=dep_name%>-<%= line %>-story ]
    <% end %>
    <% stacks.each do |stack| %>
    - get: <%= stack %>-image
    <% end %>
    - get: builds
  - aggregate:
    <% build_stacks = dep['any_stack'] ? ['any-stack'] : stacks %>
    <% build_stacks.each do |stack| %>
    <% unless skip_build.include?({ 'dep' => dep_name, 'line' => line, 'stack' => stack}) %>
    - do:
      - task: build-binary-<%= stack %>
        image: <%= if dep_name == 'bundler' then 'cflinuxfs2' elsif stack == 'any-stack' then stacks.last else stack end%>-image
        file: buildpacks-ci/tasks/build-binary-new/build.yml
        output_mapping: {artifacts: <%= stack %>-artifacts, builds-artifacts: <%= stack %>-builds-metadata}
        params:
          STACK: <%= stack %>
      - aggregate:
        <% if !dep['third_party_hosted'] %>
        - put: buildpacks-bucket-<%= dep_name %>-<%= stack %>
          resource: buildpacks-bucket-<%= dep_name %>
          params:
            file: <%= stack %>-artifacts/<%= dep_name == "nginx-static" ? "nginx" : dep_name %>*
        <% if dep_name == 'dotnet-sdk' %>
        - put: buildpacks-bucket-dotnet-runtime-<%= stack %>
          resource: buildpacks-bucket-dotnet-runtime
          params:
            file: <%= stack %>-artifacts/dotnet-runtime*
        <% if dotnet_sdk_lines_with_aspnetcore.include?(line) %>
        - put: buildpacks-bucket-dotnet-aspnetcore-<%= stack %>
          resource: buildpacks-bucket-dotnet-aspnetcore
          params:
            file: <%= stack %>-artifacts/dotnet-aspnetcore*
        <% end %>
        <% end %>
        <% end %>
        - put: builds-metadata-<%= stack %>
          resource: builds
          params:
            repository: <%= stack %>-builds-metadata
            rebase: true
    <% end %>
    <% end %>
 <% end %>
 <% end %>

<% dep['buildpacks'].each do |bp_name, bp| %>
  <% (bp['lines'] || ['latest']).each do |line| %>
- name: update-<%=dep_name%>-<%= line %>-<%= bp_name %>
  serial: true
  public: true
  plan:
  - aggregate:
    <% if dep['branch'] == 'v3' %>
    - get: buildpack
      resource: <%= bp_name %>-buildpack-v3
    - get: buildpack-latest-released
      resource: <%= bp_name %>-buildpack-v3
    <% else %>
    - get: buildpack
      resource: <%= bp_name %>-buildpack
    - get: buildpack-latest-released
      resource: <%= bp_name %>-buildpack-latest-released
    <% end %>
    - get: buildpacks-ci
    - get: source
      resource: source-<%=dep_name%>-<%= line %>
      <% unless deps_extracted_from_dotnet_sdk.include?(dep_name) %>
      <% must_pass = ["build-#{dep_name}-#{line}"] %>
      <% must_pass.push("copy-#{dep_name}-#{line}-bionic") if bp_name.include? 'node-engine-cnb' %>
      passed: <%= must_pass %>
      <% end %>
      version: every
      trigger: true
    <% dep.fetch('monitored_deps', []).each do |monitored_dep_name| %>
    - get: source-<%=monitored_dep_name%>-latest
      trigger: true
      version: every
      passed: [<%= "build-#{dep_name}-#{line}" %>]
    <% end %>
    - get: builds
  - do:
    - task: update-buildpack-dependency
      <% if bp_name.include? '-cnb' %>
      file: buildpacks-ci/tasks/update-cnb-dependency/task.yml
      <% else %>
      file: buildpacks-ci/tasks/update-buildpack-dependency/task.yml
      <% end %>
      params:
        VERSION_LINE: <%= if dep_name == 'nginx' && bp_name == 'nginx' then 'nginx' else get_version_line_type(bp['lines']) end %>
        REMOVAL_STRATEGY: <%= bp.fetch('removal_strategy', 'remove_all') %>
    - put: <%= bp_name %>-buildpack<%= '-v3' if dep['branch'] == 'v3' %>
      params:
        repository: artifacts
        rebase: true
  <% end %>
  <% end %>
<% end %>

groups:
  - name: all
    jobs:
<% dependencies.each do |dep_name, dep| %>
<%
  version_lines = dep['buildpacks'].values.reduce([]) {|sum, bp| sum | (bp['lines'] || [])}
  version_lines = ['latest'] if version_lines.empty?
%>
    <% if is_multiline?(dep) %>
    - create-<%= dep_name %>-new-line-story
    <% end %>
    <% version_lines.each do |line| %>
    <% unless deps_extracted_from_dotnet_sdk.include?(dep_name) %>
    - create-<%=dep_name%>-<%= line %>-story
    - finish-<%=dep_name%>-<%= line %>-story
    <% if dep_name == 'node' %>
    - copy-<%=dep_name%>-<%= line %>-bionic
    <% end %>
    - build-<%=dep_name%>-<%= line %>
    <% end %>
    <% end %>
    <% dep['buildpacks'].each do |bp_name, bp| %>
    <% (bp['lines'] || ['latest']).each do |line| %>
    - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
    <% end %>
<% end %>
<% end %>

<% dependencies.each do |dep_name, dep| %>
<%
  version_lines = dep['buildpacks'].values.reduce([]) {|sum, bp| sum | (bp['lines'] || [])}
  version_lines = ['latest'] if version_lines.empty?
%>
  - name: <%= dep_name %>
    jobs:
    <% if is_multiline?(dep) %>
    - create-<%= dep_name %>-new-line-story
    <% end %>
    <% version_lines.each do |line| %>
    <% unless deps_extracted_from_dotnet_sdk.include?(dep_name) %>
    - create-<%=dep_name%>-<%= line %>-story
    - finish-<%=dep_name%>-<%= line %>-story
    <% if dep_name == 'node' %>
    - copy-<%=dep_name%>-<%= line %>-bionic
    <% end %>
    - build-<%=dep_name%>-<%= line %>
    <% end %>
    <% end %>
    <% dep['buildpacks'].each do |bp_name, bp| %>
    <% (bp['lines'] || ['latest']).each do |line| %>
    - update-<%=dep_name%>-<%= line %>-<%= bp_name %>
    <% end %>
    <% end %>
<% end %>
