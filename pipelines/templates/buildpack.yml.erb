<% buildpacks = {
  'apt' => {
    'stacks' => %w(cflinuxfs4)
  },
  'binary' => {
    'stacks' => %w(cflinuxfs4 windows),
    'product_slug' => 'binary-buildpack',
    'skip_docker_start' => true,
  },
  'dotnet-core' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'dotnet-core-buildpack',
    'compute_instance_count' => 3
  },
  'go' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'go-buildpack',
    'compute_instance_count' => 3
  },
  'hwc' => {
    'stacks' => %w(windows),
    'skip_brats' => true,
    'product_slug' => 'hwc-buildpack'
  },
  'nginx' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'nginx-buildpack',
  },
  'nodejs' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'nodejs-buildpack',
  },
  'php' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'php-buildpack',
    'compile_extensions' => true,
  },
  'python' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'python-buildpack',
  },
  'r' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'r-buildpack',
    'skip_brats' => true,
    'skip_docker_start' => true,
  },
  'ruby' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'ruby-buildpack',
    'compute_instance_count' => 3
  },
  'staticfile' => {
    'stacks' => %w(cflinuxfs4),
    'product_slug' => 'staticfile-buildpack',
  }
} %>
---
resource_types:
  - name: cron
    type: docker-image
    source:
      repository: cfbuildpacks/cron-resource

  - name: shepherd
    type: registry-image
    source:
      repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
      tag: v1

  - name: pool
    type: registry-image
    source:
      repository: concourse/pool-resource
      tag: 1.1.3

  - name: create-pull-request-resource
    type: docker-image
    source:
      repository: cfbuildpacks/create-pull-request-resource

resources: ############################################################################################################
## Git ##

  - name: buildpack-master
    type: git
    webhook_token: ob0aigh3
    source:
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack.git
      private_key: ((cf-buildpacks-eng-github-ssh-key.private_key))
      branch: master
      ignore_paths:
        - VERSION
        - CHANGELOG

  - name: cf-deployment
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-deployment

  - name: buildpacks-ci
    type: git
    source:
      uri: https://github.com/cloudfoundry/buildpacks-ci
      branch: switchblade

  - name: buildpack-pull-request
    type: create-pull-request-resource
    source:
      remote_repository: <%= organization %>/<%= language %>-buildpack
      github_token: ((buildpacks-github-token))

  - name: libbuildpack
    type: git
    webhook_token: ob0aigh3
    source:
      uri: https://github.com/cloudfoundry/libbuildpack.git
<% if buildpacks[language]['compile_extensions'] %>
  - name: compile-extensions
    type: git
    source:
      uri: https://github.com/cloudfoundry/compile-extensions.git
<% end %>

<% if language == 'hwc' %>
  - name: buildpack-bosh-release
    type: git
    source:
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack-release.git
      private_key: ((cf-buildpacks-eng-github-ssh-key.private_key))
      branch: master
<% end %>
  - name: env-repo
    type: git
    source:
      uri: git@github.com:cloudfoundry/buildpacks-envs
      branch: master
      private_key: '((cf-buildpacks-eng-github-ssh-key.private_key))'

  - name: version
    type: semver
    source:
      driver: git
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack.git
      branch: master
      file: VERSION
      private_key: ((cf-buildpacks-eng-github-ssh-key.private_key))


  ## Github Releases ##

  - name: buildpack-github-release
    type: github-release
    source:
      user: {{buildpacks-github-org}}
      repository: <%= language %>-buildpack
      access_token: ((buildpacks-github-token))

<% if language == 'hwc' %>
  - name: buildpack-bosh-release-github-release
    type: github-release
    source:
      user: {{buildpacks-github-org}}
      repository: <%= language %>-buildpack-release
      access_token: ((buildpacks-github-token))
<% end %>

<% if buildpacks[language]['compile_extensions'] %>
  - name: buildpack-packager
    type: github-release
    source:
      user: {{buildpacks-github-org}}
      repository: buildpack-packager
      access_token: ((buildpacks-github-token))
<% end %>

  ## S3 Buckets ##

<% buildpacks[language]['stacks'].each do |stack| %>
  - name: pivotal-buildpack-<%= stack %>
    type: s3
    source:
      bucket: {{buildpack-release-candidates-bucket}}
      regexp: buildpack-release-candidates/<%= language%>/<%= language %>_buildpack-<%= stack %>-v(.*).zip
      access_key_id: ((buildpacks-cloudfoundry-org-aws-access-key-id))
      secret_access_key: ((buildpacks-cloudfoundry-org-aws-secret-access-key))

  - name: pivotal-buildpack-cached-<%= stack %>
    type: s3
    source:
      bucket: {{buildpack-release-candidates-bucket}}
      regexp: buildpack-release-candidates/<%= language%>/<%= language %>_buildpack-cached-<%= stack %>-v(.*).zip
      access_key_id: ((buildpacks-cloudfoundry-org-aws-access-key-id))
      secret_access_key: ((buildpacks-cloudfoundry-org-aws-secret-access-key))
<% end %>

<% if language.to_s == 'hwc' || language.to_s == 'binary' %>
  - name: pivotal-buildpack-cached-any
    type: s3
    source:
      bucket: {{buildpack-release-candidates-bucket}}
      regexp: buildpack-release-candidates/<%= language%>/<%= language %>_buildpack-cached-v(.*).zip
      access_key_id: ((buildpacks-cloudfoundry-org-aws-access-key-id))
      secret_access_key: ((buildpacks-cloudfoundry-org-aws-secret-access-key))

  - name: pivotal-buildpack-any
    type: s3
    source:
      bucket: {{buildpack-release-candidates-bucket}}
      regexp: buildpack-release-candidates/<%= language%>/<%= language %>_buildpack-v(.*).zip
      access_key_id: ((buildpacks-cloudfoundry-org-aws-access-key-id))
      secret_access_key: ((buildpacks-cloudfoundry-org-aws-secret-access-key))
<% end %>

  ## Resource Pools ##

  - name: shepherd-cf-environment
    type: shepherd
    source:
      url: https://v2.shepherd.run
      service-account-key: ((shepherd-buildpacks-service-account-key))
      lease:
        namespace: buildpacks
        pool:
          namespace: official
          name: cfd
      compatibility-mode: environments-app

jobs: ################################################################################################################
<% if language == "php" %>
  - name: ensure-manifest-has-modules
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpack
          resource: buildpack-master
          trigger: true
      - do:
        - task: check-modules
          file: buildpacks-ci/tasks/check-php-modules-in-manifest/task.yml
<% end %>
  - name: specs-unit-master
    serial: true
    public: true
    plan:
      - do:
        - in_parallel:
          - get: buildpacks-ci
          - get: buildpack
            resource: buildpack-master
<% if language == "php" %>
            passed: [ ensure-manifest-has-modules ]
<% end %>
            trigger: true
        - do:
          - task: ginkgo
            file: buildpacks-ci/tasks/run-buildpack-unit-specs/task.yml
<% if language == "php" %>
            privileged: true
            params:
              DOCKER_START: true
<% end %>

<% relevant_stacks = buildpacks[language]['stacks'] %>
<% relevant_stacks.each do |stack| %>
  - name: specs-switchblade-docker-master-<%= stack %>
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpack
          resource: buildpack-master
          trigger: true
          passed:
          - specs-unit-master
      - task: switchblade-docker-test-<%= stack %>
        file: buildpacks-ci/tasks/run-buildpack-switchblade-docker/task.yml
        privileged: true
        params:
          CF_STACK: <%= stack %>
          GITHUB_TOKEN: ((buildpacks-github-token))
          GINKGO_ATTEMPTS: 3
          GINKGO_NODES: 2
          <% if language == 'php' %>
          COMPOSER_GITHUB_OAUTH_TOKEN: '((composer-github-oauth-token))'
          <% end %>
<% end %>


  - name: detect-new-version-and-upload-artifacts
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpack
          resource: buildpack-master
          trigger: true
          passed:
<% relevant_stacks.each do |stack| %>
          - specs-switchblade-docker-master-<%= stack %>
<% end %>
        - get: version
          params: { bump: patch }
<% bucket_stacks = buildpacks[language]['stacks']
   bucket_stacks = bucket_stacks + ['any'] if language.to_s == 'hwc' || language.to_s == 'binary'
   bucket_stacks.each do |stack| %> #change bucket_stacks to buildpacks[language]['stacks'] when removing any_stack
        - get: pivotal-buildpack-cached-<%= stack %>
          version: every
          trigger: false
        - get: pivotal-buildpack-<%= stack %>
          version: every
          trigger: false
<% end %>
      - put: version
        params: { file: version/number }
      - do:
        - in_parallel:
<% bucket_stacks = buildpacks[language]['stacks']
   bucket_stacks = bucket_stacks + ['any'] if language.to_s == 'hwc' || language.to_s == 'binary'
   bucket_stacks.each do |stack| %> #change bucket_stacks to buildpacks[language]['stacks'] when removing any_stack
          - do:
            - task: detect-and-upload-<%= stack %>
              file: buildpacks-ci/tasks/detect-and-upload/task.yml
              params:
                GIT_REPO_ORG: <%= organization %>
                BUILDPACK_NAME: <%= language %>-buildpack
                RUBYGEM_MIRROR: {{rubygem-mirror}}
                CF_STACK: <%= stack %>
                GITHUB_TOKEN: ((buildpacks-github-token))
              input_mapping:
                pivotal-buildpack: pivotal-buildpack-<%= stack %>
                pivotal-buildpack-cached: pivotal-buildpack-cached-<%= stack %>
              output_mapping:
                buildpack-artifacts: buildpack-artifacts-<%= stack %>
            - put: pivotal-buildpack-<%= stack %>
              params:
                file: buildpack-artifacts-<%= stack %>/uncached/*_buildpack*-v*.zip
            - put: pivotal-buildpack-cached-<%= stack %>
              params:
                file: buildpack-artifacts-<%= stack %>/cached/*_buildpack-cached*-v*.zip
<% end %>
  - name: ship-it
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: version
          passed:
            - detect-new-version-and-upload-artifacts
        <%
        all_stacks = buildpacks[language]['stacks']
        all_stacks = all_stacks + ['any'] if language.to_s == 'hwc' || language.to_s == 'binary'
        all_stacks.each_with_index do |stack, ndx|
        %>
        - get: pivotal-buildpack-cached-<%= stack %>
          passed:
            - detect-new-version-and-upload-artifacts
        - get: pivotal-buildpack-<%= stack %>
          passed:
            - detect-new-version-and-upload-artifacts
        <% end %>
        - get: buildpack
          passed:
            - detect-new-version-and-upload-artifacts
          resource: buildpack-master
      - task: check-tag-not-already-added
        file: buildpacks-ci/tasks/check-tag-not-already-added/task.yml
      - put: buildpack-master
        params:
          repository: buildpack
          tag: version/number
          tag_prefix: v
          only_tag: true
  - name: buildpack-to-github
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: version
          passed: [ ship-it ]
        <% buildpacks[language]['stacks'].each_with_index do |stack, ndx| %>
        - get: uncached-buildpack-for-stack<%= ndx.to_s %>
          resource: pivotal-buildpack-<%= stack %>
          passed: [ ship-it ]
        <% end %>
        - get: buildpack
          resource: buildpack-master
          passed: [ ship-it ]
          trigger: true
      - task: finalize-buildpack
        file: buildpacks-ci/tasks/finalize-buildpack/task.yml
      - put: buildpack-github-release
        params:
          name: buildpack-artifacts/tag
          tag: buildpack-artifacts/tag
          body: buildpack-artifacts/RECENT_CHANGES
          generate_release_notes: true
          globs:
            - buildpack-artifacts/*-buildpack*-v*.zip
            - buildpack-artifacts/*-buildpack*-v*.zip.SHA256SUM.txt

<% relevant_stacks = buildpacks[language]['stacks'] %>
<% relevant_stacks.each do |stack| %>
  # NOTE: CF Integration job - manually triggerable, not part of main pipeline flow
  # Requires Shepherd CF environment access. Can be enabled when CF environment is available.
  - name: specs-edge-integration-master-<%= stack %>
    serial: true
    public: false
    disable_manual_trigger: false
    plan:
      - in_parallel:
        - put: environment
          resource: shepherd-cf-environment
          params:
            action: create
            duration: 6h
            resource: shepherd-cf-environment
            description: |
              Running <%= language %>-buildpack specs-edge-integration-master-<%= stack %> job.
          timeout: 6h
        - get: buildpacks-ci
        - get: env-repo
        - get: buildpack
          resource: buildpack-master
          trigger: false
          passed:
          - specs-switchblade-docker-master-<%= stack %>
        - get: repo
          resource: buildpack-master
        - get: cf-deployment
      - task: redeploy
        file: buildpacks-ci/tasks/cf/redeploy/task.yml
        input_mapping:
          ci: buildpacks-ci
          lock: environment
        params:
          SCALE_DIEGO_CELLS: true
<% if stack == "cflinuxfs3" %>
          ADD_CFLINUXFS3_STACK: true
<% end %>
<% if buildpacks[language]['stacks'].include?('windows')%>
          DEPLOY_WINDOWS_CELL: true
<% end %>
      - do:
        - task: create-cf-space
          attempts: 5
          file: buildpacks-ci/tasks/cf/create-space/task.yml
          input_mapping:
            ci: buildpacks-ci
            lock: environment
          params:
            DOMAIN: 'cf-app.com'
            ORG: pivotal
    <% unless buildpacks[language]['skip_brats'] %>
    <% if buildpacks[language]['stacks'].include?('cflinuxfs4')%>
        - task: configure-brats-test-config
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: cfbuildpacks/ci
            inputs:
            - name: buildpack
            outputs:
            - name: buildpack
            run:
              dir: ""
              path: bash
              args:
              - -c
              - |
                #!/bin/bash
                set -e
                cd buildpack
                contents="$(jq '.stack = "<%= stack %>"' config.json)"
                echo -E "${contents}" > config.json
                echo -e "config.json modified to:\n $(cat config.json)"
      <% end %>
        - task: brats-<%= stack %>
          file: buildpacks-ci/tasks/<%= language.to_s == 'php' ? 'run-bp-brats-jammy' : 'run-bp-brats' %>/task.yml
          input_mapping: {cf-space: space}
          attempts: 5
          params:
            CF_STACK: <%= stack %>
            GINKGO_ATTEMPTS: 4
            GINKGO_NODES: 3
          <% end %>
        - task: integration-test-<%= stack %>
          file: buildpacks-ci/tasks/run-buildpack-integration-specs/task.yml
          input_mapping: {cf-space: space}
          params:
            CF_STACK: <%= stack %>
            GINKGO_ATTEMPTS: 4
            GINKGO_NODES: 3
            GITHUB_TOKEN: ((buildpacks-github-token))
            SWITCHBLADE_PLATFORM: cf
            <% if language == 'php' %>
            COMPOSER_GITHUB_OAUTH_TOKEN: '((composer-github-oauth-token))'
            <% end %>
            <% if buildpacks[language]['skip_docker_start'] %>
            SKIP_DOCKER_START: true
            <% else %>
          privileged: true
            <% end %>
        ensure:
          task: delete-cf-space
          file: buildpacks-ci/tasks/delete-cf-space/task.yml
          input_mapping: {cf-space: space}
    on_success:
      put: environment
      resource: shepherd-cf-environment
      params:
        action: release
        resource: environment
<% end %>

  - name: specs-edge-shared-master
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpack
          resource: buildpack-master
          trigger: true
          passed:
<% relevant_stacks.each do |stack| %>
          - specs-switchblade-docker-master-<%= stack %>
<% end %>
        on_success:
          task: github-set-status-success
          file: buildpacks-ci/tasks/set-status-success/task.yml
          input_mapping:
            repo: buildpack
          params:
            GITHUB_ACCESS_TOKEN: ((buildpacks-github-token))
            GITHUB_REPO: <%= organization %>/<%= language %>-buildpack
            GITHUB_STATUS_CONTEXT: 'buildpacks-ci/edge-master'
            GITHUB_STATUS_DESCRIPTION: 'Buildpacks CI edge master spec passed (Docker-based)'
            PIPELINE_URI: {{buildpacks-ci-pipeline-uri}}

  - name: update-libbuildpack
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: libbuildpack
          trigger: true
        - get: buildpack
          resource: buildpack-master
      - task: update-libbuildpack
        file: buildpacks-ci/tasks/update-libbuildpack/task.yml
        <% if language == "php" %>
        privileged: true
        <% end %>
        params:
          <% if language == 'php' %>
          DOCKER_START: true
          <% end %>
          LANGUAGE: <%= language %>
      - put: buildpack-pull-request
        params:
          repo_location: buildpack
          title: Update libbuildpack
          branch_prefix: "update-libbuildpack"
          auto_merge: false
          base: master
<% if buildpacks[language]['compile_extensions'] %>
  - name: update-compile-extensions
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: compile-extensions
          trigger: true
        - get: buildpack
          resource: buildpack-master
      - task: update-compile-extensions
        file: buildpacks-ci/tasks/update-compile-extensions/task.yml
        params: { RUBYGEM_MIRROR: {{rubygem-mirror}}  }
      - put: buildpack-pull-request
        params:
          repo_location: buildpack-artifacts
          title: Update compile-extensions
          branch_prefix: "update-compile-extensions"
          auto_merge: false
          base: master
  - name: update-buildpack-packager
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: gem
          resource: buildpack-packager
          trigger: true
        - get: repo-with-gemfile
          resource: buildpack-master
      - task: update-buildpack-packager
        file: buildpacks-ci/tasks/update-gem-in-gemfile/task.yml
        params:
          RUBYGEM_MIRROR: {{rubygem-mirror}}
          GEM_NAME: buildpack-packager
          GEM_GIT_REPOSITORY: {{buildpack-packager-git-uri-public}}
          GEMFILE_NAME: cf.Gemfile
      - put: buildpack-pull-request
        params:
          repo_location: repo-with-gemfile-artifacts
          title: Update buildpack-packager
          branch_prefix: "update-buildpack-packager"
          auto_merge: false
          base: master
<% end %>

<% if language == 'hwc' %>
  - name: update-buildpack-bosh-release
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: release
          resource: buildpack-bosh-release
        <% buildpacks[language]['stacks'].each_with_index do |stack, i| %>
        - get: buildpack-zip-stack<%= i %>
          resource: pivotal-buildpack-<%= stack %>
          trigger: true
          passed: [ ship-it ]
        <% end %>
      - do:
        - task: create-bosh-release
          file: buildpacks-ci/tasks/create-bosh-release/task.yml
          params:
            ACCESS_KEY_ID: ((buildpacks-cloudfoundry-org-aws-access-key-id))
            SECRET_ACCESS_KEY: ((buildpacks-cloudfoundry-org-aws-secret-access-key))
            LANGUAGE: "hwc"
            RELEASE_NAME: hwc-buildpack
            RELEASE_DIR: release
        - put: buildpack-bosh-release
          params:
            repository: release-artifacts
            rebase: true
            tag: version/version
        - put: buildpack-bosh-release-github-release
          params:
            name: version/version
            tag: version/version
<% end %>
