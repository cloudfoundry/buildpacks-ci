<% buildpacks = {
  'apt' => {
    'stacks' => %w(cflinuxfs3),
    'skip_pivnet_publish' => true,
    'skip_pws_publish' => true,
    'non_lts' => true,
  },
  'binary' => {
    'stacks' => %w(cflinuxfs3 windows2016 windows),
    'product_slug' => 'binary-buildpack',
    'skip_docker_start' => true,
    'non_lts_pivnet' => true,
  },
  'dotnet-core' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'dotnet-core-buildpack',
    'non_lts_pivnet' => true,
  },
  'go' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'go-buildpack',
    'non_lts_pivnet' => true,
    'compute_instance_count' => 3,
  },
  'hwc' => {
    'stacks' => %w(windows2016 windows),
    'skip_brats' => true,
    'product_slug' => 'hwc-buildpack',
    'non_lts' => true,
  },
  'nginx' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'nginx-buildpack',
    'skip_pws_publish' => true,
    'non_lts_pivnet' => true,
  },
  'nodejs' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'nodejs-buildpack',
    'non_lts_pivnet' => true,
    'skip_pws_publish' => true,
  },
  'php' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'php-buildpack',
    'compile_extensions' => true,
    'non_lts_pivnet' => true,
  },
  'python' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'python-buildpack',
    'non_lts_pivnet' => true,
  },
  'r' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'r-buildpack',
    'skip_brats' => true,
    'non_lts' => true,
    'non_lts_pivnet' => true,
    'skip_pws_publish' => true,
    'skip_docker_start' => true,
  },
  'ruby' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'ruby-buildpack',
    'non_lts_pivnet' => true,
    'compute_instance_count' => 3,
  },
  'staticfile' => {
    'stacks' => %w(cflinuxfs3),
    'product_slug' => 'staticfile-buildpack',
    'non_lts_pivnet' => true,
  }
} %>
<%
pas_versions = {
  'latest' => '2_9',
  'n-1' => '2_8',
  'n-2' => '2_7',
}
%>
<% cnb_images = %w(run build) %>
<% low_nodes_lts = ['ruby', 'python', 'dotnet-core', 'php'] %>
---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
  - name: pivnet
    type: docker-image
    source:
      repository: pivotalcf/pivnet-resource
      tag: latest-final
  - name: cron
    type: docker-image
    source:
      repository: cfbuildpacks/cron-resource

  - name: cf-pool
    type: docker-image
    source:
      repository: cftoolsmiths/toolsmiths-envs-resource

resources: ############################################################################################################
## Git ##

  - name: feature-eng-ci
    type: git
    #icon: github-circle
    source:
      uri: https://github.com/cloudfoundry/buildpacks-feature-eng-ci
      branch: master

  - name: buildpack-develop
    type: git
    webhook_token: ob0aigh3
    source:
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack.git
      private_key: {{<%= language %>-buildpack-private-key}}
      branch: develop
      ignore_paths:
        - VERSION
        - CHANGELOG

  - name: buildpack-develop-with-version-and-changelog
    type: git
    webhook_token: ob0aigh3
    source:
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack.git
      private_key: {{<%= language %>-buildpack-private-key}}
      branch: develop

<% if buildpacks[language]['v3'] %>
  - name: buildpack-v3
    type: git
    webhook_token: ob0aigh3
    source:
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack.git
      private_key: {{<%= language %>-buildpack-private-key}}
      branch: v3
      ignore_paths:
      - VERSION
      - CHANGELOG
<% end %>

  - name: buildpack-new-version
    type: git
    source:
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack.git
      private_key: {{<%= language %>-buildpack-private-key}}
      branch: develop
      paths:
        - VERSION
        - CHANGELOG

  - name: buildpack-master
    type: git
    source:
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack.git
      private_key: {{<%= language %>-buildpack-private-key}}
      branch: master

  - name: buildpacks-ci
    type: git
    source:
      uri: {{buildpacks-ci-git-uri-public}}
      branch: {{buildpacks-ci-git-uri-public-branch}}

<% unless buildpacks[language]['skip_pivnet_publish'] %>
<% unless buildpacks[language]['non_lts_pivnet'] %>
  - name: pivnet-buildpack-metadata-lts
    type: git
    source:
      branch: master
      private_key: {{pivotal-cf-buildpacks-ci-robots}}
      uri: git@github.com:pivotal-cf/buildpacks-ci-robots.git # pivotal-cf because pivnet is not foundation's
      paths: [ pivnet-metadata/<%= language %>-lts.yml ]
<% end %>
  - name: pivnet-buildpack-metadata
    type: git
    source:
      branch: master
      private_key: {{pivotal-cf-buildpacks-ci-robots}}
      uri: git@github.com:pivotal-cf/buildpacks-ci-robots.git # pivotal-cf because pivnet is not foundation's
      paths: [ pivnet-metadata/<%= language %>.yml ]
<% end %>

  - name: libbuildpack
    type: git
    webhook_token: ob0aigh3
    source:
      uri: https://github.com/cloudfoundry/libbuildpack.git
<% if buildpacks[language]['compile_extensions'] %>
  - name: compile-extensions
    type: git
    source:
      uri: https://github.com/cloudfoundry/compile-extensions.git
<% end %>

<% if language == 'multi' %>
  - name: buildpackapplifecycle
    type: git
    source:
      uri: https://github.com/cloudfoundry/buildpackapplifecycle.git
<% end %>

<% if language == 'hwc' %>
  - name: buildpack-bosh-release
    type: git
    source:
      uri: git@github.com:<%= organization %>/<%= language %>-buildpack-release.git
      private_key: {{<%= language %>-buildpack-bosh-release-private-key}}
      branch: master
  - name: offline-buildpack-bosh-release
    type: git
    source:
      uri: git@github.com:pivotal-cf/<%= language %>-offline-buildpack-release.git
      private_key: {{<%= language %>-offline-buildpack-bosh-release-private-key}}
      branch: master
<% end %>

  - name: env-repo
    type: git
    source:
      uri: git@github.com:cloudfoundry/buildpacks-envs
      branch: master
      private_key: {{buildpacks-envs-private-key}}


  ## Github Releases ##

  - name: buildpack-github-release
    type: github-release
    source:
      user: {{buildpacks-github-org}}
      repository: <%= language %>-buildpack
      access_token: {{buildpacks-github-token}}

<% if language == 'hwc' %>
  - name: buildpack-bosh-release-github-release
    type: github-release
    source:
      user: {{buildpacks-github-org}}
      repository: <%= language %>-buildpack-release
      access_token: {{buildpacks-github-token}}
  - name: offline-buildpack-bosh-release-github-release
    type: github-release
    source:
      user: pivotal-cf
      repository: <%= language %>-offline-buildpack-release
      access_token: {{buildpacks-github-token}}
<% end %>

<% if buildpacks[language]['compile_extensions'] %>
  - name: buildpack-packager
    type: github-release
    source:
      user: {{buildpacks-github-org}}
      repository: buildpack-packager
      access_token: {{buildpacks-github-token}}
<% end %>

  ## Pivnet Release ##

<% unless buildpacks[language]['skip_pivnet_publish'] %>
<% unless buildpacks[language]['non_lts_pivnet'] %>
  - name: pivnet-production-lts
    type: pivnet
    source:
      endpoint: https://network.pivotal.io
      api_token: {{pivnet-refresh-token}}
      product_slug: buildpacks
<% end %>

  - name: pivnet-production
    type: pivnet
    source:
      endpoint: https://network.pivotal.io
      api_token: {{pivnet-refresh-token}}
      product_slug: <%= buildpacks[language]['product_slug'] %>
<% end %>

  ## S3 Buckets ##

<% buildpacks[language]['stacks'].each do |stack| %>
  - name: pivotal-buildpack-<%= stack %>
    type: s3
    source:
      bucket: {{buildpack-release-candidates-bucket}}
      regexp: <%= language%>/<%= language %>_buildpack-<%= stack %>-v(.*).zip
      access_key_id: {{pivotal-offline-buildpacks-s3-access-key}}
      secret_access_key: {{pivotal-offline-buildpacks-s3-secret-key}}

  - name: pivotal-buildpack-cached-<%= stack %>
    type: s3
    source:
      bucket: {{buildpack-release-candidates-bucket}}
      regexp: <%= language%>/<%= language %>_buildpack-cached-<%= stack %>-v(.*).zip
      access_key_id: {{pivotal-offline-buildpacks-s3-access-key}}
      secret_access_key: {{pivotal-offline-buildpacks-s3-secret-key}}
<% end %>

<% if language.to_s == 'hwc' || language.to_s == 'binary' %>
  - name: pivotal-buildpack-cached-any
    type: s3
    source:
      bucket: {{buildpack-release-candidates-bucket}}
      regexp: <%= language%>/<%= language %>_buildpack-cached-v(.*).zip
      access_key_id: {{pivotal-offline-buildpacks-s3-access-key}}
      secret_access_key: {{pivotal-offline-buildpacks-s3-secret-key}}

  - name: pivotal-buildpack-any
    type: s3
    source:
      bucket: {{buildpack-release-candidates-bucket}}
      regexp: <%= language%>/<%= language %>_buildpack-v(.*).zip
      access_key_id: {{pivotal-offline-buildpacks-s3-access-key}}
      secret_access_key: {{pivotal-offline-buildpacks-s3-secret-key}}
<% end %>

  ## Resource Pools ##

  - name: cf-toolsmiths-environment
    type: cf-pool
    source:
      api_token: {{toolsmiths-api-token}}
      hostname: environments.toolsmiths.cf-app.com
      pool_name: cf-deployment
    tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]


<% unless buildpacks[language]['non_lts'] %>
  - name: smith-environments-<%= pas_versions['n-2'] %>
    type: cf-pool
    source:
      api_token: {{toolsmiths-api-token}}
      hostname: environments.toolsmiths.cf-app.com
      pool_name: us_<%= pas_versions['n-2'] %>
    tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
<% end %>

  ## Alerts ##

  - name: failure-alert
    type: slack-notification
    source:
      url: {{concourse-job-failure-notifications-slack-webhook}}

  - name: sunday-night
    type: cron
    source:
      expression: 0 18 * * 0
      location: {{current-timezone}}

  - name: daily-midnight
    type: cron
    source:
      expression: 0 0 * * *
      location: {{current-timezone}}

  - name: ci-image
    type: registry-image
    source:
      repository: cfbuildpacks/ci
      username: {{buildpacks-docker-username}}
      password: {{buildpacks-docker-password}}

jobs: ################################################################################################################
<% if language == "php" %>
  - name: ensure-manifest-has-modules
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpack
          resource: buildpack-develop
          trigger: true
      - do:
        - task: check-modules
          file: buildpacks-ci/tasks/check-php-modules-in-manifest/task.yml
<% end %>
  - name: specs-unit-develop
    serial: true
    public: true
    plan:
      - do:
        - in_parallel:
          - get: buildpacks-ci
          - get: ci-image
          - get: buildpack
            resource: buildpack-develop
<% if language == "php" %>
            passed: [ ensure-manifest-has-modules ]
<% end %>
            trigger: true
        - do:
          - task: ginkgo
            image: ci-image
            file: buildpacks-ci/tasks/run-buildpack-unit-specs/task.yml
<% if language == "php" %>
            privileged: true
            params:
              DOCKER_START: true
<% end %>

  - name: create-buildpack-release-story
    serial: true
    public: true
    plan:
      - get: sunday-night
        trigger: true
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpack-develop
          resource: buildpack-develop-with-version-and-changelog
      - do:
        - task: create-buildpack-release-story
          file: buildpacks-ci/tasks/create-buildpack-release-tracker-story/task.yml
          params:
            BUILDPACK_NAME: <%= language %>
            TRACKER_PROJECT_ID: '{{cf-buildpacks-private-tracker-id}}'
            RELENG_TRACKER_PROJECT_ID: '{{cf-buildpacks-rel-eng-tracker-id}}'
            TRACKER_REQUESTER_ID: '{{cf-buildpacks-requester-id}}'
            TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}

  - name: create-deprecation-stories
    serial: true
    public: true
    plan:
      - get: daily-midnight
        trigger: true
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpack
          resource: buildpack-develop
      - do:
        - task: create-deprecation-stories
          file: buildpacks-ci/tasks/create-deprecation-stories/task.yml
          params:
            BUILDPACK_NAME: <%= language %>
            TRACKER_PROJECT_ID: '{{cf-buildpacks-rel-eng-tracker-id}}'
            TRACKER_REQUESTER_ID: '{{cf-buildpacks-requester-id}}'
            TRACKER_API_TOKEN: {{pivotal-tracker-api-token}}
            BEFORE_STORY_ID: {{deprecation_release_marker_story_number}}

  - name: detect-new-version-and-upload-artifacts
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpack
          resource: buildpack-master
          trigger: true
<% bucket_stacks = buildpacks[language]['stacks']
   bucket_stacks = bucket_stacks + ['any'] if language.to_s == 'hwc' || language.to_s == 'binary'
   bucket_stacks.each do |stack| %> #change bucket_stacks to buildpacks[language]['stacks'] when removing any_stack
        - get: pivotal-buildpack-cached-<%= stack %>
        - get: pivotal-buildpack-<%= stack %>
<% end %>
      - do:
        - in_parallel:
<% bucket_stacks = buildpacks[language]['stacks']
   bucket_stacks = bucket_stacks + ['any'] if language.to_s == 'hwc' || language.to_s == 'binary'
   bucket_stacks.each do |stack| %> #change bucket_stacks to buildpacks[language]['stacks'] when removing any_stack
          - do:
            - task: detect-and-upload-<%= stack %>
              file: buildpacks-ci/tasks/detect-and-upload/task.yml
              params:
                GIT_REPO_ORG: <%= organization %>
                BUILDPACK_NAME: <%= language %>-buildpack
                RUBYGEM_MIRROR: {{rubygem-mirror}}
                CF_STACK: <%= stack %>
              input_mapping:
                pivotal-buildpack: pivotal-buildpack-<%= stack %>
                pivotal-buildpack-cached: pivotal-buildpack-cached-<%= stack %>
              output_mapping:
                buildpack-artifacts: buildpack-artifacts-<%= stack %>
            - put: pivotal-buildpack-<%= stack %>
              params:
                file: buildpack-artifacts-<%= stack %>/uncached/*_buildpack*-v*.zip
            - put: pivotal-buildpack-cached-<%= stack %>
              params:
                file: buildpack-artifacts-<%= stack %>/cached/*_buildpack-cached*-v*.zip
<% end %>
        on_failure:
          put: failure-alert
          params:
            text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
            channel: {{concourse-job-failure-notifications-slack-channel}}
            username: concourse
            icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
  - name: ship-it
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        <%
        all_stacks = buildpacks[language]['stacks']
        all_stacks = all_stacks + ['any'] if language.to_s == 'hwc' || language.to_s == 'binary'
        all_stacks.each_with_index do |stack, ndx|
        %>
        - get: pivotal-buildpack-cached-<%= stack %>
          passed:
            - detect-new-version-and-upload-artifacts
        - get: pivotal-buildpack-<%= stack %>
          passed:
            - detect-new-version-and-upload-artifacts
        <% end %>
        - get: buildpack
          passed:
            - detect-new-version-and-upload-artifacts
          resource: buildpack-master
      - task: check tag not already added
        file: buildpacks-ci/tasks/check-tag-not-already-added/task.yml
      - put: buildpack-master
        params:
          repository: buildpack
          tag: buildpack/VERSION
          tag_prefix: v
  - name: buildpack-to-github
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        <% buildpacks[language]['stacks'].each_with_index do |stack, ndx| %>
        - get: pivotal-buildpacks-stack<%= ndx.to_s %>
          resource: pivotal-buildpack-<%= stack %>
          passed: [ ship-it ]
        <% end %>
        - get: buildpack
          resource: buildpack-master
          passed: [ ship-it ]
          trigger: true
      - task: finalize-buildpack
        file: buildpacks-ci/tasks/finalize-buildpack/task.yml
      - put: buildpack-github-release
        params:
          name: buildpack-artifacts/tag
          tag: buildpack-artifacts/tag
          body: buildpack-artifacts/RECENT_CHANGES
          globs:
            - buildpack-artifacts/*-buildpack*-v*.zip
            - buildpack-artifacts/*-buildpack*-v*.zip.SHA256SUM.txt

<% if !buildpacks[language]['skip_pws_publish'] %>
  - name: buildpack-to-pws
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        <% pws_stacks = buildpacks[language]['stacks']
           pws_stacks.each do |stack| %>
        - get: pivotal-buildpack-cached-<%= stack %>
          passed: [ ship-it ]
        <% end %>
        - get: buildpack
          resource: buildpack-master
          passed: [ ship-it ]
          trigger: true
      - task: create-or-update-buildpack
        file: buildpacks-ci/tasks/pws-create-or-update-buildpack/task.yml
        params:
          CF_API: https://api.run.pivotal.io
          USERNAME: {{pws_buildpacks_cf_admin_client}}
          PASSWORD: {{pws_buildpacks_cf_admin_secret}}
          BUILDPACK_NAME: <%= language %>
          STACKS: <%= pws_stacks.join(' ') %>
<% end %>

##################################################################################
#
# We release a global product to pivnet that has all buildpacks bundled within it.
# This allows users on older foundations to continue to receive buildpack updates.
#
# We also release individual products to pivnet for each buildpack.
# These release allow users to select the stack for their foundation.
# At some point we will discontinue the global product and only support
# individual products per buildpack.
#
##################################################################################
<% unless buildpacks[language]['skip_pivnet_publish'] %>
<% unless buildpacks[language]['non_lts_pivnet'] %>
  - name: write-pivnet-metadata-for-lts-product
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: pivnet-buildpack-metadata
          resource: pivnet-buildpack-metadata-lts
        <% pivnet_stacks = []
          if language.to_s == 'hwc' || language.to_s == 'binary'
            pivnet_stacks = pivnet_stacks + ['any']
          else
            pivnet_stacks = ['cflinuxfs2'] # TODO: Set ['cflinuxfs2'] to buildpacks[language]['stacks'] when removing any_stack
          end
          pivnet_stacks.each_with_index do |stack, ndx| %>
        - get: pivotal-buildpacks-stack<%= ndx %>
          resource: pivotal-buildpack-cached-<%= stack %>
          passed:  [ ship-it ]
        <% end %>
        - get: buildpack
          resource: buildpack-master
          passed:  [ ship-it ]
          trigger: true
      - task: finalize-buildpack
        file: buildpacks-ci/tasks/finalize-buildpack/task.yml
      - task: write-pivnet-metadata
        file: buildpacks-ci/tasks/write-buildpack-pivnet-metadata/task.yml
        params:
          BUILDPACK: <%= language %>
          LTS_PRODUCT: true
          <% if buildpacks[language]['admins_only'] %>
          ADMINS_ONLY: true
          <% end %>

      - put: pivnet-buildpack-metadata-lts
        params:
          repository: pivnet-buildpack-metadata-artifacts
          rebase: true

  - name: release-lts-product-to-pivnet
    public: true
    plan:
      - in_parallel:
        - get: pivnet-buildpack-metadata-lts
          passed: [ write-pivnet-metadata-for-lts-product ]
          trigger: true
        <% pivnet_stacks = []
          if language.to_s == 'hwc' || language.to_s == 'binary'
            pivnet_stacks = pivnet_stacks + ['any']
          else
            pivnet_stacks = ['cflinuxfs2'] # TODO: Set ['cflinuxfs2'] to buildpacks[language]['stacks'] when removing any_stack
          end
          pivnet_stacks.each_with_index do |stack, ndx| %>
        - get: pivotal-buildpacks-stack<%= ndx %>
          resource: pivotal-buildpack-cached-<%= stack %>
          passed: [write-pivnet-metadata-for-lts-product]
        <% end %>
      - put: pivnet-production-lts
        params:
          file_glob: pivotal-buildpacks-stack*/<%= language %>_buildpack-cached*.zip
          s3_filepath_prefix: product-files/buildpacks
          metadata_file: pivnet-buildpack-metadata-lts/pivnet-metadata/<%= language %>-lts.yml
  <% end %>
  - name: write-pivnet-metadata
    serial: true
    public: true
    plan:
    - in_parallel:
      - get: buildpacks-ci
      - get: pivnet-buildpack-metadata
      <% buildpacks[language]['stacks'].each_with_index do |stack, ndx| %>
      - get: pivotal-buildpacks-stack<%= ndx %>
        resource: pivotal-buildpack-cached-<%= stack %>
        passed: [ ship-it ]
      <% end %>
      - get: buildpack
        resource: buildpack-master
        passed: [ ship-it ]
        trigger: true
    - task: finalize-buildpack
      file: buildpacks-ci/tasks/finalize-buildpack/task.yml
    - task: write-pivnet-metadata
      file: buildpacks-ci/tasks/write-buildpack-pivnet-metadata/task.yml
      params:
        BUILDPACK: <%= language %>
        LTS_PRODUCT: false
        <% if buildpacks[language]['admins_only'] %>
        ADMINS_ONLY: true
        <% end %>
    - put: pivnet-buildpack-metadata
      params:
        repository: pivnet-buildpack-metadata-artifacts
        rebase: true

  - name: release-product-to-pivnet
    public: true
    plan:
    - in_parallel:
      - get: pivnet-buildpack-metadata
        passed: [ write-pivnet-metadata ]
        trigger: true
      <% buildpacks[language]['stacks'].each_with_index do |stack, ndx| %>
      - get: pivotal-buildpacks-stack<%= ndx %>
        resource: pivotal-buildpack-cached-<%= stack %>
        passed: [ write-pivnet-metadata ]
      <% end %>
    - put: pivnet-production
      params:
        file_glob: pivotal-buildpacks-stack*/<%= language %>_buildpack-cached*.zip
        s3_filepath_prefix: product-files/buildpacks
        metadata_file: pivnet-buildpack-metadata/pivnet-metadata/<%= language %>.yml
<% end %>

<% if buildpacks[language]['v3'] %>
  - name: specs-edge-integration-v3
    serial: true
    public: true
    plan:
    - in_parallel:
      - put: cf-toolsmiths-environment
        tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
        params:
          action: claim
      - get: feature-eng-ci
      - get: buildpacks-ci
      - get: ci-image
      - get: env-repo
      - get: buildpack
        resource: buildpack-v3
        trigger: true
      - get: repo
        resource: buildpack-v3
    - in_parallel:
      <%
      #buildpacks[language]['stacks'].each do |stack| #use this when cnb buildpack github releases support cflinuxfs2
      ['cflinuxfs3'].each do |stack|
    %>
      - do:
        - task: create-cf-space
          file: feature-eng-ci/tasks/cf/create-space/task.yml
          input_mapping:
            ci: feature-eng-ci
            lock: cf-toolsmiths-environment
          params:
            DOMAIN: cf-app.com
            ORG: pivotal
        - task: ginkgo-<%= stack %>
          image: ci-image
          file: buildpacks-ci/tasks/run-buildpack-integration-specs/task.yml
          input_mapping: {cf-space: space}
          params:
            CF_STACK: <%= stack %>
            GINKGO_ATTEMPTS: 4
            GINKGO_NODES: 6
            <% if language == 'php' %>
            COMPOSER_GITHUB_OAUTH_TOKEN: {{composer-github-oauth-token}}
            <% end %>
          <% if buildpacks[language]['skip_docker_start'] %>
            SKIP_DOCKER_START: true
          <% else %>
          privileged: true
        <% end %>
          <% end %>
    on_failure:
      put: failure-alert
      params:
        text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
        channel: {{concourse-job-failure-notifications-slack-channel}}
        username: concourse
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
    ensure:
      in_parallel:
      - put: cf-toolsmiths-environment
        tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
        params:
          action: unclaim
          env_file: cf-toolsmiths-environment/metadata
<% end %>

  - name: specs-edge-integration-develop
    serial: true
    public: true
    plan:
      - in_parallel:
        - put: cf-toolsmiths-environment
          params:
            action: claim
          tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
        - get: buildpacks-ci
        - get: feature-eng-ci
        - get: ci-image
        - get: env-repo
        - get: buildpack
          resource: buildpack-develop
          trigger: true
          passed:
          - specs-unit-develop
        - get: repo
          resource: buildpack-develop
      - in_parallel:
<% relevant_stacks = buildpacks[language]['stacks'] - ['cflinuxfs2']%>
<% relevant_stacks.each do |stack| %>
        - do:
          - task: create-cf-space
            file: feature-eng-ci/tasks/cf/create-space/task.yml
            input_mapping:
              ci: feature-eng-ci
              lock: cf-toolsmiths-environment
            params:
              DOMAIN: cf-app.com
              ORG: pivotal
          - task: ginkgo-<%= stack %>
            image: ci-image
            file: buildpacks-ci/tasks/run-buildpack-integration-specs/task.yml
            input_mapping: {cf-space: space}
            params:
              CF_STACK: <%= stack %>
              GINKGO_ATTEMPTS: 4
              GINKGO_NODES: 6
              <% if language == 'php' %>
              COMPOSER_GITHUB_OAUTH_TOKEN: {{composer-github-oauth-token}}
              <% end %>
<% if buildpacks[language]['skip_docker_start'] %>
              SKIP_DOCKER_START: true
<% else %>
            privileged: true
<% end %>
<% end %>
    on_failure:
      put: failure-alert
      params:
        text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
        channel: {{concourse-job-failure-notifications-slack-channel}}
        username: concourse
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
    ensure:
      in_parallel:
      - put: cf-toolsmiths-environment
        tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
        params:
          action: unclaim
          env_file: cf-toolsmiths-environment/metadata

<% unless buildpacks[language]['skip_brats'] %>
  - name: specs-edge-brats-develop
    serial: true
    public: true
    plan:
      - in_parallel:
        - put: cf-toolsmiths-environment
          tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
          params:
            action: claim
        - get: buildpacks-ci
        - get: feature-eng-ci
        - get: ci-image
        - get: env-repo
        - get: buildpack
          resource: buildpack-develop
          trigger: true
          passed:
          - specs-unit-develop
      - in_parallel:
<% relevant_stacks = buildpacks[language]['stacks'] - ['cflinuxfs2'] %>
<% relevant_stacks.each do |stack| %>
        - do:
          - task: create-cf-space
            file: feature-eng-ci/tasks/cf/create-space/task.yml
            params:
              DOMAIN: cf-app.com
              ORG: pivotal
            input_mapping:
              ci: feature-eng-ci
              lock: cf-toolsmiths-environment
          - task: brats-<%= stack %>
            image: ci-image
            file: buildpacks-ci/tasks/run-bp-brats/task.yml
            input_mapping: {cf-space: space}
            params:
              CF_STACK: <%= stack %>
              GINKGO_ATTEMPTS: 4
              GINKGO_NODES: 6
<% end %>
    on_failure:
      put: failure-alert
      params:
        text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
        channel: {{concourse-job-failure-notifications-slack-channel}}
        username: concourse
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
    ensure:
      put: cf-toolsmiths-environment
      tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
      params:
        action: unclaim
        env_file: cf-toolsmiths-environment/metadata
<% end %>

  - name: specs-edge-shared-develop
    serial: true
    public: true
    plan:
      - do:
        - get: buildpacks-ci
        - get: repo
          resource: buildpack-develop
          trigger: true
          passed:
<% unless buildpacks[language]['skip_brats'] %>
          - specs-edge-brats-develop
<% end %>
          - specs-edge-integration-develop
        on_success:
          task: github-set-status-success
          file: buildpacks-ci/tasks/set-status-success/task.yml
          params:
            GITHUB_ACCESS_TOKEN: {{buildpacks-github-token}}
            GITHUB_REPO: <%= organization %>/<%= language %>-buildpack
            GITHUB_STATUS_CONTEXT: 'buildpacks-ci/edge-develop'
            GITHUB_STATUS_DESCRIPTION: 'Buildpacks CI edge develop spec passed'
            PIPELINE_URI: {{buildpacks-ci-pipeline-uri}}

<% unless buildpacks[language]['non_lts'] %>
  - name: specs-lts-integration-develop
    serial: true
    public: true
    plan:
      - in_parallel:
        - put: smith-environments-<%= pas_versions['n-2'] %>
          params:
            action: claim
          tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
        - get: buildpacks-ci
        - get: ci-image
        - get: buildpack
          resource: buildpack-develop
          trigger: true
          passed:
          - specs-unit-develop
        - get: repo
          resource: buildpack-develop
      <% if buildpacks[language]['compute_instance_count'] %>
      - task: scale-up-compute
        file: buildpacks-ci/tasks/scale-up-compute/task.yml
        input_mapping:
          environment: smith-environments-<%= pas_versions['n-2'] %>
        params:
          INSTANCE_COUNT: <%= buildpacks[language]['compute_instance_count'] %>
      <% end %>
      - do:
        - task: create-cf-space
          image: ci-image
          file: buildpacks-ci/tasks/create-cf-space-toolsmiths/task.yml
          input_mapping:
            environment: smith-environments-<%= pas_versions['n-2'] %>
          params:
            ORG: pivotal
        - task: ginkgo-cflinuxfs3
          image: ci-image
          file: buildpacks-ci/tasks/run-buildpack-integration-specs/task.yml
          params:
            CF_STACK: cflinuxfs3
            GINKGO_ATTEMPTS: <%= language.to_s == 'php' ? 10 : 4 %>
            GINKGO_NODES: <%= low_nodes_lts.include?(language.to_s) ? 2 : 6 %>
            SKIP_WINDOWS_TESTS: true
            <% if language == 'php' %>
            COMPOSER_GITHUB_OAUTH_TOKEN: {{composer-github-oauth-token}}
            <% end %>
<% if buildpacks[language]['skip_docker_start'] %>
            SKIP_DOCKER_START: true
<% else %>
          privileged: true
<% end %>
        ensure:
          task: delete-cf-space
          file: buildpacks-ci/tasks/delete-cf-space/task.yml
    on_failure:
      put: failure-alert
      params:
        text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
        channel: {{concourse-job-failure-notifications-slack-channel}}
        username: concourse
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
    ensure:
      put: smith-environments-<%= pas_versions['n-2'] %>
      params:
        action: unclaim
        env_file: smith-environments-<%= pas_versions['n-2'] %>/metadata
      tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
<% unless buildpacks[language]['skip_brats'] %>
  - name: specs-lts-brats-develop
    serial: true
    public: true
    plan:
      - in_parallel:
        - put: smith-environments-<%= pas_versions['n-2'] %>
          params:
            action: claim
          tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
        - get: buildpacks-ci
        - get: ci-image
        - get: buildpack
          resource: buildpack-develop
          trigger: true
          passed:
          - specs-unit-develop
      <% if buildpacks[language]['compute_instance_count'] %>
      - task: scale-up-compute
        file: buildpacks-ci/tasks/scale-up-compute/task.yml
        input_mapping:
          environment: smith-environments-<%= pas_versions['n-2'] %>
        params:
          INSTANCE_COUNT: <%= buildpacks[language]['compute_instance_count'] %>
      <% end %>
      - do:
        - task: create-cf-space
          image: ci-image
          file: buildpacks-ci/tasks/create-cf-space-toolsmiths/task.yml
          input_mapping:
            environment: smith-environments-<%= pas_versions['n-2'] %>
          params:
            ORG: pivotal
        - task: brats-cflinuxfs3
          image: ci-image
          file: buildpacks-ci/tasks/run-bp-brats/task.yml
          params:
            CF_STACK: cflinuxfs3
            GINKGO_ATTEMPTS: <%= language.to_s == 'php' ? 10 : 4 %>
            GINKGO_NODES: 6
        ensure:
          task: delete-cf-space-cflinuxfs3
          file: buildpacks-ci/tasks/delete-cf-space/task.yml
    ensure:
      put: smith-environments-<%= pas_versions['n-2'] %>
      params:
        action: unclaim
        env_file: smith-environments-<%= pas_versions['n-2'] %>/metadata
      tags: [environments.toolsmiths.cf-app.com-shared-vsphere-worker]
    on_failure:
      put: failure-alert
      params:
        text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
        channel: {{concourse-job-failure-notifications-slack-channel}}
        username: concourse
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
<% end %>
  - name: specs-lts-gcp-develop
    serial: true
    public: true
    plan:
      - do:
        - get: buildpacks-ci
        - get: repo
          resource: buildpack-develop
          trigger: true
          passed:
<% unless buildpacks[language]['skip_brats'] %>
          - specs-lts-brats-develop
<% end %>
          - specs-lts-integration-develop
        on_success:
          task: github-set-status-success
          file: buildpacks-ci/tasks/set-status-success/task.yml
          params:
            GITHUB_ACCESS_TOKEN: {{buildpacks-github-token}}
            GITHUB_REPO: <%= organization %>/<%= language %>-buildpack
            GITHUB_STATUS_CONTEXT: 'buildpacks-ci/lts-develop'
            GITHUB_STATUS_DESCRIPTION: 'Buildpacks CI lts develop spec passed'
            PIPELINE_URI: {{buildpacks-ci-pipeline-uri}}
<% end %>
  - name: buildpack-to-master
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: repo
          trigger: true
          resource: buildpack-new-version
      - task: merge-to-master
        file: buildpacks-ci/tasks/buildpack-to-master/task.yml
        params:
          GITHUB_ACCESS_TOKEN: {{buildpacks-github-token}}
          GITHUB_REPO: <%= organization %>/<%= language %>-buildpack
          GITHUB_STATUS_CONTEXT: 'buildpacks-ci/passed-dev-specs'
          GITHUB_STATUS_DESCRIPTION: 'Buildpacks CI develop specs passed'
          PIPELINE_URI: {{buildpacks-ci-pipeline-uri}}

<% if buildpacks[language]['v3'] %>
  - name: update-libbuildpack-v3-branch
    serial: true
    public: true
    plan:
    - in_parallel:
      - get: buildpacks-ci
      - get: libbuildpack
        trigger: true
      - get: buildpack
        resource: buildpack-v3
    - task: update-libbuildpack
      file: buildpacks-ci/tasks/update-libbuildpack/task.yml
      params:
        LANGUAGE: <%= language %>
    - put: buildpack-v3
      params:
        repository: buildpack
        rebase: true
<% end %>

  - name: update-libbuildpack
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: libbuildpack
          trigger: true
        - get: buildpack
          resource: buildpack-develop
      - task: update-libbuildpack
        file: buildpacks-ci/tasks/update-libbuildpack/task.yml
        <% if language == "php" %>
        privileged: true
        <% end %>
        params:
          <% if language == 'php' %>
          DOCKER_START: true
          <% end %>
          LANGUAGE: <%= language %>
      - put: buildpack-develop
        params:
          repository: buildpack
          rebase: true
<% if buildpacks[language]['compile_extensions'] %>
  - name: update-compile-extensions
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: compile-extensions
          trigger: true
        - get: buildpack
          resource: buildpack-develop
      - task: update-compile-extensions
        file: buildpacks-ci/tasks/update-compile-extensions/task.yml
        params: { RUBYGEM_MIRROR: {{rubygem-mirror}}  }
      - put: buildpack-develop
        params:
          repository: buildpack-artifacts
          rebase: true
  - name: update-buildpack-packager
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: gem
          resource: buildpack-packager
          trigger: true
        - get: repo-with-gemfile
          resource: buildpack-develop
      - task: update-buildpack-packager
        file: buildpacks-ci/tasks/update-gem-in-gemfile/task.yml
        params:
          RUBYGEM_MIRROR: {{rubygem-mirror}}
          GEM_NAME: buildpack-packager
          GEM_GIT_REPOSITORY: {{buildpack-packager-git-uri-public}}
          GEMFILE_NAME: cf.Gemfile
      - put: buildpack-develop
        params:
          repository: repo-with-gemfile-artifacts
          rebase: true
<% end %>
<% if language == 'multi' %>
  - name: update-buildpackapplifecycle
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: buildpackapplifecycle
          trigger: true
        - get: buildpack
          resource: buildpack-develop
      - task: update-buildpackapplifecycle
        file: buildpacks-ci/tasks/update-buildpackapplifecycle/task.yml
        params:
          LANGUAGE: <%= language %>
      - put: buildpack-develop
        params:
          repository: buildpack-artifacts
          rebase: true
<% end %>

<% if language == 'hwc' %>
  - name: update-buildpack-bosh-release
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: release
          resource: buildpack-bosh-release
        <% buildpacks[language]['stacks'].each_with_index do |stack, i| %>
        - get: buildpack-zip-stack<%= i %>
          resource: pivotal-buildpack-<%= stack %>
          trigger: true
          passed: [ ship-it ]
        <% end %>
      - do:
        - task: create-bosh-release
          file: buildpacks-ci/tasks/create-bosh-release/task.yml
          params:
            ACCESS_KEY_ID: {{pivotal-buildpacks-s3-access-key}}
            SECRET_ACCESS_KEY: {{pivotal-buildpacks-s3-secret-key}}
            LANGUAGE: "hwc"
            RELEASE_NAME: hwc-buildpack
            RELEASE_DIR: release
        - put: buildpack-bosh-release
          params:
            repository: release-artifacts
            rebase: true
            tag: version/version
        - put: buildpack-bosh-release-github-release
          params:
            name: version/version
            tag: version/version
        on_failure:
          put: failure-alert
          params:
            text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
            channel: {{concourse-job-failure-notifications-slack-channel}}
            username: concourse
            icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
  - name: update-offline-buildpack-bosh-release
    serial: true
    public: true
    plan:
      - in_parallel:
        - get: buildpacks-ci
        - get: release
          resource: offline-buildpack-bosh-release
        <% all_stacks = buildpacks[language]['stacks'] %>
        <% all_stacks += ['any'] if language.to_s == 'hwc' || language.to_s == 'binary' %>
        <% all_stacks.each_with_index do |stack, i| %>
        - get: buildpack-zip-stack<%= i %>
          resource: pivotal-buildpack-cached-<%= stack %>
          trigger: true
          passed: [ ship-it ]
        <% end %>
      - do:
        - task: create-offline-bosh-release
          file: buildpacks-ci/tasks/create-bosh-release/task.yml
          params:
            ACCESS_KEY_ID: {{pivotal-offline-buildpacks-s3-access-key}}
            SECRET_ACCESS_KEY: {{pivotal-offline-buildpacks-s3-secret-key}}
            LANGUAGE: "hwc"
            RELEASE_NAME: hwc-offline-buildpack
            RELEASE_DIR: release
        - put: offline-buildpack-bosh-release
          params:
            repository: release-artifacts
            rebase: true
            tag: version/version
        - put: offline-buildpack-bosh-release-github-release
          params:
            name: version/version
            tag: version/version
        on_failure:
          put: failure-alert
          params:
            text: "$BUILD_PIPELINE_NAME $BUILD_JOB_NAME job on Concourse failed! \n Check: $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
            channel: {{concourse-job-failure-notifications-slack-channel}}
            username: concourse
            icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
<% end %>
