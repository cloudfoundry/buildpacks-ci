#!/usr/bin/env bash

set -euo pipefail
env_name=
gcp=

readonly PROGDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

function main() {
  local token
  parse_arguments "$@"

  source ~/workspace/bp-envs/scripts/login_credhub_public

  local token
  token="$(credhub get -n /concourse/main/toolsmiths-api-token -q)"

  if [[ -z "${env_name}" && -z "${gcp}" ]]; then
    env_name=$(curl -s -XPOST "https://environments.toolsmiths.cf-app.com/pooled_gcp_engineering_environments/claim?api_token=$token&pool_name=cf-deployment" | jq -r .name)
    get_metadata_file "${token}" "${env_name}"
    echo "claimed: ${env_name}"

  elif [[ -n "${env_name}" && -z "${gcp}" ]]; then
    echo "using: ${env_name}"

  elif [[ "${gcp}" -eq 1 ]]; then
    get_metadata_file_gcp "${token}" "${env_name}"
    env_name=$(cat /tmp/output/name)
    rm -rf /tmp/output
    echo "claimed: ${env_name}"
  fi

  login_to_existing_env "${env_name}"
}

parse_arguments() {
  local OPTIND
  while getopts "e:g" opt; do
    case "${opt}" in
      e)
        env_name="${OPTARG}"
        ;;
      g)
        gcp=1
        ;;
      *)
        echo "Usage: $0 [-e <name of environment to log into> || -g <use if running off of the vpn>]"
        exit 1
        ;;
    esac
  done
}

function get_metadata_file() {
  token=$1
  env_name=$2

  echo "getting metadata file for ${env_name}...."
  curl -s -XGET \
    "https://environments.toolsmiths.cf-app.com/pooled_gcp_engineering_environments/claim?api_token=$token&environment_name=$env_name" \
    > "/tmp/$env_name.json"
}

function login_to_existing_env(){
  env_name=$1
  echo "loggining into ${env_name}...."

  eval "$(bbl print-env --metadata-file "/tmp/$env_name.json")"

  export CF_USERNAME=admin
  export CF_PASSWORD=$(credhub get -n "/bosh-${env_name}/cf/cf_admin_password" -q)

  cf api "api.${env_name}.cf-app.com" --skip-ssl-validation
  cf auth
  cf target -o system
  cf create-space my-space
  cf target -s my-space

  echo "logged into ${env_name}"
}

function get_metadata_file_gcp(){
  local token name
  token=$1
  name=$2

  fly -t buildpacks status || fly -t buildpacks login

  mkdir -p /tmp/output

  TOOLSMITHS_API_TOKEN="${token}" ENV_NAME="${name}" \
      fly -t buildpacks execute -c "${PROGDIR}/get-env-gcp/task.yml" \
          --tag=buildpacks-eng-vsphere \
          -i script="${PROGDIR}/get-env-gcp" \
          -o metadata=/tmp/output

  mv /tmp/output/*.json /tmp/
}

main "$@"
