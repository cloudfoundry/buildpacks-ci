#!/usr/bin/env bash

set -euo pipefail

readonly PROGDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
lease_id=

main() {
  configure_shepherd

  parse_arguments "$@"

  if [[ -z "${lease_id}" ]]; then
    util::print::title "No lease provided. Claiming a new environment"
    claim_environment
  elif [[ -n "${lease_id}" ]]; then
    util::print::title "Using lease ${lease_id}"
    get_metadata_file "${lease_id}"
  fi
}

function configure_shepherd() {
  if ! command -v shepherd &> /dev/null; then
    util::print::error "shepherd CLI is not installed. Please install it from https://gitlab.eng.vmware.com/shepherd/shepherd2/-/blob/main/USERGUIDE.md#1-install-the-shepherd2-cli"
  fi

  util::print::info "Configuring shepherd CLI"

  shepherd config location https://v2.shepherd.run > /dev/null

  source "${HOME}/workspace/bp-envs/scripts/login_credhub_public"

  local token

  token="$(credhub get -n /concourse/main/shepherd-buildpacks-service-account-key -q)"
  shepherd login service-account "${token}" > /dev/null
  if [[ $? -ne 0 ]]; then
    util::print::error "Failed to login to shepherd, please check your credentials"
  fi

  shepherd config namespace buildpacks > /dev/null
  if [[ $? -ne 0 ]]; then
    util::print::error "Failed to set namespace to buildpacks, please check your credentials"
  fi
}

function parse_arguments() {
  local OPTIND
  while getopts "l:" opt; do
    case "${opt}" in
    l)
      lease_id="${OPTARG}"
      ;;
    *)
      util::print::error "Usage: $0 [-l <lease id from Shepherd>]"
      exit 1
      ;;
    esac
  done
}

function claim_environment() {

  local claimer output env_name lease_id
  claimer="$(whoami)"

  output=$(shepherd create lease --pool cfd --pool-namespace buildpacks --duration 4h --description "Claimed by ${claimer} from Buildpacks team" --json)
  if [[ $? -ne 0 ]]; then
    util::print::error "Failed to claim an environment ${output}"
  fi

  lease_id=$(echo "${output}" | jq -r .id)

  check_lease_is_ready "${lease_id}"

  util::print::success "Claimed: ${lease_id} for 4 hours. If you need more time, please run 'shepherd set-duration lease ${lease_id} --extend-by <duration in seconds>'"

  get_metadata_file "${lease_id}"
}

function check_lease_is_ready() {
  local lease_id="$1"

  util::print::info "Checking if lease ${lease_id} is ready to be used...."

  max_retries=10

  while [[ ${max_retries} -gt 0 ]]; do
    output=$(shepherd get lease "${lease_id}" --json)
    if [[ $? -ne 0 ]]; then
      util::print::error "Failed to get lease ${lease_id} from Shepherd: ${output}"
    fi

    status=$(echo "${output}" | jq -r .status)
    status_message=$(echo "${output}" | jq -r .status_message)

    if [[ "${status}" == "LEASED" && "${status_message}" == "Ready to use" ]]; then
      util::print::success "Lease ${lease_id} is ready to be used"
      return
    fi

    util::print::info "Lease ${lease_id} is not ready yet. Retrying in 5 seconds...."
    sleep 5
    max_retries=$((max_retries - 1))
  done

  util::print::error "Lease ${lease_id} is not ready to be used. Please check the status in Shepherd or claim another lease"
}

function get_metadata_file() {
  local lease_id="$1"

  util::print::info "Getting metadata file for lease ${lease_id}...."

  output=$(shepherd get lease "${lease_id}" --json)
  if [[ $? -ne 0 ]]; then
    util::print::error "Failed to get metadata file for lease ${lease_id} from Shepherd: ${output}"
  fi

  echo "${output}" | jq -r .output > "/tmp/${lease_id}.json"

  login_to_existing_env "${lease_id}"
}

function login_to_existing_env() {
  local lease_id="$1"
  local env_name api_url

  env_name="$(jq -r .name "/tmp/${lease_id}.json")"
  api_url="$(jq -r .cf.api_url "/tmp/${lease_id}.json")"
  util::print::info "Logging into environment ${env_name} (api: ${api_url}), from lease ${lease_id}...."

  eval "$(bbl print-env --metadata-file "/tmp/${lease_id}.json")"

  export CF_USERNAME=admin
  export CF_PASSWORD=$(credhub get -n "/bosh-${env_name}/cf/cf_admin_password" -q)

  cf api "${api_url}" --skip-ssl-validation
  cf auth
  cf target -o system
  cf create-space my-space
  cf target -s my-space

  util::print::success "Logged into ${env_name}"
}

function util::print::title() {
  local blue reset message
  blue="\033[0;34m"
  reset="\033[0;39m"
  message="${1}"

  echo -e "\n${blue}${message}${reset}" >&2
}

function util::print::info() {
  local message
  message="${1}"

  echo -e "${message}" >&2
}

function util::print::error() {
  local message red reset
  message="${1}"
  red="\033[0;31m"
  reset="\033[0;39m"

  echo -e "${red}${message}${reset}" >&2
  exit 1
}

function util::print::success() {
  local message green reset
  message="${1}"
  green="\033[0;32m"
  reset="\033[0;39m"

  echo -e "${green}${message}${reset}" >&2
}

main "$@"
