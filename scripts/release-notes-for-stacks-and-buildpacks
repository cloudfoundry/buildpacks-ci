#! /usr/bin/env ruby

#
# This script is intended to be used to generate `cf-release` release notes for the buildpacks.
#
# When given two commits, it will examine differences in # `config/blobs.yml` to figure out what buildpacks have been
# updated. Then it hits the github API to pull release notes for all
# the intervening releases, and formats them appropriately.
#
# USAGE: release-notes-for-stacks-and-buildpacks <path/to/cf-release> <previous-tag> <current-tag> [--token <github-token>] [--update-cf-release]

require 'getoptlong'
require 'json'
require 'version_sorter'

# reopening
module Enumerable
  def version_sort
    VersionSorter.sort self
  end
end

opts = GetoptLong.new(
  ['--token',             '-t', GetoptLong::REQUIRED_ARGUMENT],
  ['--update-cf-release', '-u', GetoptLong::NO_ARGUMENT]
)

def usage
  puts "USAGE: #{File.basename(__FILE__)} <path/to/cf-release> <previous-tag> <current-tag> [--token <github-token>] [--update-cf-release]"
  exit 1
end

token = nil
update_cf_release = false
opts.each do |opt, arg|
  case opt
  when '--token'
    token = arg
  when '--update-cf-release'
    update_cf_release = true
  else
    usage
  end
end

usage unless ARGV[2]

path = ARGV[0]
tag1 = ARGV[1]
tag2 = ARGV[2]

class ReleaseNoteGenerator
  RELEASES_API_FMT = '/repos/cloudfoundry/%s/releases'.freeze
  RELEASE_FMT      = 'https://github.com/cloudfoundry/%s/releases/tag/%s'.freeze

  attr_reader :path, :tag1, :tag2, :token, :update_cf_release

  def initialize(path, tag1, tag2, token, update_cf_release)
    @path = path
    @tag1 = tag1
    @tag2 = tag2
    @token = token
    @update_cf_release = update_cf_release
  end

  def update_cf_release!
    Dir.chdir path do
      system 'git remote update'
      system 'git checkout develop'
      system './scripts/update'
    end
  end

  def curl_github_api(path)
    headers = ("-H 'Authorization: token #{token}'" if token)
    result = `curl -s #{headers} https://api.github.com#{path}`
    raise result if result =~ /API rate limit exceeded/

    JSON.parse result
  end

  def main
    update_cf_release! if update_cf_release

    versions = get_rootfs_versions
    rootfses = all_keys versions
    rootfses.version_sort.each do |rootfs|
      v1 = versions[tag1][rootfs]
      v2 = versions[tag2][rootfs]
      print_release_notes_for 'stacks', v1, v2 if v1 != v2
    end

    versions = get_buildpack_versions
    buildpacks = all_keys versions
    buildpacks.version_sort.each do |buildpack|
      v1 = versions[tag1][buildpack]
      v2 = versions[tag2][buildpack]
      print_release_notes_for buildpack, v1, v2 if v1 != v2
    end
  end

  def print_release_notes_for(thing, v1, v2)
    releases_path = format RELEASES_API_FMT, thing

    releases_data = curl_github_api releases_path

    releases = releases_data.map do |release|
      release['tag_name']
    end.version_sort.reverse
    raise "couldn't find #{thing} #{v1} in release notes" unless (v1_index = releases.index(v1))
    raise "couldn't find #{thing} #{v2} in release notes" unless (v2_index = releases.index(v2))

    puts
    puts "### #{thing}"
    puts
    puts "updated to #{v2} (from #{v1})"
    puts

    (v2_index...v1_index).each do |v_index|
      release = releases_data[v_index]
      release_tag = release['tag_name']
      release_url = format RELEASE_FMT, thing, release_tag

      puts
      puts "#### [#{release_tag}](#{release_url})"
      puts
      puts release['body'].delete("\r")
      puts
    end
  end

  private

  def all_keys(hash_of_hashes)
    keys = []
    hash_of_hashes.each_key do |key|
      keys += hash_of_hashes[key].keys
    end
    keys.sort.uniq
  end

  def get_rootfs_versions
    examine_blobs_for_tags_and_filter(tag1, tag2, /rootfs/) do |versions, line|
      rootfs = line.split('/').last.split(/\W/).first
      version = line.sub(/\.tar\.gz.*$/, '').split('-').last
      versions[rootfs] = version
    end
  end

  def get_buildpack_versions
    examine_blobs_for_tags_and_filter(tag1, tag2, /buildpack/) do |versions, line|
      buildpack = line.split('/').first
      version = line.sub(/\.zip.*$/, '').split('-').last
      versions[buildpack] = version
    end
  end

  def examine_blobs_for_tags_and_filter(tag1, tag2, regex, &)
    Dir.chdir path do
      outputs = { tag1 => get_blobs(tag1, regex), tag2 => get_blobs(tag2, regex) }

      outputs.each_with_object({}) do |tag_output, versions|
        tag, output = *tag_output

        versions[tag] = output.each_with_object({}) do |line, versions|
          yield versions, line
        end
      end
    end
  end

  def get_blobs(tag, regex)
    `git show #{tag}:config/blobs.yml`.split("\n").grep(regex)
  end
end

ReleaseNoteGenerator.new(path, tag1, tag2, token, update_cf_release).main
