#!/usr/bin/env ruby
# encoding: utf-8

buildpacks_ci_dir = File.expand_path(File.join(File.dirname(__FILE__), '..'))
binary_builds_dir = File.expand_path(File.join(buildpacks_ci_dir, '..', 'builds-out'))

require_relative "#{buildpacks_ci_dir}/lib/buildpack-dependency-updater"
require_relative "#{buildpacks_ci_dir}/lib/buildpack-dependency"
require_relative "#{buildpacks_ci_dir}/lib/tracker-client"
require_relative "#{buildpacks_ci_dir}/lib/git-client"

dependency = ENV['DEPENDENCY']

# can only handle one buildpack update atm
buildpack = ENV.fetch("BUILDPACK_NAME", BuildpackDependency.for(dependency).first)
buildpack_dir = File.expand_path(File.join(buildpacks_ci_dir, '..', "buildpack"))
buildpack_updater = BuildpackDependencyUpdater.create(dependency, buildpack, buildpack_dir, binary_builds_dir)

version = buildpack_updater.dependency_version

puts "Updating manifest with #{dependency} #{version}..."
buildpack_updater.run!

tracker_client = TrackerClient.new(ENV['TRACKER_API_TOKEN'], ENV['TRACKER_PROJECT_ID'], ENV['TRACKER_REQUESTER_ID'].to_i)
story_ids = tracker_client.search(name: "#{dependency} #{version}").select do |story|
  story['current_state'] != 'accepted'
end.map do |story|
  "[##{story['id']}]"
end.join("\n")

git_commit_message = GitClient.last_commit_message(binary_builds_dir)

/^(source url: .*)$/.match(git_commit_message)
source_info = $1

Dir.chdir(buildpack_dir) do
  raise 'command failed' unless system('git add -A')
  raise 'command failed' unless system("git commit -m 'Update #{dependency} to #{version}\n\n#{source_info}\n\n#{story_ids}'")
end
