#!/usr/bin/env ruby
# encoding: utf-8

require 'yaml'
require 'optparse'

raise '`brew install lastpass-cli` is required' if `which lpass` == ''

# Argument parsing
OPTIONS = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: ./bin/update-all-the-pipelines [options]"

  opts.on("--without=WITHOUT", "-wWITHOUT", "Don't update matched pipelines") do |without_string|
    OPTIONS[:without] = without_string
  end

  opts.on("--match=MATCH", "-mMATCH", "Only update matched pipelines") do |match_string|
    OPTIONS[:match] = match_string
  end

  opts.on("--template=TEMPLATE", "-tTEMPLATE", "Only update pipelines from the specified template") do |template_string|
    OPTIONS[:template] = template_string
  end
end
opt_parser.parse!

LPASS_CONCOURSE_PRIVATE = ENV['LPASS_CONCOURSE_PRIVATE_FILE'] || 'Shared-Buildpacks/concourse-private.yml'
LPASS_DEPLOYMENTS_BUILDPACKS = ENV['LPASS_DEPLOYMENTS_BUILDPACKS_FILE'] || 'Shared-Buildpacks/deployments-buildpacks.yml'
LPASS_REPOS_PRIVATE_KEYS = ENV['LPASS_REPOS_PRIVATE_KEYS_FILE'] || 'Shared-Buildpacks/buildpack-repos-private-keys.yml'
LPASS_BOSH_RELEASE_PRIVATE_KEYS = ENV['LPASS_BOSH_RELEASE_PRIVATE_KEYS_FILE'] || 'Shared-Buildpacks/buildpack-bosh-release-repos-private-keys.yml'

public_config = YAML.load_file("public-config.yml")

lpass_config= {}
lpass_yaml_data=%x{lpass show #{LPASS_CONCOURSE_PRIVATE} --notes && lpass show #{LPASS_DEPLOYMENTS_BUILDPACKS} --notes}
if $?.exitstatus != 0
  puts "WARNING: ignoring lastpass config file. An error occured while processing #{LPASS_CONCOURSE_PRIVATE} and #{LPASS_DEPLOYMENTS_BUILDPACKS}"
else
  lpass_config = YAML.load(lpass_yaml_data)
end

full_config = public_config.merge(lpass_config)

flyrc  = YAML.load_file(File.expand_path('~/.flyrc'))
target_name= ENV['TARGET_NAME'] || "buildpacks"
target = flyrc['targets'][target_name]
concourse_url= target['api']

PIPELINE_PREFIX = ENV['PIPELINE_PREFIX'] || ''

def header(msg)
  print '*' * 10
  puts " #{msg}"
end

def set_pipeline(target_name:,name:, cmd:, load: [])
  return if OPTIONS.has_key?(:match) && !name.include?(OPTIONS[:match])
  return if OPTIONS.has_key?(:without) && name.include?(OPTIONS[:without])
  puts "   #{name} pipeline"

  puts system(%{bash -c "fly -t #{target_name} set-pipeline \
    -p #{PIPELINE_PREFIX}#{name} \
    -c <(#{cmd}) \
    -l public-config.yml \
    -l <(lpass show #{LPASS_CONCOURSE_PRIVATE} --notes && lpass show #{LPASS_DEPLOYMENTS_BUILDPACKS} --notes && lpass show #{LPASS_REPOS_PRIVATE_KEYS} --notes && lpass show #{LPASS_BOSH_RELEASE_PRIVATE_KEYS}) \
    #{load.collect { |l| "-l #{l}" }.join(' ')}
  "})
end

def update_standard_pipelines(target_name, full_config)
  header('For standard pipelines')
  Dir['pipelines/*.yml'].each do |filename|
    name = File.basename(filename, '.yml')
    set_pipeline(target_name: target_name, name: name, cmd: "erb organization=#{full_config["buildpacks-github-org"]} run_oracle_php_tests=#{full_config['run-oracle-php-tests']} #{filename}")
  end
end

def update_bosh_lite_pipelines(target_name, full_config)
  header('For bosh-lite pipelines')
  Dir['config/bosh-lite/*.yml'].each do |filename|
    next if OPTIONS.has_key?(:template) && !filename.include?(OPTIONS[:template])
    deployment_name = File.basename(filename, '.yml')
    full_deployment_name = YAML.load_file(filename)['deployment-name']
    matches = /(lts|edge)\-\d+(\-azure)?/.match(deployment_name)
    if matches.nil?
      puts 'Your config/bosh-lite/*.yml files must be named in the following manner: edge-1.yml, edge-2.yml, lts-1.yml, lts-2.yml, etc.'
      exit 1
    end
    cf_version_type = matches[1]
    set_pipeline(
      target_name: target_name,
      name: deployment_name,
      cmd: "erb domain_name='#{full_config["domain-name"]}' deployment_name=#{deployment_name} full_deployment_name=#{full_deployment_name} pipelines/templates/bosh-lite-cf-#{cf_version_type}.yml",
      load: [filename]
    )
  end
end

def update_buildpack_pipelines(target_name, full_config)
  header('For buildpack pipelines')
  Dir['config/buildpack/*.yml'].each do |filename|
    next if OPTIONS.has_key?(:template) && !filename.include?(OPTIONS[:template])

    language = File.basename(filename, '.yml')
    set_pipeline(
      target_name: target_name,
      name: "#{language}-buildpack",
      cmd: "erb language=#{language} organization=#{full_config["buildpacks-github-org"]} pipelines/templates/buildpack.yml",
      load: [filename]
    )
  end
end

if !OPTIONS.has_key?(:template)
  update_standard_pipelines(target_name, full_config)
end
update_bosh_lite_pipelines(target_name, full_config)
update_buildpack_pipelines(target_name, full_config)

puts 'Thanks, JT + JW'
