#!/usr/bin/env ruby
# encoding: utf-8

require 'yaml'

raise '`brew install lastpass-cli` is required' if `which lpass` == ''

LPASS_CONCOURSE_PRIVATE = ENV['LPASS_CONCOURSE_PRIVATE_FILE'] || 'Shared-Buildpacks/concourse-private.yml'
LPASS_DEPLOYMENTS_BUILDPACKS = ENV['LPASS_DEPLOYMENTS_BUILDPACKS_FILE'] || 'Shared-Buildpacks/deployments-buildpacks.yml'
LPASS_REPOS_PRIVATE_KEYS = ENV['LPASS_REPOS_PRIVATE_KEYS_FILE'] || 'Shared-Buildpacks/buildpack-repos-private-keys.yml'

public_config = YAML.load_file("public-config.yml")

lpass_config= {}
lpass_yaml_data=%x{lpass show #{LPASS_CONCOURSE_PRIVATE} --notes && lpass show #{LPASS_DEPLOYMENTS_BUILDPACKS} --notes}
if $?.exitstatus != 0
  puts "WARNING: ignoring lastpass config file. An error occured while processing #{LPASS_CONCOURSE_PRIVATE} and #{LPASS_DEPLOYMENTS_BUILDPACKS}"
else
  lpass_config = YAML.load(lpass_yaml_data)
end

full_config = public_config.merge(lpass_config)

flyrc  = YAML.load_file(File.expand_path('~/.flyrc'))
target_name="buildpacks"
target = flyrc['targets'][target_name]
concourse_url= target['api']

def header(msg)
  print '*' * 10
  puts " #{msg}"
end

def set_pipeline(target_name:,name:, cmd:, load: [])
  puts system(%{bash -c "fly -t #{target_name} set-pipeline \
    -p #{name} \
    -c <(#{cmd}) \
    -l public-config.yml \
    -l <(lpass show #{LPASS_CONCOURSE_PRIVATE} --notes && lpass show #{LPASS_DEPLOYMENTS_BUILDPACKS} --notes && lpass show #{LPASS_REPOS_PRIVATE_KEYS} --notes) \
    #{load.collect { |l| "-l #{l}" }.join(' ')}
  "})
end

header('For standard pipelines')
Dir['pipelines/*.yml'].each do |filename|
  name = File.basename(filename, '.yml')
  puts "   #{name} pipeline"
  set_pipeline(target_name: target_name,name: name, cmd: "erb concourse_url=#{concourse_url} #{filename}")
end

header('For bosh-lite pipelines')
Dir['config/bosh-lite/*.yml'].each do |filename|
  deployment_name = File.basename(filename, '.yml')
  full_deployment_name = YAML.load_file(filename)['deployment-name']
  matches = /(lts|edge)\-\d+(\-azure)?/.match(deployment_name)
  puts deployment_name
  if matches.nil?
    puts 'Your config/bosh-lite/*.yml files must be named in the following manner: edge-1.yml, edge-2.yml, lts-1.yml, lts-2.yml, etc.'
    exit 1
  end
  cf_version_type = matches[1]
  puts "   #{deployment_name} bosh-lite"
  set_pipeline(
    target_name: target_name,
    name: deployment_name,
    cmd: "erb domain-name=#{full_config["domain-name"]} deployment_name=#{deployment_name} full_deployment_name=#{full_deployment_name} concourse_url=#{concourse_url} pipelines/templates/bosh-lite-cf-#{cf_version_type}.yml",
    load: [filename]
  )
end

header('For buildpack pipelines')
Dir['config/buildpack/*.yml'].each do |filename|
  language = File.basename(filename, '.yml')
  puts "   #{language} buildpack"
  set_pipeline(
    target_name: target_name,
    name: "#{language}-buildpack",
    cmd: "erb language=#{language} concourse_url=#{concourse_url} pipelines/templates/buildpack.yml",
    load: [filename]
  )
end

header('For buildpack pull request pipelines')
Dir['config/buildpack/*.yml'].each do |filename|
  language = File.basename(filename, '.yml')
  puts "   #{language} pull-request"
  set_pipeline(
    target_name: target_name,
    name: "#{language}-pull-request",
    cmd: "erb language=#{language} concourse_url=#{concourse_url} pipelines/templates/pull-request.yml"
  )
end

puts 'Thanks, JT'
